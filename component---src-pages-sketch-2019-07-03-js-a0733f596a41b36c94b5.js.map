{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/03.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","count","margin","COLORS","setup","createCanvas","width","strokeWeight","draw","blendMode","BLEND","background","fill","noStroke","circle","height","noFill","MULTIPLY","a","map","frameCount","TWO_PI","d","sin","centerPoints","polarToCartesian","_loop","i","r","lerp","forEach","cp","j","stroke","x","y","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"+IAIMA,EAAS,SAASC,GACtB,IACIC,EACAC,EAFEC,EAAS,CAAC,MAAO,QAAS,QAIhCH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBJ,EAAQD,EAAEM,MAAQ,GAClBJ,EAASF,EAAEM,OAAS,EAAI,GACxBN,EAAEO,aAAa,IAGjBP,EAAEQ,KAAO,WACPR,EAAES,UAAUT,EAAEU,OACdV,EAAEW,WAAW,GACbX,EAAEY,KAAK,KACPZ,EAAEa,WACFb,EAAEc,OAAOd,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGf,EAAEM,MAAQJ,EAAS,GAEvDF,EAAEgB,SACFhB,EAAES,UAAUT,EAAEiB,UAUd,IARA,IAAMC,EAAIlB,EAAEmB,IAAInB,EAAEoB,WAAa,KAAM,EAAG,KAAM,EAAGpB,EAAEqB,QAC7CC,EAAItB,EAAEmB,IAAInB,EAAEuB,IAAQ,EAAJL,IAAS,EAAG,EAAG,EAAGlB,EAAEM,MAAQ,EAAIJ,GAElDsB,EAAe,CACjBC,YAAiBzB,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAGI,GAC/CG,YAAiBzB,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAIlB,EAAEqB,QAAU,EAAI,GAAIC,GACpEG,YAAiBzB,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAIlB,EAAEqB,QAAU,EAAI,GAAIC,IAhBpDI,EAAA,SAkBTC,GACP,IAAMC,EAAI5B,EAAE6B,KAAK,EAAG7B,EAAEM,MAAQJ,EAAQyB,GAEtCH,EAAaM,QAAQ,SAACC,EAAIC,GACxBhC,EAAEiC,OAAO9B,EAAO6B,IAChB,IAAME,EAAIlC,EAAE6B,KAAKE,EAAGG,EAAGlC,EAAEM,MAAQ,EAAGqB,GAC9BQ,EAAInC,EAAE6B,KAAKE,EAAGI,EAAGnC,EAAEe,OAAS,EAAGY,GACrC3B,EAAEc,OAAOoB,EAAGC,EAAGP,MAPVD,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAI1B,EAAOyB,EAA9BC,KAaES,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAc1C,OAAQA,EAAQ2C,KAAMJ,EAASK,SAAUC,YAAY,wCChDrEC,EAAAvB,EAAAc,EAAA,sBAAAU,IAAAD,EAAAvB,EAAAc,EAAA,sBAAAW,IAAAF,EAAAvB,EAAAc,EAAA,sBAAAY,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK7B,IAAI2B,GAASC,GAa9BH,EAA0B,SAC9BM,EACAC,EACAL,EACAM,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMxB,EAAIoB,EAAUF,KAAKC,IAAIH,GAASM,EAChCrB,EAAIoB,EAAUH,KAAK7B,IAAI2B,GAASO,EACtC,OAAOC,EAAU,CAACxB,EAAGC,GAAK,CAAED,IAAGC,MAIlBV,IAzBU,SACvB6B,EACAC,EACAL,EACAC,EACAO,QACG,IADHA,OAAU,GAEV,IAAMxB,EAAIY,EAAkBQ,EAASJ,EAAOC,GACtChB,EAAIY,EAAkBQ,EAASL,EAAOC,GAC5C,OAAOO,EAAU,CAACxB,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-07-03-js-a0733f596a41b36c94b5.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const COLORS = [\"red\", \"green\", \"blue\"];\n  let count;\n  let margin;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    count = p.width / 20;\n    margin = p.width * (1 / 6);\n    p.strokeWeight(2);\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0);\n    p.fill(255);\n    p.noStroke();\n    p.circle(p.width / 2, p.height / 2, p.width - margin / 2);\n\n    p.noFill();\n    p.blendMode(p.MULTIPLY);\n\n    const a = p.map(p.frameCount % 1200, 0, 1200, 0, p.TWO_PI);\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width / 2 - margin);\n\n    let centerPoints = [\n      polarToCartesian(p.width / 2, p.height / 2, a, d),\n      polarToCartesian(p.width / 2, p.height / 2, a + p.TWO_PI * (1 / 3), d),\n      polarToCartesian(p.width / 2, p.height / 2, a + p.TWO_PI * (2 / 3), d),\n    ];\n    for (let i = 0; i < 1; i += 1 / count) {\n      const r = p.lerp(6, p.width - margin, i);\n\n      centerPoints.forEach((cp, j) => {\n        p.stroke(COLORS[j]);\n        const x = p.lerp(cp.x, p.width / 2, i);\n        const y = p.lerp(cp.y, p.height / 2, i);\n        p.circle(x, y, r);\n      });\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}