{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/18.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js"],"names":["sketch","p","particles","restartedMovers","Particle","i","this","stroke","location","createVector","apply","polarToCartesian","width","height","random","TWO_PI","velocity","acceleration","p5","Vector","random2D","prototype","draw","add","strokeWeight","map","dist","x","y","SIZE","beginShape","vertex","endShape","_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default","key","get","_this$location","setup","createCanvas","background","Array","from","length","_","forEach","m","filter","onScreen","constructor","noLoop","__webpack_exports__","_ref","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_6__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","module","exports","Constructor","protoProps","staticProps"],"mappings":"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","file":"component---src-pages-sketch-2019-03-18-js-8388341fa07908786506.js","sourcesContent":["import React from \"react\";\nimport p5 from \"p5\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SIZE = 100;\n\n  let particles = [];\n  let restartedMovers = 0;\n\n  class Particle {\n    constructor(i) {\n      this.i = i || this.i;\n      this.stroke = this.i % 2 ? 255 : 0;\n      this.location = p.createVector(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          p.random(p.TWO_PI),\n          p.random(p.width / 4),\n          true\n        )\n      );\n      this.velocity = p.createVector(p.random(-1, 1), p.random(-1, 1));\n      this.acceleration = p5.Vector.random2D();\n    }\n    draw() {\n      this.acceleration = p.createVector(p.random(-1, 1), p.random(-1, 1));\n      this.velocity.add(this.acceleration);\n\n      p.strokeWeight(\n        p.map(\n          p.dist(p.width / 2, p.height / 2, this.location.x, this.location.y),\n          0,\n          p.dist(p.width / 2, p.height / 2, p.width / 2, 0),\n          SIZE,\n          SIZE / 10,\n          true\n        )\n      );\n      p.stroke(this.stroke);\n\n      p.beginShape();\n      p.vertex(this.location.x, this.location.y);\n      this.location.add(this.velocity);\n      p.vertex(this.location.x, this.location.y);\n      p.endShape();\n    }\n    get onScreen() {\n      const { x, y } = this.location;\n      return x > 0 && x < p.width && y > 0 && y < p.height;\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    particles = Array.from({ length: 1000 }, (_, i) => new Particle(i));\n  };\n\n  p.draw = function() {\n    particles.forEach(m => m.draw());\n    particles\n      .filter(m => !m.onScreen)\n      .forEach(m => {\n        m.constructor();\n        restartedMovers++;\n      });\n\n    restartedMovers > 10000 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;"],"sourceRoot":""}