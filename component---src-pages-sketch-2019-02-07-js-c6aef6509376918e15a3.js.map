{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/07.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js","webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","shapes","Shape","colorFunctions","angle","max","abs","sin","PI","cos","this","_cf","random","points","Array","fill","map","_","Point","_proto","prototype","_clr","color","frameCount","draw","_this","beginShape","vertex","location","x","y","forEach","_ref","i","quadraticVertex","width","height","move","endShape","CLOSE","_angle","TWO_PI","_dist","_speed","_getLocation","_proto2","polarToCartesian","setup","createCanvas","noStroke","blendMode","HARD_LIGHT","background","shape","__webpack_exports__","_ref2","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname","description","$export","__webpack_require__","P","toObject","toAbsoluteIndex","toLength","module","exports","value","O","length","aLen","arguments","index","undefined","end","endPos","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-02-07-js-c6aef6509376918e15a3.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let shapes = [];\n\n  class Shape {\n    constructor() {\n      const colorFunctions = [\n        angle => p.max(15, p.abs(p.sin(angle)) * 240),\n        angle => p.max(15, p.abs(p.sin(angle + p.PI)) * 240),\n        angle => p.max(15, p.abs(p.cos(-angle)) * 240),\n        angle => p.max(15, p.abs(p.cos(-angle + p.PI)) * 240),\n      ];\n      this._cf = [\n        p.random(colorFunctions),\n        p.random(colorFunctions),\n        p.random(colorFunctions),\n      ];\n      this.points = new Array(7).fill().map(_ => new Point());\n    }\n    _clr() {\n      return p.color(\n        this._cf[0](p.frameCount / 1000),\n        this._cf[1](p.frameCount / 1000),\n        this._cf[2](p.frameCount / 1000)\n      );\n    }\n    draw() {\n      p.fill(this._clr());\n      p.beginShape();\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      this.points.forEach(({ location }, i) => {\n        if (i === 0) return;\n        p.quadraticVertex(p.width / 2, p.height / 2, location.x, location.y);\n        this.points[i].move();\n      });\n      p.quadraticVertex(\n        p.width / 2,\n        p.height / 2,\n        this.points[0].location.x,\n        this.points[0].location.y\n      );\n      p.endShape(p.CLOSE);\n    }\n  }\n\n  class Point {\n    constructor() {\n      this._angle = p.random(p.TWO_PI);\n      this._dist = p.random(p.height / 3, p.height / 2);\n      this._speed = p.random(-0.01, 0.01);\n      this.location = this._getLocation();\n    }\n\n    _getLocation() {\n      return polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        this._angle,\n        this._dist\n      );\n    }\n\n    move() {\n      this._angle += this._speed;\n      this.location = this._getLocation();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    shapes = new Array(5).fill().map(_ => new Shape());\n    p.noStroke();\n    p.blendMode(p.HARD_LIGHT);\n  };\n\n  p.draw = function() {\n    p.background(0);\n    shapes.forEach((shape, i) => shape.draw());\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}