{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/28.js"],"names":["sketch","p","POINT_COUNT","points","drawAThing","x","y","_getFarthestPoint","sort","a","b","dist","vector","getFarthestPoint","color","stroke","line","setup","createCanvas","background","Array","fill","map","_","i","createVector","randomGaussian","width","height","draw","Y","floor","frameCount","X","xi","yi","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_4__","path","pathname","description"],"mappings":"2IAGMA,EAAS,SAASC,GACtB,IACMC,EAAc,GAChBC,EAAS,GAEb,SAASC,EAAWC,EAAGC,GAAG,IAAAC,EAM1B,SAA0BF,EAAGC,GAM3B,OALAH,EAAOK,KACL,SAACC,EAAGC,GAAJ,OACET,EAAEU,KAAKN,EAAGC,EAAGG,EAAEG,OAAOP,EAAGI,EAAEG,OAAON,GAClCL,EAAEU,KAAKN,EAAGC,EAAGI,EAAEE,OAAOP,EAAGK,EAAEE,OAAON,KAE/BH,EAAOD,EAAc,GAXFW,CAAiBR,EAAGC,GAAtCM,EADgBL,EAChBK,OAAQE,EADQP,EACRO,MAChBb,EAAEc,OAAOD,EAAOA,EAAOA,EAAO,IAC9Bb,EAAEe,KAAKX,EAAGC,EAAGM,EAAOP,EAAGO,EAAON,GAYhCL,EAAEgB,MAAQ,WACRhB,EAAEiB,aAAa,IAAK,KACpBjB,EAAEkB,WAAW,KACbhB,EAAS,IAAIiB,MAAMlB,GAAamB,OAAOC,IAAI,SAACC,EAAGC,GAAJ,MAAW,CACpDZ,OAAQX,EAAEwB,aACRxB,EAAEyB,eAAezB,EAAE0B,MAAQ,EAAI1B,EAAE0B,MAxB1B,GAwB0C,GACjD1B,EAAEyB,eAAezB,EAAE2B,OAAS,EAAI3B,EAAE2B,OAzB3B,GAyB4C,IAErDd,MAAO,CAAC,IAAK,OAAa,GAAGU,EAAI,OAIrCvB,EAAE4B,KAAO,WACP,IAAMC,EAAI7B,EAAE8B,MAAM9B,EAAE+B,YAAc/B,EAAE0B,MAhCzB,KAiCLM,EAAIhC,EAAE8B,MAAM9B,EAAE+B,WAAc/B,EAAE0B,MAjCzB,GAiCyCG,GACpD,GAAIA,EAAI7B,EAAE2B,OAlCC,GAmCT,IAAK,IAAIM,EAAK,EAAGA,EAnCR,GAmCmBA,IAC1B,IAAK,IAAIC,EAAK,EAAGA,EApCV,GAoCqBA,MACxBlC,EAAE+B,WAAa/B,EAAE8B,MArCd,GAqC2B,MAC9B3B,EAAW6B,EAAKhC,EAAE0B,MAtCf,GAsC+BO,EAAIJ,EAAK7B,EAAE2B,OAtC1C,GAsC2DO,QAIpElC,EAAEmC,WAKOC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAc1C,OAAQA,EAAQ2C,KAAMJ,EAASK,SAAUC,YAAY","file":"component---src-pages-sketch-2019-01-28-js-f03145780c302dd42cc0.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const GRID = 30;\n  const POINT_COUNT = 10;\n  let points = [];\n\n  function drawAThing(x, y) {\n    const { vector, color } = getFarthestPoint(x, y);\n    p.stroke(color, color, color, 32);\n    p.line(x, y, vector.x, vector.y);\n  }\n\n  function getFarthestPoint(x, y) {\n    points.sort(\n      (a, b) =>\n        p.dist(x, y, a.vector.x, a.vector.y) -\n        p.dist(x, y, b.vector.x, b.vector.y)\n    );\n    return points[POINT_COUNT - 1];\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    points = new Array(POINT_COUNT).fill().map((_, i) => ({\n      vector: p.createVector(\n        p.randomGaussian(p.width / 2, (p.width / GRID) * 3),\n        p.randomGaussian(p.height / 2, (p.height / GRID) * 3)\n      ),\n      color: [255, 255 * 0.666, 0][i % 3],\n    }));\n  };\n\n  p.draw = function() {\n    const Y = p.floor(p.frameCount / (p.width / GRID));\n    const X = p.floor(p.frameCount - (p.width / GRID) * Y);\n    if (Y < p.height / GRID) {\n      for (let xi = 0; xi < GRID; xi++) {\n        for (let yi = 0; yi < GRID; yi++) {\n          !(p.frameCount % p.floor(GRID / 13)) &&\n            drawAThing(X + (p.width / GRID) * xi, Y + (p.height / GRID) * yi);\n        }\n      }\n    } else {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n"],"sourceRoot":""}