{"version":3,"sources":["webpack:///./src/pages/sketch/2019/09/01.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","startRadius","HUE","random","particles","Particle","x","y","this","startX","startY","move","animLoop","theta","noise2D","prev","noiseX","height","noiseY","map","cos","sin","display","stroke","dist","line","setup","frameRate","createCanvas","colorMode","HSL","background","strokeWeight","createLoop","gif","render","open","noiseRadius","width","a","TWO_PI","push","polarToCartesian","draw","forEach","particle","DURATION","frameCount","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-09-01-js-26759649cb6abe6df2e5.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && true;\nconst DURATION = 60;\n\nconst sketch = function(p) {\n  const SIZE = 3;\n  const HUE = p.random(100);\n\n  let frameRate;\n  let particles = [];\n  let startRadius;\n\n  class Particle {\n    constructor(x, y) {\n      this.startX = x;\n      this.startY = y;\n      this.x = this.startX;\n      this.y = this.startY;\n      this.move();\n    }\n\n    move() {\n      const { theta, noise2D } = p.animLoop;\n      this.prev = { x: this.x, y: this.y };\n\n      const noiseX =\n        noise2D(this.startX / 100, this.startY / 200) * (p.height / 2);\n      const noiseY =\n        noise2D(this.startY / 100, this.startX / 200) * (p.height / 2);\n\n      this.x = this.startX + p.map(p.cos(theta), -1, 1, 0, noiseX);\n      this.y = this.startY + p.map(p.sin(theta), -1, 1, 0, noiseY);\n    }\n\n    display() {\n      p.stroke(\n        HUE,\n        100,\n        p.map(\n          p.dist(this.startX, this.startY, this.x, this.y),\n          0,\n          startRadius,\n          100,\n          0,\n          true\n        ),\n        p.map(\n          p.dist(this.startX, this.startY, this.x, this.y),\n          0,\n          startRadius,\n          50,\n          0,\n          true\n        )\n      );\n      p.line(this.x, this.y, this.prev.x, this.prev.y);\n    }\n  }\n\n  p.setup = function() {\n    p.frameRate(60);\n\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 100);\n    p.background(HUE, 100, 5);\n    p.strokeWeight(SIZE);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1.5,\n    });\n\n    startRadius = p.width / 5;\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 100) {\n      particles.push(\n        new Particle(\n          ...polarToCartesian(p.width / 2, p.height / 2, a, startRadius, true)\n        )\n      );\n    }\n  };\n\n  p.draw = function() {\n    particles.forEach(particle => {\n      particle.move();\n      particle.display();\n    });\n    p.frameCount === DURATION * 60 && !RENDER && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}