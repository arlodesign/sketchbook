{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/27.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","angle","alpha","setup","createCanvas","colorMode","HSB","background","noFill","blendMode","HARD_LIGHT","strokeWeight","draw","NOISE","noise","frameCount","stroke","map","tan","i","line","apply","polarToCartesian","width","height","TWO_PI","concat","noLoop","min","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"wIAIMA,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IAEjBC,EAAQ,EACRC,EAAQ,EAEZJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,KACnBR,EAAES,WAAWR,EAAK,GAAI,GACtBD,EAAEU,SACFV,EAAEW,UAAUX,EAAEY,YACdZ,EAAEa,aAAa,IAGjBb,EAAEc,KAAO,WACP,IAAMC,EAAQf,EAAEgB,MAAMhB,EAAEiB,WAAa,IAAKd,GAC1CH,EAAEkB,OAAOlB,EAAEmB,IAAInB,EAAEoB,IAAIjB,IAAS,EAAG,EAAGF,EAAKA,EAAM,IAAK,GAAI,GAAIG,GAE5D,IAAK,IAAIiB,EAAI,EAAGA,EAnBH,EAmBeA,IAC1BrB,EAAEsB,KAAFC,MAAAvB,EACKwB,YACDxB,EAAEyB,MAAQ,EACVzB,EAAE0B,OAAS,EACXvB,EAASkB,EAAIrB,EAAE2B,OAxBR,EAyBN3B,EAAE0B,OAAS,EAAKX,GACjB,GANHa,OAAA,CAQC5B,EAAEyB,MAAQ,EACVzB,EAAE0B,OAAS,MAIfvB,GAAS,KAEc,EAAXH,EAAE2B,QACZvB,GAAS,KACD,GAAKJ,EAAE6B,SAEfzB,EAAQJ,EAAE8B,IAAI1B,EAAQ,IAAM,KAKnB2B,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcrC,OAAQA,EAAQsC,KAAMJ,EAASK,SAAUC,YAAY,wCClDrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQ1C,EAAO2C,GACxC,OAAOD,EAASE,KAAKC,IAAI7C,GAAS2C,GAE9BH,EAAoB,SAACE,EAAQ1C,EAAO2C,GACxC,OAAOD,EAASE,KAAKE,IAAI9C,GAAS2C,GAa9BF,EAA0B,SAC9BM,EACAC,EACAhD,EACAiD,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKC,IAAI7C,GAASiD,EAChCI,EAAIL,EAAUJ,KAAKE,IAAI9C,GAASkD,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBhC,IAzBU,SACvB0B,EACAC,EACAhD,EACA2C,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAAS/C,EAAO2C,GACtCU,EAAIb,EAAkBQ,EAAShD,EAAO2C,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-06-27-js-defbb5214e1bf1e59f8e.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const LEAVES = 5;\n  const HUE = p.random(90);\n\n  let angle = 0;\n  let alpha = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.background(HUE, 80, 5);\n    p.noFill();\n    p.blendMode(p.HARD_LIGHT);\n    p.strokeWeight(2);\n  };\n\n  p.draw = function() {\n    const NOISE = p.noise(p.frameCount / 400, angle);\n    p.stroke(p.map(p.tan(angle), -1, 1, HUE, HUE + 10), 80, 75, alpha);\n\n    for (let i = 0; i < LEAVES; i++) {\n      p.line(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          angle + (i * p.TWO_PI) / LEAVES,\n          (p.height / 2) * NOISE,\n          true\n        ),\n        p.width / 2,\n        p.height / 2\n      );\n    }\n\n    angle += 0.01;\n\n    if (angle > p.TWO_PI * 3) {\n      alpha -= 0.01;\n      alpha < 0 && p.noLoop();\n    } else {\n      alpha = p.min(alpha + 0.01, 5);\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}