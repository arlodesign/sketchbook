{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/04.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["noise","OpenSimplexNoise","Date","now","sketch","p","steps","hue","random","alpha","a","i","setup","createCanvas","background","colorMode","HSB","strokeWeight","draw","translate","width","height","stroke","noiseVal","map","noise4D","cos","TWO_PI","frameCount","sin","_polarToCartesian","polarToCartesian","x","y","lerpLine","dist","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"mKAMMA,EAAQ,IAAIC,IAAiBC,KAAKC,OAElCC,EAAS,SAASC,GACtB,IAAIC,EAAQ,IACRC,EAAMF,EAAEG,OAAO,GAAI,KACnBC,EAAQ,EACRC,EAAI,EACJC,EAAI,EAERN,EAAEO,MAAQ,WACRP,EAAEQ,aAAa,IAAK,KACpBR,EAAES,WAAW,IACbT,EAAEU,UAAUV,EAAEW,KACdX,EAAEY,aAAa,IAGjBZ,EAAEa,KAAO,WACPb,EAAEc,UAAUd,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,GACpChB,EAAEiB,OAAOf,EAAK,IAAK,IAAKE,GAExB,IAAMc,EAAWlB,EAAEmB,IACjBxB,EAAMyB,SACHd,EAAI,IAAO,IACXA,EAAI,IAAO,GACZN,EAAEqB,IAAIrB,EAAEsB,QAAUtB,EAAEuB,WAAatB,IACjCD,EAAEwB,IAAIxB,EAAEsB,QAAUtB,EAAEuB,WAAatB,MAElC,EACD,EACA,EACA,GAdgBwB,EAgBDC,YAAiB,EAAG,EAAGrB,EAAGL,EAAEe,MAAQG,GAA7CS,EAhBUF,EAgBVE,EAAGC,EAhBOH,EAgBPG,EAEXC,YAAS7B,EAAG,EAAG,EAAG2B,EAAGC,EAAG,EAAI5B,EAAE8B,KAAK,EAAG,EAAGH,EAAGC,KAE5CvB,GAAKL,EAAEsB,OAASrB,GACRD,EAAEsB,SACRhB,GAAK,IACLF,GAAS,EACTC,EAAI,EACJJ,GAAS,GACTC,GAAO,IACG,GAAGF,EAAE+B,YAKNC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAActC,OAAQA,EAAQuC,KAAMJ,EAASK,SAAUC,YAAY,wCCvDrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK5B,IAAI0B,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKzB,IAAIuB,GAASC,GAa9BH,EAA0B,SAC9BK,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM3B,EAAIuB,EAAUD,KAAK5B,IAAI0B,GAASK,EAChCxB,EAAIuB,EAAUF,KAAKzB,IAAIuB,GAASM,EACtC,OAAOC,EAAU,CAAC3B,EAAGC,GAAK,CAAED,IAAGC,MAIlBF,IAzBU,SACvBwB,EACAC,EACAJ,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAM3B,EAAIgB,EAAkBO,EAASH,EAAOC,GACtCpB,EAAIgB,EAAkBO,EAASJ,EAAOC,GAC5C,OAAOM,EAAU,CAAC3B,EAAGC,GAAK,CAAED,IAAGC,wCCflBI,EAAA,WAAShC,EAAGuD,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChB5D,EAAEG,SAAW2D,GAAK9D,EAAE+D,MAAM/D,EAAEgE,KAAKT,EAAIE,EAAIK,GAAI9D,EAAEgE,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-06-04-js-deeae50a2866482d9c95.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport OpenSimplexNoise from \"open-simplex-noise\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst noise = new OpenSimplexNoise(Date.now());\n\nconst sketch = function(p) {\n  let steps = 300;\n  let hue = p.random(67, 100);\n  let alpha = 5;\n  let a = 0;\n  let i = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(64);\n    p.colorMode(p.HSB);\n    p.strokeWeight(5);\n  };\n\n  p.draw = function() {\n    p.translate(p.width / 2, p.height / 2);\n    p.stroke(hue, 100, 100, alpha);\n\n    const noiseVal = p.map(\n      noise.noise4D(\n        (i + 0.1) / 10,\n        (i + 0.2) / 10,\n        p.cos(p.TWO_PI * (p.frameCount / steps)),\n        p.sin(p.TWO_PI * (p.frameCount / steps))\n      ),\n      -1,\n      1,\n      0,\n      1\n    );\n    const { x, y } = polarToCartesian(0, 0, a, p.width * noiseVal);\n\n    lerpLine(p, 0, 0, x, y, 6 / p.dist(0, 0, x, y));\n\n    a += p.TWO_PI / steps;\n    if (a > p.TWO_PI) {\n      i += 1000;\n      alpha /= 2;\n      a = 0;\n      steps /= 2;\n      hue -= 33;\n      if (hue < 0) p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}