const SIZE=300;let sides,aSpeed,canvasRotationDirection,quadraticVariant,rOpt,gOpt,bOpt,a=0;const colorFunctions=[a=>240*abs(sin(a)),a=>240*abs(cos(a)),a=>240*abs(tan(a)),a=>240*abs(sin(a+PI)),a=>240*abs(cos(a+PI)),a=>240*abs(tan(a+PI)),a=>240*abs(sin(-a)),a=>240*abs(cos(-a)),a=>240*abs(tan(-a)),a=>240*abs(sin(-a+PI)),a=>240*abs(cos(-a+PI)),a=>240*abs(tan(-a+PI)),()=>240,()=>15,()=>128];function setup(){for(pixelDensity(4),createCanvas(660,840).parent("my-canvas"),background(128),sides=floor(random(3,7)),aSpeed=random(.01,.05),canvasRotationDirection=random([-1,1]),quadraticVariant=random(1,2);[...new Set([rOpt,gOpt,bOpt])].length<3;)rOpt=random(colorFunctions),gOpt=random(colorFunctions),bOpt=random(colorFunctions);strokeWeight(.25),noFill(),blendMode(HARD_LIGHT)}function draw(){translate(...Object.values(polarToCartesian(width/2,height/2,a,SIZE))),rotate(canvasRotationDirection*a/sides);const{x:t,y:s}=polarToCartesian(0,0,a,cos(a*sides)*SIZE);stroke(rOpt(a/sides),gOpt(a/sides),bOpt(a/sides)),beginShape(),vertex(...Object.values(polarToCartesian(0,0,0,SIZE*quadraticVariant)));for(let a=1;a<=sides;a++)quadraticVertex(t,s,...Object.values(polarToCartesian(0,0,TWO_PI/sides*a,SIZE*quadraticVariant)));endShape(),(a+=aSpeed/TWO_PI)>TWO_PI*sides&&(noLoop(),drawingComplete=!0)}