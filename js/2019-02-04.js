const MARGIN=100,GAP=30,ITERATIONS=15;let length,y=MARGIN,colors=[],iteration=0;const colorFunctions=[o=>240*abs(sin(o)),o=>240*abs(cos(o)),o=>240*abs(tan(o)),o=>240*abs(sin(-o)),o=>240*abs(cos(-o)),o=>240*abs(tan(-o)),()=>240,()=>15,()=>128];function setup(){for(pixelDensity(4),createCanvas(660,840).parent("my-canvas"),background(127),length=width-2*MARGIN;[...new Set(colors)].length<3;)colors=[random(colorFunctions),random(colorFunctions),random(colorFunctions)];blendMode(OVERLAY),rectMode(CENTER),strokeWeight(2)}function draw(){translate(MARGIN,y);const o=floor(random(GAP)),n=length/o,t=color(...colors.map(o=>o(y*iteration)),127);iteration%2?(noFill(),stroke(t)):(noStroke(),fill(t)),beginShape(),vertex(0,0);for(let t=0;t<o;t++){const o=lerp(n*t,n*(t+1),noise(t,y)),e=GAP*noise(y,t)*random([-1,1]);quadraticVertex(o,e,n*(t+1),0)}vertex(length,0),endShape(),(y+=GAP)>height-MARGIN&&(iteration++,y=MARGIN),iteration===ITERATIONS&&(noLoop(),drawingComplete=!0)}