const colorFunctions=[s=>240*abs(sin(s)),s=>240*abs(cos(s)),s=>240*abs(tan(s)),s=>240*abs(sin(s+HALF_PI)),s=>240*abs(cos(s+HALF_PI)),s=>240*abs(tan(s+HALF_PI)),s=>240*abs(sin(-s)),s=>240*abs(cos(-s)),s=>240*abs(tan(-s)),s=>240*abs(sin(-s+HALF_PI)),s=>240*abs(cos(-s+HALF_PI)),s=>240*abs(tan(-s+HALF_PI))];let grid1,grid2;class Grid{constructor(s){this.cols=ceil(width/(sqrt(3)*s)),this.rows=ceil(height/(3*s/2)),this.radius=s,this.grid=[...Array(this.cols).keys()],this.grid=this.grid.map(s=>[...Array(this.rows).keys()]);let i=sqrt(3)*this.radius,r=this.radius;for(let s=0;s<this.rows;s++){for(let t=0;t<this.cols;t++)this.grid[t][s]=new Hexagon(i,r,this.radius),i+=this.radius*sqrt(3);r+=3*this.radius/2,i=(s+1)%2==0?floor(sqrt(3)*this.radius):floor(this.radius*sqrt(3)/2)}}draw(){for(let s=0;s<this.rows;s++)for(let i=0;i<this.cols;i++)this.grid[i][s].draw()}}class Hexagon{constructor(s,i,r){this.centx=s,this.centy=i,this.radius=r,this.cf=[random(colorFunctions),random(colorFunctions),random(colorFunctions)]}getColor(){return color(this.cf[0](random(TAU)),this.cf[1](random(TAU)),this.cf[2](random(TAU)))}draw(){fill(this.getColor()),noStroke();let s=TWO_PI/6;beginShape();for(let i=PI/6;i<TWO_PI;i+=s){let s=this.centx+cos(i)*this.radius,r=this.centy+sin(i)*this.radius;vertex(s,r)}endShape(CLOSE)}}function setup(){pixelDensity(4),createCanvas(660,840).parent("my-canvas"),background(127),blendMode(DIFFERENCE),translate(-10,-10),grid1=new Grid(10),grid2=new Grid(15),grid3=new Grid(20),grid1.draw(),grid2.draw(),grid3.draw(),drawingComplete=!0}