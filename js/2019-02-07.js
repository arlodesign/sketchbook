let shapes=[];class Shape{constructor(){const t=[t=>max(15,240*abs(sin(t))),t=>max(15,240*abs(sin(t+PI))),t=>max(15,240*abs(cos(-t))),t=>max(15,240*abs(cos(-t+PI)))];this._cf=[random(t),random(t),random(t)],this.points=[...Array(7).keys()].map(t=>new Point)}_clr(){return color(this._cf[0](frameCount/1e3),this._cf[1](frameCount/1e3),this._cf[2](frameCount/1e3))}draw(){fill(this._clr()),beginShape(),vertex(this.points[0].location.x,this.points[0].location.y),this.points.forEach(({location:t},i)=>{0!==i&&(quadraticVertex(width/2,height/2,t.x,t.y),this.points[i].move())}),quadraticVertex(width/2,height/2,this.points[0].location.x,this.points[0].location.y),endShape(CLOSE)}}class Point{constructor(){this._angle=random(TWO_PI),this._dist=random(height/3,height/2),this._speed=random(-.01,.01),this.location=this._getLocation()}_getLocation(){return polarToCartesian(width/2,height/2,this._angle,this._dist)}move(){this._angle+=this._speed,this.location=this._getLocation()}}function setup(){pixelDensity(4),createCanvas(660,840).parent("my-canvas"),shapes=[...Array(5).keys()].map(t=>new Shape),noStroke(),blendMode(HARD_LIGHT)}function draw(){background(0),shapes.forEach((t,i)=>t.draw())}setTimeout(()=>{drawingComplete=!0},5e3);