const GRID=10,POINT_COUNT=10;let points=[],drawMod=GRID;for(;!isPrime(drawMod);)drawMod--;const colorFunctions=[o=>240*abs(sin(o)),o=>240*abs(cos(o)),o=>240*abs(tan(o)),o=>240*abs(sin(o+PI)),o=>240*abs(cos(o+PI)),o=>240*abs(tan(o+PI)),o=>240*abs(sin(-o)),o=>240*abs(cos(-o)),o=>240*abs(tan(-o)),o=>240*abs(sin(-o+PI)),o=>240*abs(cos(-o+PI)),o=>240*abs(tan(-o+PI))];function drawAThing(o,t){const{vector:n,color:r}=getFarthestPoint(o,t);fill(r),noStroke();for(let r=0;r<PI;r+=.05)ellipse(lerp(o,n.x,sin(r)),lerp(t,n.y,sin(r)),3)}function getFarthestPoint(o,t){return points.sort((n,r)=>dist(o,t,n.vector.x,n.vector.y)-dist(o,t,r.vector.x,r.vector.y)),points[POINT_COUNT-1]}function setup(){pixelDensity(4),createCanvas(660,840).parent("my-canvas"),background(128),points=[...Array(POINT_COUNT).keys()].map(o=>({vector:createVector(polarToCartesianX(width/2,noise(o)*TWO_PI,height),polarToCartesianY(height/2,noise(o)*TWO_PI,height)),color:color(random(colorFunctions)(o),random(colorFunctions)(o),random(colorFunctions)(o),32)})),blendMode(OVERLAY)}function draw(){const o=floor(frameCount/(width/GRID)),t=floor(frameCount-width/GRID*o);if(o<height/GRID)for(let n=0;n<GRID;n++)for(let r=0;r<GRID;r++)!(frameCount%drawMod)&&drawAThing(t+width/GRID*n,o+height/GRID*r);else noLoop(),drawingComplete=!0}