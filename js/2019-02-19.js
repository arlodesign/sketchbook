const CF=[a=>240*abs(sin(a)),a=>240*abs(cos(a)),a=>240*abs(tan(a)),a=>240*abs(sin(a+PI)),a=>240*abs(cos(a+PI)),a=>240*abs(tan(a+PI)),a=>240*abs(sin(-a)),a=>240*abs(cos(-a)),a=>240*abs(tan(-a)),a=>240*abs(sin(-a+PI)),a=>240*abs(cos(-a+PI)),a=>240*abs(tan(-a+PI))],Q=2;let r,g,b,distance=0,angle=0,size=10,axis={},a=32,getColor=()=>{};function setup(){for(pixelDensity(4),createCanvas(660,840).parent("my-canvas"),background(192),axis={x:width/2,y:height/2};[...new Set([r,g,b])].length<3;)r=random(CF),g=random(CF),b=random(CF);getColor=(s=>color(r(s),g(s),b(s),a)),blendMode(DIFFERENCE)}function draw(){for(let a=0;a<TWO_PI;a+=TWO_PI/Q){const s=angle+a,{x:e,y:n}=polarToCartesian(axis.x,axis.y,s,distance);noFill(),strokeWeight(map(distance,0,width,1,Q)),stroke(getColor(s/(1.5*Q))),ellipse(e,n,noise(angle/10,distance/10)*size)}angle+=.01,distance+=.01,a=(size+=.05)>width?a-.1:a,axis=polarToCartesian(width/2,height/2,angle/Q,distance*(Q/2)),0===a&&(noLoop(),drawingComplete=!0)}