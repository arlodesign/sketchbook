function lineIntersection(n,r,o,t,a,e,l,i){const u=((l-a)*(r-e)-(i-e)*(n-a))/((i-e)*(o-n)-(l-a)*(t-r)),s=((o-n)*(r-e)-(t-r)*(n-a))/((i-e)*(o-n)-(l-a)*(t-r));return u>=0&&u<=1&&s>=0&&s<=1?{x:n+u*(o-n),y:r+u*(t-r)}:{x:null,y:null}}function polarToCartesianX(n,r,o){return n+cos(r)*o}function polarToCartesianY(n,r,o){return n+sin(r)*o}function polarToCartesian(n,r,o){return{x:polarToCartesianX(...arguments),y:polarToCartesianY(...arguments)}}function shuffle(n){for(let r=n.length-1;r>0;r--){const o=Math.floor(Math.random()*(r+1));[n[r],n[o]]=[n[o],n[r]]}return n}