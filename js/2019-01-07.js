const goldenRatio=1.6180339887,magicNumber=5;let marginH,marginV,vertices,currentPoint,maxDist,pointTestIndex=0;function setup(){pixelDensity(4),createCanvas(660,840).parent("my-canvas"),marginH=(width-width/goldenRatio)/2,marginV=(height-height/goldenRatio)/2,(vertices=Array.from(Array(2500),()=>({vector:createVector(constrain(randomGaussian(width/2,width/goldenRatio/magicNumber),marginH,width-marginH),constrain(randomGaussian(height/2,height/goldenRatio/magicNumber),marginV,height-marginV)),reached:!1})))[0]={vector:createVector(width/2,height/2),reached:!0},vertices.push({vector:createVector(marginH,marginV),reached:!1}),vertices.push({vector:createVector(width-marginH,marginV),reached:!1}),vertices.push({vector:createVector(marginH,height-marginV),reached:!1}),vertices.push({vector:createVector(width-marginH,height-marginV),reached:!1}),maxDist=dist(marginH,marginV,width-marginH,height-marginV),background(255)}function draw(){const e=vertices.filter(e=>e.reached);let t,r,i=maxDist;vertices.forEach((a,c)=>{a.reached||e.forEach(({vector:e})=>{const n=dist(e.x,e.y,a.vector.x,a.vector.y);n<i&&(i=n,r=c,t=e)})}),strokeWeight(map(dist(width/2,height/2,vertices[r].vector.x,vertices[r].vector.y),0,maxDist/2,1,magicNumber)),line(t.x,t.y,vertices[r].vector.x,vertices[r].vector.y),vertices[r].reached=!0,vertices.filter(e=>e.reached).length===vertices.length&&(noLoop(),drawingComplete=!0)}