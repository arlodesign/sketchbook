{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/23.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","cnvs","RENDER","getURLParams","render","lines","Line","this","a","random","TWO_PI","draw","line","width","height","polarToCartesian","animLoop","noise1D","sqrt","setup","pixelDensity","frameRate","createCanvas","createLoop","gif","open","noiseRadius","Array","fill","map","createGraphics","background","forEach","l","x","ceil","y","push","translate","GRID","scale","image","pop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"w+BAKA,IAAMA,EAAS,SAASC,GACtB,IAOIC,EAPEC,EAASF,EAAEG,eAAeC,OAM5BC,EAAQ,GAGNC,EAVmB,WAWvB,aACEC,KAAKC,EAAIR,EAAES,OAAOT,EAAEU,QAZC,mBAevBC,KAAA,WAAQ,IAAD,GACL,EAAAV,GAAKW,KAAL,SACEX,EAAKY,MAAQ,EACbZ,EAAKa,OAAS,GAFhB,SAGKC,YACDd,EAAKY,MAAQ,EACbZ,EAAKa,OAAS,EACdP,KAAKC,EAAIR,EAAEgB,SAASC,QAAQV,KAAKC,GACjCR,EAAEkB,KACCjB,EAAKY,MAAQ,GAAMZ,EAAKY,MAAQ,GAC9BZ,EAAKa,OAAS,GAAMb,EAAKa,OAAS,KAEvC,OA3BiB,KAiCzBd,EAAEmB,MAAQ,WACRnB,EAAEoB,aAAalB,EAAS,EAAI,GAC5BF,EAAEqB,UAhCS,IAiCXrB,EAAEsB,aAAa,IAAK,KACpBtB,EAAEuB,WAnCa,GAmCQ,CACrBC,MAAKtB,GAAS,CAAEE,QAAQ,EAAOqB,MAAM,GACrCC,YAAa,KAGfrB,EAAQsB,MAtCS,KAuCdC,OACAC,KAAI,kBAAM,IAAIvB,KAEjBL,EAAOD,EAAE8B,eAzCE,UA4Cb9B,EAAEW,KAAO,WACaX,EAAEgB,SAAdC,QACRjB,EAAE+B,WAAW,KACb9B,EAAK8B,WAAW,KAChB1B,EAAM2B,SAAQ,SAAAC,GAAC,OAAIA,EAAEtB,UAErB,IAAK,IAAIuB,EAAI,EAAGA,GAAKlC,EAAEmC,KAAKnC,EAAEa,MAlDnB,KAkDkCqB,IAC3C,IAAK,IAAIE,EAAI,EAAGA,GAAKpC,EAAEmC,KAAKnC,EAAEc,OAnDrB,KAmDqCsB,IAC5CpC,EAAEqC,OACFrC,EAAEsC,UArDK,IAqDKJ,EAAWK,KArDhB,IAqD0BH,EAAWG,MAC5CvC,EAAEwC,MAAMN,EAAI,EAAI,GAAK,EAAGE,EAAI,GAAK,EAAI,GACrCpC,EAAEyC,MAAMxC,GAAM,MAAW,MACzBD,EAAE0C,QAMK,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc5C,OAAQA,EAAQ6C,KAAMD,EAASE,SAAUC,YAAY,O,kCCzErE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM1B,EAAIsB,EAAUL,KAAKC,IAAIH,GAASS,EAChCtB,EAAIqB,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAAC1B,EAAGE,GAAK,CAAEF,IAAGE,MAIlBrB,IAzBU,SACvByC,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAM1B,EAAIa,EAAkBS,EAASP,EAAOC,GACtCd,EAAIiB,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAAC1B,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2020-01-23-js-8f6f632c0deed9a315d8.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 20;\n  const RATE = 30;\n  const LINE_COUNT = 100;\n  const GRID = 135;\n\n  let lines = [];\n  let cnvs;\n\n  class Line {\n    constructor() {\n      this.a = p.random(p.TWO_PI);\n    }\n\n    draw() {\n      cnvs.line(\n        cnvs.width / 2,\n        cnvs.height / 2,\n        ...polarToCartesian(\n          cnvs.width / 2,\n          cnvs.height / 2,\n          this.a * p.animLoop.noise1D(this.a),\n          p.sqrt(\n            (cnvs.width / 2) * (cnvs.width / 2) +\n              (cnvs.height / 2) * (cnvs.height / 2)\n          ),\n          true\n        )\n      );\n    }\n  }\n\n  p.setup = function() {\n    p.pixelDensity(RENDER ? 2 : 1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n\n    lines = Array(LINE_COUNT)\n      .fill()\n      .map(() => new Line());\n\n    cnvs = p.createGraphics(GRID, GRID);\n  };\n\n  p.draw = function() {\n    const { noise1D } = p.animLoop;\n    p.background(255);\n    cnvs.background(255);\n    lines.forEach(l => l.draw());\n\n    for (let x = 0; x <= p.ceil(p.width / GRID); x++) {\n      for (let y = 0; y <= p.ceil(p.height / GRID); y++) {\n        p.push();\n        p.translate(x * GRID + GRID / 2, y * GRID + GRID / 2);\n        p.scale(x % 2 ? 1 : -1, y % 2 ? -1 : 1);\n        p.image(cnvs, -GRID / 2, -GRID / 2);\n        p.pop();\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}