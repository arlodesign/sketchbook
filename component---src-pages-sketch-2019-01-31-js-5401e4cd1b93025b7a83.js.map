{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/31.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","r1Speed","r2Speed","r3Speed","r1","r2","r3","setup","createCanvas","background","random","TWO_PI","noFill","stroke","draw","translate","width","height","sin","_polarToCartesian","polarToCartesian","x","y","HANDLE","noLoop","beginShape","vertex","quadraticVertex","endShape","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"sIAIMA,EAAS,SAASC,GACtB,IAGIC,EACAC,EACAC,EALAC,EAAK,EACLC,EAAK,EACLC,EAAK,EAKTN,EAAEO,MAAQ,WACRP,EAAEQ,aAAa,IAAK,KACpBR,EAAES,WAAW,KACbR,EAAWD,EAAEU,OAAO,GAAK,IAAOV,EAAEW,OAAUX,EAAEU,OAAO,EAAE,EAAG,IAC1DR,EAAWF,EAAEU,OAAO,GAAK,IAAOV,EAAEW,OAAUX,EAAEU,OAAO,EAAE,EAAG,IAC1DP,EAAUH,EAAEU,OAAO,IAAM,KAAQV,EAAEW,OACnCX,EAAEY,SACFZ,EAAEa,OAAO,EAAG,EAAG,EAAG,MAGpBb,EAAEc,KAAO,WACPd,EAAEe,UAAUf,EAAEgB,MAAQ,EAAGhB,EAAEiB,OAASjB,EAAEkB,IAAIZ,IADxB,IAAAa,EAEDC,YAAiB,EAAG,EAAGhB,EAAI,KAApCiB,EAFUF,EAEVE,EAAGC,EAFOH,EAEPG,EACLC,EAASH,YAAiBC,EAAGC,EAAGjB,EAAgB,IAAZL,EAAEkB,IAAIZ,IAC5CN,EAAEiB,OAASjB,EAAEkB,IAAIZ,GAAM,GAAKgB,EAAI,GAAKC,EAAOD,EAAI,EAClDtB,EAAEwB,UAGJxB,EAAEyB,aACFzB,EAAE0B,OAAO,EAAG,GACZ1B,EAAE2B,gBAAgBJ,EAAOF,EAAGE,EAAOD,EAAGD,EAAGC,GACzCtB,EAAE4B,WACFxB,GAAMH,EACNI,GAAMH,EACNI,GAAMH,KAIK0B,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcnC,OAAQA,EAAQoC,KAAMJ,EAASK,SAAUC,YAAY,8ECzCrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK5B,IAAI0B,GAASC,GAa9BH,EAA0B,SAC9BM,EACAC,EACAL,EACAM,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM/B,EAAI2B,EAAUF,KAAKC,IAAIH,GAASM,EAChC5B,EAAI2B,EAAUH,KAAK5B,IAAI0B,GAASO,EACtC,OAAOC,EAAU,CAAC/B,EAAGC,GAAK,CAAED,IAAGC,MAIlBF,IAzBU,SACvB4B,EACAC,EACAL,EACAC,EACAO,QACG,IADHA,OAAU,GAEV,IAAM/B,EAAImB,EAAkBQ,EAASJ,EAAOC,GACtCvB,EAAImB,EAAkBQ,EAASL,EAAOC,GAC5C,OAAOO,EAAU,CAAC/B,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-01-31-js-5401e4cd1b93025b7a83.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let r1 = 0;\n  let r2 = 0;\n  let r3 = 0;\n  let r1Speed;\n  let r2Speed;\n  let r3Speed;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    r1Speed = (p.random(0.1, 0.2) / p.TWO_PI) * p.random([-1, 1]);\n    r2Speed = (p.random(0.3, 0.5) / p.TWO_PI) * p.random([-1, 1]);\n    r3Speed = p.random(0.02, 0.03) / p.TWO_PI;\n    p.noFill();\n    p.stroke(0, 0, 0, 128);\n  };\n\n  p.draw = function() {\n    p.translate(p.width / 2, p.height * p.sin(r3));\n    const { x, y } = polarToCartesian(0, 0, r1, 200);\n    const HANDLE = polarToCartesian(x, y, r2, p.sin(r3) * 500);\n    if (p.height * p.sin(r3) < 0 && y < 0 && HANDLE.y < 0) {\n      p.noLoop();\n      return;\n    }\n    p.beginShape();\n    p.vertex(0, 0);\n    p.quadraticVertex(HANDLE.x, HANDLE.y, x, y);\n    p.endShape();\n    r1 += r1Speed;\n    r2 += r2Speed;\n    r3 += r3Speed;\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}