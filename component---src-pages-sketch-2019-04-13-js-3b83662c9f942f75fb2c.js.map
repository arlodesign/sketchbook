{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/13.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","w","h","GRID_SIZE","random","MARGIN","SIZES","grid","Doodad","x","y","size","this","freq","TWO_PI","floor","drawFunc","pinwheel","horizontalLines","verticalLines","draw","push","stroke","fill","square","pop","translate","line","strokeWeight","r","polarToCartesian","start","end","setup","createCanvas","background","width","height","xx","yy","visited","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-04-13-js-3b83662c9f942f75fb2c.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = p.random([60, 30, 15]);\n  const MARGIN = GRID_SIZE / 10;\n  const SIZES = [1, 2, 3, 5, 8, 13];\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size * GRID_SIZE;\n      this.freq = p.TWO_PI / (p.floor(p.random(size * 4, size * 7)) * 2);\n      this.drawFunc = p.random([\n        this.pinwheel,\n        this.horizontalLines,\n        this.verticalLines,\n      ]);\n      this.draw();\n    }\n    draw() {\n      p.push();\n      p.stroke(64);\n      p.fill(p.random(192, 250));\n      p.square(this.x, this.y, this.size);\n      p.pop();\n\n      p.push();\n      p.stroke(255);\n      p.translate(-0.5, -0.5);\n      p.line(this.x, this.y, this.x + this.size, this.y);\n      p.line(this.x, this.y, this.x, this.y + this.size);\n      p.line(\n        this.x + this.size,\n        this.y,\n        this.x + this.size,\n        this.y + this.size\n      );\n      p.line(\n        this.x,\n        this.y + this.size,\n        this.x + this.size,\n        this.y + this.size\n      );\n      p.pop();\n\n      p.push();\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      this.drawFunc();\n      p.pop();\n    }\n    pinwheel() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        p.line(\n          ...polarToCartesian(0, 0, r, (this.size / 2 - MARGIN) / 3, true),\n          ...polarToCartesian(0, 0, r, this.size / 2 - MARGIN, true)\n        );\n      }\n    }\n    horizontalLines() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        const start = polarToCartesian(\n          0,\n          0,\n          r,\n          this.size / 2 - (MARGIN + 2),\n          true\n        );\n        const end = [-start[0], start[1]];\n        p.line(...start, ...end);\n      }\n    }\n    verticalLines() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        const start = polarToCartesian(\n          0,\n          0,\n          r,\n          this.size / 2 - (MARGIN + 2),\n          true\n        );\n        const end = [start[0], -start[1]];\n        p.line(...start, ...end);\n      }\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.stroke(0);\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      p.fill(p.random(0, 128));\n\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    ![].concat(...grid).filter(({ visited }) => !visited).length && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}