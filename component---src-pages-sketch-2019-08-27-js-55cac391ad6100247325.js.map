{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/27.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","wx","wy","HUE","random","setup","frameRate","pixelDensity","createCanvas","WEBGL","noStroke","floor","width","height","createLoop","gif","render","open","noiseRadius","draw","animLoop","noise2D","theta","background","pointLight","polarToCartesian","specularMaterial","plane","x","y","push","colorMode","HSB","map","translate","GRID","sin","dist","rotateX","HALF_PI","shininess","cylinder","pop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"49BAKA,IAAMA,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtB,IACIC,EACAC,EAFEC,EAAMH,EAAEI,OAAO,IAIrBJ,EAAEK,MAAQ,WACRL,EAAEM,UAAU,IAERV,GACFI,EAAEO,aAAa,GAGjBP,EAAEQ,aAAa,IAAK,IAAKR,EAAES,OAC3BT,EAAEU,WAEFT,EAAKD,EAAEW,MAAMX,EAAEY,MAjBN,IAkBTV,EAAKF,EAAEW,MAAMX,EAAEa,OAlBN,IAoBTb,EAAEc,WAAW,GAAI,CACfC,MAAKnB,GAAS,CAAEoB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBlB,EAAEmB,KAAO,WAAY,IAAD,EACSnB,EAAEoB,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MAEjBtB,EAAEuB,WAAW,KACbvB,EAAEwB,WAAF,MAAAxB,EAAC,CACC,IACA,IACA,KAHD,SAIIyB,YAAiB,EAAG,EAAGH,EAAOtB,EAAEY,MAAQ,GAAG,IAJ/C,CAKW,EAAVZ,EAAEY,SAGJZ,EAAE0B,iBAAiB,GACnB1B,EAAE2B,MAAM3B,EAAEY,MAAOZ,EAAEa,QAEnB,IAAK,IAAIe,GAAK3B,EAAK,EAAG2B,EAAI3B,EAAI2B,IAC5B,IAAK,IAAIC,GAAK3B,EAAK,EAAG2B,EAAI3B,EAAI2B,IAC5B7B,EAAE8B,OACF9B,EAAE+B,UAAU/B,EAAEgC,IAAK,GACnBhC,EAAE0B,iBAAiB1B,EAAEiC,IAAIZ,EAAQO,EAAGC,IAAK,EAAG,EAAG1B,EAAKA,EAAM,IAAM,EAAG,GACnEH,EAAEkC,UA9CG,GA+CHN,EAAWO,KA/CR,GAgDHN,EAAWM,KACXA,GAAWnC,EAAEoC,IAAIpC,EAAEqC,KAAKT,EAAGC,EAAG7B,EAAEY,MAAQ,EAAGZ,EAAEa,OAAS,GAAKS,IAE7DtB,EAAEsC,QAAQtC,EAAEuC,SACZvC,EAAEwC,UAAU,IACZxC,EAAEyC,SAASN,GAAUA,KACrBnC,EAAE0C,QAMK,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc5C,OAAQA,EAAQ6C,KAAMD,EAASE,SAAUC,YAAY,O,kCCnErE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKf,IAAIa,GAASC,GAsB9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM/B,EAAI2B,EAAUJ,KAAKC,IAAIH,GAASQ,EAChC5B,EAAI2B,EAAUL,KAAKf,IAAIa,GAASS,EACtC,OAAOC,EAAU,CAAC/B,EAAGC,GAAK,CAAED,IAAGC,MAIlBJ,IAzBU,SACvB8B,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAM/B,EAAImB,EAAkBQ,EAASN,EAAOC,GACtCrB,EAAIwB,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAAC/B,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-08-27-js-55cac391ad6100247325.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && true;\nconst GRID = 45;\n\nconst sketch = function(p) {\n  const HUE = p.random(0.8);\n  let wx;\n  let wy;\n\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840, p.WEBGL);\n    p.noStroke();\n\n    wx = p.floor(p.width / GRID);\n    wy = p.floor(p.height / GRID);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    const { noise2D, theta } = p.animLoop;\n\n    p.background(255);\n    p.pointLight(\n      255,\n      255,\n      255,\n      ...polarToCartesian(0, 0, theta, p.width / 3, true),\n      p.width * 2\n    );\n\n    p.specularMaterial(0);\n    p.plane(p.width, p.height);\n\n    for (let x = -wx / 2; x < wx; x++) {\n      for (let y = -wy / 2; y < wy; y++) {\n        p.push();\n        p.colorMode(p.HSB, 1);\n        p.specularMaterial(p.map(noise2D(x, y), -1, 1, HUE, HUE + 0.2), 1, 1);\n        p.translate(\n          x * GRID - GRID / 2,\n          y * GRID - GRID / 2,\n          GRID * 2 * p.sin(p.dist(x, y, p.width / 2, p.height / 2) + theta)\n        );\n        p.rotateX(p.HALF_PI);\n        p.shininess(20);\n        p.cylinder(GRID / 3, GRID * 10);\n        p.pop();\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}