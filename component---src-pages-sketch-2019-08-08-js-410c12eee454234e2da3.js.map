{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/08.js"],"names":["RENDER","process","DEV","sketch","p","SIZES","grid","boxes","Box","x","y","size","this","direction","random","canvasSize","canvas","createGraphics","draw","noise","map","animLoop","noise2D","cos","theta","TWO_PI","blendMode","BLEND","background","SCREEN","push","noStroke","forEach","c","i","translate","noiseX","noiseY","sin","fill","circle","pop","image","setup","pixelDensity","frameRate","createCanvas","w","floor","width","h","height","createLoop","gif","render","open","noiseRadius","visited","concat","filter","length","Math","max","overlap","xx","yy","s","b","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-08-08-js-410c12eee454234e2da3.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const SIZES = [1, 2, 3, 5, 8];\n  const GRID_SIZE = 60;\n\n  let grid = [];\n  let boxes = [];\n\n  class Box {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size;\n      this.direction = p.random([-1, 1]);\n      this.canvasSize = GRID_SIZE * size;\n      this.canvas = p.createGraphics(this.canvasSize, this.canvasSize);\n    }\n\n    draw() {\n      const { x, y, size, direction, canvas, canvasSize } = this;\n      const noise = p.map(p.animLoop.noise2D(x, y), -1, 1, 0, 1);\n      const offset = p.map(p.cos(p.animLoop.theta), -1, 1, 0, p.TWO_PI * noise);\n\n      canvas.blendMode(p.BLEND);\n      canvas.background(0);\n      canvas.blendMode(p.SCREEN);\n      canvas.push();\n      canvas.noStroke();\n\n      [\"red\", \"green\", \"blue\"].forEach((c, i) => {\n        canvas.push();\n        canvas.translate(canvasSize / 2, canvasSize / 2);\n        const noiseX = p.animLoop.noise2D(p.cos(p.animLoop.theta * (i + 1)), x);\n        const noiseY = p.animLoop.noise2D(p.sin(p.animLoop.theta * (i + 1)), y);\n        canvas.translate(\n          canvasSize * p.map(p.cos(p.animLoop.theta), -1, 1, 0, noiseX),\n          canvasSize * p.map(p.cos(p.animLoop.theta), -1, 1, 0, noiseY)\n        );\n        canvas.fill(c);\n        for (let i = 0; i <= canvasSize; i += canvasSize / size) {\n          canvas.circle(0, 0, canvasSize / 2);\n        }\n        canvas.pop();\n      });\n      canvas.pop();\n\n      p.image(canvas, x, y);\n    }\n  }\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    const w = p.floor(p.width / GRID_SIZE);\n    const h = p.floor(p.height / GRID_SIZE);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n\n    for (let x = 0; x < p.width / GRID_SIZE; x++) {\n      grid.push([]);\n      for (let y = 0; y < p.height / GRID_SIZE; y++) {\n        grid[x].push({\n          x,\n          y,\n          visited: false,\n        });\n      }\n    }\n\n    while ([].concat(...grid).filter(({ visited }) => !visited).length) {\n      const { x, y } = p.random(\n        [].concat(...grid).filter(({ visited }) => !visited)\n      );\n\n      if (!grid[x][y].visited) {\n        let size = Math.max(...SIZES);\n        let overlap;\n\n        do {\n          overlap = false;\n          for (let xx = x; xx < size + x; xx++) {\n            for (let yy = y; yy < size + y; yy++) {\n              if (x + size > w || y + size > h || grid[xx][yy].visited) {\n                overlap = true;\n              }\n            }\n          }\n          if (overlap) {\n            size = Math.max(...SIZES.filter(s => s < size));\n          }\n        } while (overlap);\n\n        boxes.push(new Box(x, y, size));\n\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            grid[xx][yy].visited = true;\n          }\n        }\n      }\n    }\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    boxes.forEach(b => b.draw());\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}