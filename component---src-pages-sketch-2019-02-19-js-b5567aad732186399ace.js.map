{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/19.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","r","g","b","CF","angle","abs","sin","cos","tan","PI","distance","size","axis","a","getColor","setup","createCanvas","background","x","width","y","height","Array","from","Set","length","random","color","blendMode","DIFFERENCE","draw","i","TWO_PI","thisAngle","_polarToCartesian","polarToCartesian","noFill","strokeWeight","map","stroke","ellipse","noise","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_6__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_8__","path","pathname","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","Math","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-02-19-js-b5567aad732186399ace.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const CF = [\n    angle => p.abs(p.sin(angle)) * 240,\n    angle => p.abs(p.cos(angle)) * 240,\n    angle => p.abs(p.tan(angle)) * 240,\n    angle => p.abs(p.sin(angle + p.PI)) * 240,\n    angle => p.abs(p.cos(angle + p.PI)) * 240,\n    angle => p.abs(p.tan(angle + p.PI)) * 240,\n    angle => p.abs(p.sin(-angle)) * 240,\n    angle => p.abs(p.cos(-angle)) * 240,\n    angle => p.abs(p.tan(-angle)) * 240,\n    angle => p.abs(p.sin(-angle + p.PI)) * 240,\n    angle => p.abs(p.cos(-angle + p.PI)) * 240,\n    angle => p.abs(p.tan(-angle + p.PI)) * 240,\n  ];\n  const Q = 2;\n  let distance = 0;\n  let angle = 0;\n  let size = 10;\n  let axis = {};\n  let r;\n  let g;\n  let b;\n  let a = 32;\n  let getColor = () => {};\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(192);\n    axis = {\n      x: p.width / 2,\n      y: p.height / 2,\n    };\n    while (Array.from(new Set([r, g, b])).length < 3) {\n      r = p.random(CF);\n      g = p.random(CF);\n      b = p.random(CF);\n    }\n    getColor = angle => p.color(r(angle), g(angle), b(angle), a);\n    p.blendMode(p.DIFFERENCE);\n  };\n\n  p.draw = function() {\n    for (let i = 0; i < p.TWO_PI; i += p.TWO_PI / Q) {\n      const thisAngle = angle + i;\n      const { x, y } = polarToCartesian(axis.x, axis.y, thisAngle, distance);\n      p.noFill();\n      p.strokeWeight(p.map(distance, 0, p.width, 1, Q));\n      p.stroke(getColor(thisAngle / (Q * 1.5)));\n      p.ellipse(x, y, p.noise(angle / 10, distance / 10) * size);\n    }\n    angle += 0.01;\n    distance += 0.01;\n    size += 0.05;\n    a = size > p.width ? a - 0.1 : a;\n    axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      angle / Q,\n      distance * (Q / 2)\n    );\n    if (a === 0) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}