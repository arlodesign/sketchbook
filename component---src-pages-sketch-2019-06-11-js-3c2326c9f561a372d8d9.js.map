{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/11.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","points","setup","createCanvas","background","stroke","strokeWeight","noFill","initPoints","Array","from","a","random","TWO_PI","d","width","angle","concat","map","draw","curve","polarToCartesian","height","frameCount","length","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","Math","cos","y","sin","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"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","file":"component---src-pages-sketch-2019-06-11-js-3c2326c9f561a372d8d9.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const STEPS = 5;\n\n  let points = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.stroke(255);\n    p.strokeWeight(5);\n    p.noFill();\n\n    const initPoints = Array.from(Array(4), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.width / 4, p.width * 0.45),\n    }));\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      points = points.concat(\n        initPoints.map(({ a, d }) => ({ a: a + angle, d }))\n      );\n    }\n  };\n\n  p.draw = function() {\n    p.curve(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[p.frameCount].a,\n        points[p.frameCount].d,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[p.frameCount + 1].a,\n        points[p.frameCount + 1].d,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[p.frameCount + 2].a,\n        points[p.frameCount + 2].d,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[p.frameCount + 3].a,\n        points[p.frameCount + 3].d,\n        true\n      )\n    );\n    if (p.frameCount === points.length - 4) {\n      p.curve(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 1].a,\n          points[p.frameCount + 1].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 2].a,\n          points[p.frameCount + 2].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 3].a,\n          points[p.frameCount + 3].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[0].a,\n          points[0].d,\n          true\n        )\n      );\n      p.curve(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 2].a,\n          points[p.frameCount + 2].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 3].a,\n          points[p.frameCount + 3].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[0].a,\n          points[0].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[1].a,\n          points[1].d,\n          true\n        )\n      );\n      p.curve(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 3].a,\n          points[p.frameCount + 3].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[0].a,\n          points[0].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[1].a,\n          points[1].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[2].a,\n          points[2].d,\n          true\n        )\n      );\n      p.curve(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[0].a,\n          points[0].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[1].a,\n          points[1].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[2].a,\n          points[2].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[3].a,\n          points[3].d,\n          true\n        )\n      );\n      p.noLoop();\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n    <p>Reload page for a different variation.</p>\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}