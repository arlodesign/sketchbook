{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/04/11.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","lines","radius","rotations","setup","createCanvas","background","width","floor","random","stroke","draw","map","frameCount","push","translate","height","r","PI","start","end","strokeWeight","rotate","HALF_PI","i","line","TWO_PI","pop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,q5BCpBjC,IAAME,EAAS,SAASC,GACtB,IAAIC,EACAC,EACAC,EAEJH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBL,EAAEM,WAAW,KACbJ,EAASF,EAAEO,MAAQ,EAAc,IAAVP,EAAEO,MACzBJ,EAAYH,EAAEQ,MAAMR,EAAES,OAAO,EAAG,IAChCT,EAAEU,OAAO,IAAK,MAGhBV,EAAEW,KAAO,WACPV,EAAQD,EAAEY,IAAIZ,EAAEX,IAAIW,EAAEa,WAAa,MAAQ,EAAG,EAAG,EAAG,IACpDb,EAAEM,WAAW,GAEbN,EAAEc,OACFd,EAAEe,UAAUf,EAAEO,MAAQ,EAAGP,EAAEgB,OAAS,GAEpC,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAEkB,GAAID,GAAKjB,EAAEkB,GAAKjB,EAAO,CAC3C,IAAMkB,EAAQrB,YAAiB,EAAG,EAAGmB,EAAGf,GAAQ,GAC1CkB,EAAM,EAAED,EAAM,GAAIA,EAAM,IAE9BnB,EAAEqB,aAAarB,EAAEY,IAAIO,EAAM,GAAI,EAAGjB,EAAQ,EAAG,GAAG,IAChDF,EAAEsB,OAAOtB,EAAEuB,QAAUtB,GAErB,IAAK,IAAIuB,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7BxB,EAAEyB,KAAF,MAAAzB,EAAC,EAASmB,GAAT,OAAmBC,IACpBpB,EAAEsB,OAAOtB,EAAE0B,OAASvB,GAIxBH,EAAE2B,QAIS,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc7B,OAAQA,EAAQ8B,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-04-11-js-33b00f94ab5ff9e98142.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let lines;\n  let radius;\n  let rotations;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    radius = p.width / 2 - p.width * 0.05;\n    rotations = p.floor(p.random(3, 6));\n    p.stroke(255, 128);\n  };\n\n  p.draw = function() {\n    lines = p.map(p.sin(p.frameCount / 1000), -1, 1, 3, 50);\n    p.background(0);\n\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n\n    for (let r = 0; r < p.PI; r += p.PI / lines) {\n      const start = polarToCartesian(0, 0, r, radius, true);\n      const end = [-start[0], start[1]];\n\n      p.strokeWeight(p.map(start[1], 0, radius, 0, 5, true));\n      p.rotate(p.HALF_PI / lines);\n\n      for (let i = 0; i < rotations; i++) {\n        p.line(...start, ...end);\n        p.rotate(p.TWO_PI / rotations);\n      }\n    }\n\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}