{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/08/28.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","wx","wy","HUE","random","setup","frameRate","pixelDensity","createCanvas","WEBGL","colorMode","HSB","floor","width","height","createLoop","gif","render","open","noiseRadius","draw","animLoop","noise2D","theta","background","pointLight","push","specularMaterial","map","translate","GRID","dist","rotateX","HALF_PI","rotateY","rotateZ","box","pop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,kCCxBjC,mEAKME,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtB,IACIC,EACAC,EAFEC,EAAMH,EAAEI,OAAO,IAIrBJ,EAAEK,MAAQ,WACRL,EAAEM,UAAU,IACZN,EAAEO,aAAa,GACfP,EAAEQ,aAAa,IAAK,IAAKR,EAAES,OAC3BT,EAAEU,UAAUV,EAAEW,IAAK,GAEnBV,EAAKD,EAAEY,MAAMZ,EAAEa,MAbN,IAcTX,EAAKF,EAAEY,MAAMZ,EAAEc,OAdN,IAgBTd,EAAEe,WAAW,GAAI,CACfC,MAAKpB,GAAS,CAAEqB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBnB,EAAEoB,KAAO,WAAY,IAAD,EACSpB,EAAEqB,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MAEjBvB,EAAEwB,WAAWrB,EAAK,GAAK,IACvBH,EAAEyB,WAAW,EAAG,EAAG,EAAG,EAAG,EAAc,GAAVzB,EAAEa,OAE/B,IAAK,IAAIpB,GAAKQ,EAAK,EAAGR,EAAIQ,EAAIR,IAC5B,IAAK,IAAIC,GAAKQ,EAAK,EAAGR,EAAIQ,EAAIR,IAC5BM,EAAE0B,OACF1B,EAAE2B,iBACA3B,EAAE4B,IAAIN,EAAQ7B,EAAGC,IAAK,EAAG,EAAGS,EAAM,GAAKA,EAAM,IAC7C,GACA,IAEFH,EAAE6B,UApCG,GAqCHpC,EAAWqC,GArCR,GAsCHpC,EAAWoC,GACXA,IAAW9B,EAAEd,IAAIc,EAAE+B,KAAKtC,EAAGC,EAAGM,EAAEa,MAAQ,EAAG,GAAKU,IAElDvB,EAAE6B,UACA,EACA,EACAC,IAAW9B,EAAEhB,IAAIgB,EAAE+B,KAAKtC,EAAGC,EAAG,EAAGM,EAAEc,OAAS,GAAKS,IAEnDvB,EAAEgC,QAAQhC,EAAEiC,SACZjC,EAAEkC,QAAQX,GACVvB,EAAEmC,SAASZ,GACXvB,EAAEoC,IAjDG,UAkDLpC,EAAEqC,QAMK,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcvC,OAAQA,EAAQwC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-08-28-js-844db77a8a3f11e0e850.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst GRID = 30;\n\nconst sketch = function(p) {\n  const HUE = p.random(0.9);\n  let wx;\n  let wy;\n\n  p.setup = function() {\n    p.frameRate(30);\n    p.pixelDensity(1);\n    p.createCanvas(660, 840, p.WEBGL);\n    p.colorMode(p.HSB, 1);\n\n    wx = p.floor(p.width / GRID);\n    wy = p.floor(p.height / GRID);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { noise2D, theta } = p.animLoop;\n\n    p.background(HUE, 0.5, 0.5);\n    p.pointLight(0, 0, 1, 0, 0, -p.width * 3);\n\n    for (let x = -wx / 2; x < wx; x++) {\n      for (let y = -wy / 2; y < wy; y++) {\n        p.push();\n        p.specularMaterial(\n          p.map(noise2D(x, y), -1, 1, HUE - 0.1, HUE + 0.1),\n          0.5,\n          0.8\n        );\n        p.translate(\n          x * GRID - GRID / 2,\n          y * GRID - GRID / 2,\n          GRID * 5 * p.sin(p.dist(x, y, p.width / 2, 0) + theta)\n        );\n        p.translate(\n          0,\n          0,\n          GRID * 5 * p.cos(p.dist(x, y, 0, p.height / 2) + theta)\n        );\n        p.rotateX(p.HALF_PI);\n        p.rotateY(theta);\n        p.rotateZ(-theta);\n        p.box(GRID, GRID, GRID);\n        p.pop();\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}