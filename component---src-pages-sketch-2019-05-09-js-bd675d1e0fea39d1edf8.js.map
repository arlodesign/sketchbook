{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/09.js","webpack:///./src/lib/alternate.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","HUE","random","RAND","i","y","setup","createCanvas","blendMode","HARD_LIGHT","colorMode","HSB","background","draw","MIDPOINT","map","sin","frameCount","width","NOISE","noise","DIST","strokeWeight","stroke","alternate","lerpLine","height","noLoop","location","path","pathname","description","functionA","functionB","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"oKAKMA,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IACfC,EAAOH,EAAEE,OAAO,GAAI,IAEtBE,EAAI,EACJC,EAAI,EAERL,EAAEM,MAAQ,WACRN,EAAEO,aAAa,IAAK,KACpBP,EAAEQ,UAAUR,EAAES,YACdT,EAAEU,UAAUV,EAAEW,IAAK,KACnBX,EAAEY,WAXe,EAWJX,EAAkB,GAAI,KAGrCD,EAAEa,KAAO,WACP,IAAMC,EAAWd,EAAEe,IACjBf,EAAEgB,IAAIhB,EAAEiB,WAAa,MACpB,EACD,EACU,KAAVjB,EAAEkB,MACQ,KAAVlB,EAAEkB,OAEEC,EACJnB,EAAEoB,MAAMpB,EAAEiB,YAAcb,EAAI,KAAQC,GAAKD,EAAI,OAAWA,EAAI,KACxDiB,EAAOrB,EAAEe,IACbf,EAAEoB,MAAMpB,EAAEiB,YAAcd,EAAOC,GAAIC,EAAI,KACvC,EACA,EACA,EACAL,EAAEkB,OAASd,EAAI,EAAI,KACnB,GAGFJ,EAAEsB,aAAalB,EAAI,GACnBJ,EAAEuB,OAAOtB,EAAMG,EAAI,GAAoBA,EAAG,GAAI,IAE9CoB,YACExB,EAAEiB,YACF,kBAAMQ,YAASzB,EAAGc,EAAUT,EAAGgB,EAAMhB,EAAGc,MACxC,kBAAMM,YAASzB,EAAGc,EAAUT,EAAGL,EAAEkB,MAAQG,EAAMhB,EAAGc,OAGpDd,GAAKD,GACGJ,EAAE0B,SAERrB,EAAI,IADJD,EA5Ce,GA8CGJ,EAAE2B,YAKX,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc7B,OAAQA,EAAQ8B,KAAMD,EAASE,SAAUC,YAAY,O,kCC1DtD,SAASP,EAAUP,EAAYe,EAAWC,GACnDhB,EAAa,GACfe,IACAC,MAEAA,IACAD,KANJ,mC,oCCAe,aAAShC,EAAGkC,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChBvC,EAAEE,SAAWuC,GAAKzC,EAAE0C,MAAM1C,EAAE2C,KAAKT,EAAIE,EAAIK,GAAIzC,EAAE2C,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-05-09-js-bd675d1e0fea39d1edf8.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport lerpLine from \"~lib/lerpLine\";\nimport alternate from \"~lib/alternate\";\n\nconst sketch = function(p) {\n  const ITERATIONS = 4;\n  const HUE = p.random(100 / ITERATIONS);\n  const RAND = p.random(30, 50);\n\n  let i = 1;\n  let y = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.blendMode(p.HARD_LIGHT);\n    p.colorMode(p.HSB, 100);\n    p.background(HUE * ITERATIONS, 10, 100 / ITERATIONS);\n  };\n\n  p.draw = function() {\n    const MIDPOINT = p.map(\n      p.sin(p.frameCount / 100),\n      -1,\n      1,\n      p.width * 0.333,\n      p.width * 0.666\n    );\n    const NOISE =\n      p.noise(p.frameCount * (i / 10000), y * (i / 10000)) * (i / 250);\n    const DIST = p.map(\n      p.noise(p.frameCount / (RAND * i), y / 500),\n      0,\n      1,\n      0,\n      p.width / (i / 2 + 0.5),\n      true\n    );\n\n    p.strokeWeight(i + 1);\n    p.stroke(HUE * i, (100 / ITERATIONS) * i, 75, 10);\n\n    alternate(\n      p.frameCount,\n      () => lerpLine(p, MIDPOINT, y, DIST, y, NOISE),\n      () => lerpLine(p, MIDPOINT, y, p.width - DIST, y, NOISE)\n    );\n\n    y += i;\n    if (y > p.height) {\n      i++;\n      y = 0;\n      i > ITERATIONS && p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","export default function alternate(frameCount, functionA, functionB) {\n  if (frameCount % 2) {\n    functionA();\n    functionB();\n  } else {\n    functionB();\n    functionA();\n  }\n}\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}