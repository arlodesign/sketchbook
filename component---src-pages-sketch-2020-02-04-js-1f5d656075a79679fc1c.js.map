{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/04.js"],"names":["sketch","w","h","p","margin","totalHeight","RENDER","getURLParams","render","COLORS","shuffle","setup","pixelDensity","frameRate","min","windowWidth","floor","windowHeight","createCanvas","noSmooth","strokeCap","SQUARE","background","createLoop","gif","open","noiseRadius","rectMode","CORNERS","width","height","draw","animLoop","theta","noise2D","blendMode","BLEND","MULTIPLY","x","i","stroke","gap","map","sin","TWO_PI","y","line","location","path","pathname","description"],"mappings":"+FAAA,gGAIMA,EAAS,SAACC,EAAGC,GAAJ,OACb,SAASC,GACP,IAMIC,EACAC,EAPEC,EAASH,EAAEI,eAAeC,OAI1BC,EAASN,EAAEO,QAAQ,CAAC,OAAQ,UAAW,WAK7CP,EAAEQ,MAAQ,WACRR,EAAES,aAAa,GACfT,EAAEU,UATS,IAWXZ,EAAIA,GAAKE,EAAEW,IAAIX,EAAEY,YAAa,MAC9Bb,EAAIA,GAAKC,EAAEa,MAAMf,GAAKE,EAAEc,aAAed,EAAEY,cAEzCZ,EAAEe,aAAajB,EAAGC,GAClBC,EAAEgB,WACFhB,EAAEiB,UAAUjB,EAAEkB,QACdlB,EAAEmB,WAAW,KACbnB,EAAEoB,WAnBa,GAmBQ,CACrBC,MAAKlB,GAAS,CAAEE,QAAQ,EAAOiB,MAAM,GACrCC,YAAa,KAEfvB,EAAEwB,SAASxB,EAAEyB,SACbxB,EAASD,EAAEa,MAAMb,EAAE0B,MAAQ,IAC3BxB,EAAcF,EAAE2B,OAAkB,EAAT1B,GAG3BD,EAAE4B,KAAO,WAAY,IAAD,EACS5B,EAAE6B,SAArBC,EADU,EACVA,MAAOC,EADG,EACHA,QACf/B,EAAEgC,UAAUhC,EAAEiC,OACdjC,EAAEmB,WAAW,KACbnB,EAAEgC,UAAUhC,EAAEkC,UAEd,IAAK,IAAIC,EAAIlC,EAAQkC,GAAKnC,EAAE0B,MAAQzB,EAAQkC,IAC1C,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BpC,EAAEqC,OAAO/B,EAAO8B,IAChB,IAAME,EAAMtC,EAAEuC,IACZvC,EAAEwC,IACAV,GAASM,EAAI,GACXpC,EAAEuC,IAAIJ,EAAGlC,EAAQD,EAAE0B,MAAQzB,EAAQ,EAAGD,EAAEyC,QACxCL,IAEH,EACD,EACAlC,EAAc,EACdA,GAEIwC,EAAI1C,EAAEuC,IACVR,EAAQI,EAAGC,IACV,EACD,EACAnC,EACAA,EAASC,EAAcoC,GAGzBtC,EAAE2C,KAAKR,EAAGlC,EAAQkC,EAAI,EAAGO,GACzB1C,EAAE2C,KAAKR,EAAGO,EAAIJ,EAAKH,EAAI,EAAGnC,EAAE2B,OAAS1B,OAMhC,0BAAG2C,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACE/C,OAAQA,EAAO,IAAK,KACpBgD,KAAMD,EAASE,SACfC,YAAY","file":"component---src-pages-sketch-2020-02-04-js-1f5d656075a79679fc1c.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\n\nconst sketch = (w, h) =>\n  function(p) {\n    const RENDER = p.getURLParams().render;\n    const DURATION = 20;\n    const RATE = 30;\n\n    const COLORS = p.shuffle([\"cyan\", \"magenta\", \"yellow\"]);\n\n    let margin;\n    let totalHeight;\n\n    p.setup = function() {\n      p.pixelDensity(1);\n      p.frameRate(RATE);\n\n      w = w || p.min(p.windowWidth, 1280);\n      h = h || p.floor(w * (p.windowHeight / p.windowWidth));\n\n      p.createCanvas(w, h);\n      p.noSmooth();\n      p.strokeCap(p.SQUARE);\n      p.background(255);\n      p.createLoop(DURATION, {\n        gif: RENDER ? { render: false, open: true } : false,\n        noiseRadius: 0.1,\n      });\n      p.rectMode(p.CORNERS);\n      margin = p.floor(p.width / 30);\n      totalHeight = p.height - margin * 2;\n    };\n\n    p.draw = function() {\n      const { theta, noise2D } = p.animLoop;\n      p.blendMode(p.BLEND);\n      p.background(255);\n      p.blendMode(p.MULTIPLY);\n\n      for (let x = margin; x <= p.width - margin; x++) {\n        for (let i = 0; i < 3; i++) {\n          p.stroke(COLORS[i]);\n          const gap = p.map(\n            p.sin(\n              theta * (i + 1) +\n                p.map(x, margin, p.width - margin, 0, p.TWO_PI) +\n                i\n            ),\n            -1,\n            1,\n            totalHeight / 4,\n            totalHeight\n          );\n          const y = p.map(\n            noise2D(x, i),\n            -1,\n            1,\n            margin,\n            margin + totalHeight - gap\n          );\n\n          p.line(x, margin, x + 1, y);\n          p.line(x, y + gap, x + 1, p.height - margin);\n        }\n      }\n    };\n  };\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch(660, 840)}\n    path={location.pathname}\n    description=\"\"\n  />\n);\n\nexport { sketch };\n"],"sourceRoot":""}