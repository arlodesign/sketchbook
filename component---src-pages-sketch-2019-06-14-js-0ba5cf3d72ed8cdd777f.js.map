{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/14.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","points","setup","createCanvas","stroke","strokeWeight","strokeJoin","BEVEL","fill","colorMode","HSB","initPoints","Array","from","a","random","TWO_PI","d","width","aSpeed","concat","map","pt","Object","assign","draw","background","beginShape","forEach","i","vertex","height","endShape","CLOSE","push","blendMode","SCREEN","frameCount","rect","pop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,0gBCXjC,IAAME,EAAS,SAASC,GACtB,IAEIC,EAAS,GAEbD,EAAEE,MAAQ,WACRF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,OAAO,KACTJ,EAAEK,aAAa,IACfL,EAAEM,WAAWN,EAAEO,OACfP,EAAEQ,KAAK,GACPR,EAAES,UAAUT,EAAEU,IAAK,KAQnB,IANA,IAAMC,EAAaC,MAAMC,KAAKD,MAAM,IAAI,iBAAO,CAC7CE,EAAGd,EAAEe,OAAOf,EAAEgB,QACdC,EAAGjB,EAAEe,OAAOf,EAAEkB,MAAQ,GAAIlB,EAAEkB,MAAQ,GACpCC,OAAQnB,EAAEe,OAAO,KAAQf,EAAEe,OAAO,EAAE,EAAG,QAXtB,WAcV/B,GACPiB,EAASA,EAAOmB,OACdT,EAAWU,KAAI,SAAAC,GAAE,OAAIC,OAAOC,OAAO,GAAIF,EAAI,CAAER,EAAGQ,EAAGR,EAAI9B,SAFlDA,EAAQ,EAAGA,EAAQgB,EAAEgB,OAAQhC,GAASgB,EAAEgB,OAlBrC,EAkBsD,EAAzDhC,IAOXgB,EAAEyB,KAAO,WACPzB,EAAE0B,WAAW,KAEb1B,EAAE2B,aAEF1B,EAAO2B,SAAQ,WAAmBC,GAAO,IAAvBf,EAAsB,EAAtBA,EAAGG,EAAmB,EAAnBA,EAAGE,EAAgB,EAAhBA,OACtBnB,EAAE8B,OAAF,MAAA9B,EAAC,EAAWF,YAAiBE,EAAEkB,MAAQ,EAAGlB,EAAE+B,OAAS,EAAGjB,EAAGG,GAAG,KAC9DhB,EAAO4B,GAAGf,GAAKK,KAGjBnB,EAAEgC,SAAShC,EAAEiC,OAEbjC,EAAEkC,OACFlC,EAAEmC,UAAUnC,EAAEoC,QACdpC,EAAEQ,KAAKR,EAAEqB,IAAIrB,EAAEX,IAAIW,EAAEqC,WAAa,MAAO,EAAG,EAAG,EAAG,KAAM,IAAK,KAC7DrC,EAAEsC,KAAK,EAAG,EAAGtC,EAAEkB,MAAOlB,EAAE+B,QACxB/B,EAAEuC,QAIS,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAczC,OAAQA,EAAQ0C,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-06-14-js-0ba5cf3d72ed8cdd777f.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const STEPS = 3;\n\n  let points = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.stroke(255);\n    p.strokeWeight(10);\n    p.strokeJoin(p.BEVEL);\n    p.fill(0);\n    p.colorMode(p.HSB, 100);\n\n    const initPoints = Array.from(Array(5), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.width / 10, p.width / 2),\n      aSpeed: p.random(0.01) * p.random([-1, 1]),\n    }));\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      points = points.concat(\n        initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\n      );\n    }\n  };\n\n  p.draw = function() {\n    p.background(255);\n\n    p.beginShape();\n\n    points.forEach(({ a, d, aSpeed }, i) => {\n      p.vertex(...polarToCartesian(p.width / 2, p.height / 2, a, d, true));\n      points[i].a += aSpeed;\n    });\n\n    p.endShape(p.CLOSE);\n\n    p.push();\n    p.blendMode(p.SCREEN);\n    p.fill(p.map(p.sin(p.frameCount / 500), -1, 1, 0, 100), 100, 100);\n    p.rect(0, 0, p.width, p.height);\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}