{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/28.js","webpack:///./node_modules/core-js/modules/es6.reflect.construct.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","HUES","angle","ad","Circle","x","y","z","size","this","hue","draw","stroke","a","TWO_PI","point","polarToCartesian","randomGaussian","setup","createCanvas","colorMode","HSB","background","blendMode","HARD_LIGHT","noFill","width","height","map","tan","floor","noLoop","location","path","pathname","description","$export","create","aFunction","anObject","isObject","fails","bind","rConstruct","Reflect","construct","NEW_TARGET_BUG","F","ARGS_BUG","S","Target","args","newTarget","arguments","length","$args","push","apply","proto","prototype","instance","Object","result","Function","call","polarToCartesianX","center","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-03-28-js-0f41eb39af861c434c13.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const DEPTH = 5;\n  const HUE = p.random(0, 33);\n  const HUES = [HUE, HUE + 33, HUE + 66];\n\n  let angle = 0;\n  let ad = p.random(DEPTH);\n\n  class Circle {\n    constructor(x, y, z, size) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.size = size;\n      this.hue = p.random(HUES);\n    }\n\n    draw() {\n      p.stroke(this.hue, 50, 100, 5);\n\n      for (let a = 0; a < p.TWO_PI; a += 0.001 / p.TWO_PI) {\n        p.point(\n          ...polarToCartesian(\n            p.randomGaussian(this.x, this.z),\n            p.randomGaussian(this.y, this.z),\n            a,\n            p.randomGaussian(this.size, this.size / 2),\n            true\n          )\n        );\n      }\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.background(p.random(HUES), 100, 25);\n    p.blendMode(p.HARD_LIGHT);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    const c = new Circle(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        angle,\n        p.map(p.tan(angle / ad), -1, 1, p.width / 5, 0),\n        true\n      ),\n      p.floor(p.random([1, DEPTH, p.random(DEPTH)])),\n      p.randomGaussian(DEPTH, p.width / (DEPTH * 10))\n    );\n    c.draw();\n    angle += 1 / p.TWO_PI;\n    angle > p.TWO_PI * 2 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Refresh page for a different color variation.\"\n  />\n);\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}