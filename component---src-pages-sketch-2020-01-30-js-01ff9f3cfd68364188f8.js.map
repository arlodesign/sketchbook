{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/30.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","RENDER","getURLParams","render","MULTIPLIERS","floor","random","HUE","setup","frameRate","createCanvas","background","colorMode","HSL","createLoop","gif","open","noiseRadius","rectMode","CENTER","noStroke","fill","square","width","height","blendMode","OVERLAY","draw","animLoop","theta","noise","noise1D","polarToCartesian","x","y","translate","stroke","map","abs","line","constrain","frameCount","console","info","DURATION","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"s+BAKA,IAAMA,EAAS,SAASC,GACtB,IAAMC,EAASD,EAAEE,eAAeC,OAG1BC,EAAc,CAACJ,EAAEK,MAAML,EAAEM,OAAO,EAAG,IAAKN,EAAEK,MAAML,EAAEM,OAAO,EAAG,KAC5DC,EAAMP,EAAEM,OAAO,GAAK,IAE1BN,EAAEQ,MAAQ,WACRR,EAAES,UALS,IAMXT,EAAEU,aAAa,IAAK,KACpBV,EAAEW,WAAW,KACbX,EAAEY,UAAUZ,EAAEa,IAAK,GACnBb,EAAEc,WAVa,IAUQ,CACrBC,MAAKd,GAAS,CAAEE,QAAQ,EAAOa,MAAM,GACrCC,YAAa,KAEfjB,EAAEkB,SAASlB,EAAEmB,QACbnB,EAAEoB,WACFpB,EAAEqB,KAAK,EAAId,EAAK,EAAG,IACnBP,EAAEsB,OAAOtB,EAAEuB,MAAQ,EAAGvB,EAAEwB,OAAS,EAAIxB,EAAEuB,MAAQ,EAAK,GACpDvB,EAAEyB,UAAUzB,EAAE0B,UAGhB1B,EAAE2B,KAAO,WAAY,IAAD,EACgB3B,EAAE4B,SAA5BC,EADU,EACVA,MAAOC,EADG,EACHA,MAAOC,EADJ,EACIA,QADJ,EAEDC,YACf,EACA,EACAH,EAAQzB,EAAY,GACpBJ,EAAEwB,OAASM,KAJLG,EAFU,EAEVA,EAAGC,EAFO,EAEPA,EAOXlC,EAAEmC,UAAUnC,EAAEuB,MAAQ,EAAGvB,EAAEwB,OAAS,GACpCxB,EAAEoC,OACApC,EAAEqC,IAAIP,EAAM,KAAM,EAAG,EAAGvB,EAAM,GAAKA,EAAM,IACzCP,EAAEsC,IAAIP,EAAQ3B,EAAY,GAAK,KAC/BJ,EAAEsC,IAAIP,EAAQ3B,EAAY,GAAK,KAC/B,IAEFJ,EAAEuC,KAAF,MAAAvC,EAAC,EACIgC,YAAiB,EAAG,EAAGH,EAAQzB,EAAY,GAAIJ,EAAEuB,MAAQ,GAAG,IADhE,QAECvB,EAAEwC,UAAUP,GAAIjC,EAAEuB,MAAQ,EAAGvB,EAAEuB,MAAQ,GACvCvB,EAAEwC,UAAUN,GAAIlC,EAAEuB,MAAQ,EAAGvB,EAAEuB,MAAQ,MAGzCvB,EAAEyC,WAAa,KAAQ,GACrBC,QAAQC,KAAQ3C,EAAEyC,WAAlB,YACDxC,GAA2B2C,OAAjB5C,EAAEyC,YAAkCzC,EAAE6C,WAItC,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc/C,OAAQA,EAAQgD,KAAMD,EAASE,SAAUC,YAAY,O,kCCzDrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM9B,EAAI0B,EAAUL,KAAKC,IAAIH,GAASS,EAChC3B,EAAI0B,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAAC9B,EAAGC,GAAK,CAAED,IAAGC,MAIlBF,IAzBU,SACvB2B,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAM9B,EAAIiB,EAAkBS,EAASP,EAAOC,GACtCnB,EAAIsB,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAAC9B,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2020-01-30-js-01ff9f3cfd68364188f8.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 120;\n  const RATE = 60;\n  const MULTIPLIERS = [p.floor(p.random(1, 3)), p.floor(p.random(3, 7))];\n  const HUE = p.random(0.2, 0.8);\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.colorMode(p.HSL, 1);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.8,\n    });\n    p.rectMode(p.CENTER);\n    p.noStroke();\n    p.fill(1 - HUE, 1, 0.9);\n    p.square(p.width / 2, p.height / 2, (p.width / 3) * 2);\n    p.blendMode(p.OVERLAY);\n  };\n\n  p.draw = function() {\n    const { theta, noise, noise1D } = p.animLoop;\n    const { x, y } = polarToCartesian(\n      0,\n      0,\n      theta * MULTIPLIERS[0],\n      p.height * noise()\n    );\n\n    p.translate(p.width / 2, p.height / 2);\n    p.stroke(\n      p.map(noise(10), -1, 1, HUE - 0.2, HUE + 0.2),\n      p.abs(noise1D(MULTIPLIERS[0] / 10)),\n      p.abs(noise1D(MULTIPLIERS[1] / 10)),\n      0.3\n    );\n    p.line(\n      ...polarToCartesian(0, 0, theta * MULTIPLIERS[1], p.width / 4, true),\n      p.constrain(x, -p.width / 3, p.width / 3),\n      p.constrain(y, -p.width / 3, p.width / 3)\n    );\n\n    p.frameCount % 100 === 0 &&\n      console.info(`${p.frameCount} / ${DURATION * RATE}`);\n    !RENDER && p.frameCount === DURATION * RATE && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}