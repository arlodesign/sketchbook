{"version":3,"sources":["webpack:///./src/pages/sketch/2018/12/29.js"],"names":["sketch","p","circleSize","gridGap","focusX","focusY","circles","distance","direction","userControl","Circle","x","y","this","prototype","draw","noFill","i","stroke","ellipse","lerp","map","dist","width","height","setup","createCanvas","random","CIRCLES_X","floor","CIRCLES_Y","GRIDGAP_X","GRIDGAP_Y","push","background","mouseX","cos","frameCount","mouseY","sin","forEach","circle","mouseClicked","touchMoved","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description"],"mappings":"6HAGMA,EAAS,SAASC,GACtB,IAAIC,EAEAC,EACAC,EACAC,EAHAC,EAAU,GAIVC,EAAW,EACXC,EAAY,EACZC,GAAc,EAEZC,EAVmB,WAWvB,SAAAA,EAAYC,EAAGC,GACbC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EAbY,OAAAF,EAAAI,UAevBC,KAAA,WACEd,EAAEe,SACF,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAASc,IAC3BhB,EAAEiB,OAAF,iBAA0BD,EAAId,EAA9B,KACAF,EAAEkB,QACAlB,EAAEmB,KAAKP,KAAKF,EAAGP,EAAQa,EAAId,EAAU,GACrCF,EAAEmB,KAAKP,KAAKD,EAAGP,EAAQY,EAAId,EAAU,GACrCD,EACEe,EAAId,EACJF,EAAEoB,IACApB,EAAEqB,KAAKT,KAAKF,EAAGE,KAAKD,EAAGR,EAAQC,GAC/B,EACAJ,EAAEqB,KAAK,EAAG,EAAGrB,EAAEsB,MAAOtB,EAAEuB,QACX,EAAbtB,GACCA,GACD,KA9BaQ,EAAA,GAqCzBT,EAAEwB,MAAQ,WACRxB,EAAEyB,aAAa,IAAK,KACpBxB,EAAaD,EAAE0B,OAAO,IAAK,KAC3BxB,EAAUD,EAAa,GACvBE,EAASH,EAAEsB,MAAQ,EACnBlB,EAASJ,EAAEuB,OAAS,EAKpB,IAJA,IAAMI,EAAY3B,EAAE4B,OAAO5B,EAAEsB,MAAQpB,IAAYD,EAAaC,IACxD2B,EAAY7B,EAAE4B,OAAO5B,EAAEuB,OAASrB,IAAYD,EAAaC,IACzD4B,GAAa9B,EAAEsB,MAAQK,EAAY1B,IAAe0B,EAAY,GAC9DI,GAAa/B,EAAEuB,OAASM,EAAY5B,IAAe4B,EAAY,GAE/DnB,GAAKoB,EAAY7B,EAAa,EAClCS,GAAKV,EAAEsB,MAAQrB,EACfS,GAAKT,EAAa6B,EAElB,IACE,IAAInB,GAAKoB,EAAY9B,EAAa,EAClCU,GAAKX,EAAEuB,OAAStB,EAChBU,GAAKV,EAAa8B,EAElB1B,EAAQ2B,KAAK,IAAIvB,EAAOC,EAAGC,KAKjCX,EAAEc,KAAO,WACPd,EAAEiC,WAAW,KACb9B,EAASK,EACLR,EAAEkC,OACFlC,EAAEsB,MAAQ,EAAItB,EAAEmC,IAAInC,EAAEoC,YAAwB,EAAVlC,IAAgBI,EACxDF,EAASI,EACLR,EAAEqC,OACFrC,EAAEuB,OAAS,EAAIvB,EAAEsC,IAAItC,EAAEoC,YAAwB,EAAVlC,IAAgBI,EACzDD,EAAQkC,QAAQ,SAAAC,GAAM,OAAIA,EAAO1B,UACjCR,GAAYC,KACKP,EAAEsB,MAAQ,IAAGf,GAAa,GACvCD,EAAWL,IAAYM,EAAY,IAGzCP,EAAEyC,aAAe,WACfjC,GAAeA,GAGjBR,EAAE0C,WAAa,WACb,GACE1C,EAAEkC,QAAU,GACZlC,EAAEqC,QAAU,GACZrC,EAAEkC,QAAUlC,EAAEsB,OACdtB,EAAEqC,QAAUrC,EAAEuB,OAEd,OAAO,IAKEoB,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CACEjD,OAAQA,EACRkD,KAAMJ,EAASK,SACfC,YAAY","file":"component---src-pages-sketch-2018-12-29-js-39a177f758d2bb7f95c3.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  let circleSize;\n  let circles = [];\n  let gridGap;\n  let focusX;\n  let focusY;\n  let distance = 0;\n  let direction = 1;\n  let userControl = false;\n\n  class Circle {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n    draw() {\n      p.noFill();\n      for (let i = 0; i < gridGap; i++) {\n        p.stroke(`rgba(0, 0, 0, ${i / gridGap})`);\n        p.ellipse(\n          p.lerp(this.x, focusX, i / gridGap / 2),\n          p.lerp(this.y, focusY, i / gridGap / 2),\n          circleSize -\n            i * gridGap +\n            p.map(\n              p.dist(this.x, this.y, focusX, focusY),\n              0,\n              p.dist(0, 0, p.width, p.height),\n              circleSize * 2,\n              -circleSize,\n              true\n            )\n        );\n      }\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    circleSize = p.random(100, 250);\n    gridGap = circleSize / 10;\n    focusX = p.width / 2;\n    focusY = p.height / 2;\n    const CIRCLES_X = p.floor((p.width - gridGap) / (circleSize + gridGap));\n    const CIRCLES_Y = p.floor((p.height - gridGap) / (circleSize + gridGap));\n    const GRIDGAP_X = (p.width - CIRCLES_X * circleSize) / (CIRCLES_X + 1);\n    const GRIDGAP_Y = (p.height - CIRCLES_Y * circleSize) / (CIRCLES_Y + 1);\n    for (\n      let x = -GRIDGAP_X - circleSize / 2;\n      x <= p.width + circleSize;\n      x += circleSize + GRIDGAP_X\n    ) {\n      for (\n        let y = -GRIDGAP_Y - circleSize / 2;\n        y <= p.height + circleSize;\n        y += circleSize + GRIDGAP_Y\n      ) {\n        circles.push(new Circle(x, y));\n      }\n    }\n  };\n\n  p.draw = function() {\n    p.background(255);\n    focusX = userControl\n      ? p.mouseX\n      : p.width / 2 + p.cos(p.frameCount / (gridGap * 2)) * distance;\n    focusY = userControl\n      ? p.mouseY\n      : p.height / 2 + p.sin(p.frameCount / (gridGap * 2)) * distance;\n    circles.forEach(circle => circle.draw());\n    distance += direction;\n    if (distance === p.width / 2) direction = -1;\n    if (distance < circleSize) direction = 1;\n  };\n\n  p.mouseClicked = function() {\n    userControl = !userControl;\n  };\n\n  p.touchMoved = function() {\n    if (\n      p.mouseX >= 0 &&\n      p.mouseY >= 0 &&\n      p.mouseX <= p.width &&\n      p.mouseY <= p.height\n    ) {\n      return false;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"\n      Click or tap to toggle user control of the sketch. Reload page for a\n      different variation.\n    \"\n  />\n);\n"],"sourceRoot":""}