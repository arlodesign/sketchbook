{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/20.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","initShape","shapes","setup","createCanvas","WEBGL","Array","from","a","random","TWO_PI","d","sort","b","noFill","draw","background","camera","sin","frameCount","cos","map","i","shape","stroke","length","rotateX","HALF_PI","beginShape","forEach","pt","vertex","polarToCartesian","endShape","CLOSE","unshift","constrain","noise","height","pop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"6jBAIA,IAAMA,EAAS,SAASC,GACtB,IAEIC,EAAY,GACZC,EAAS,GAEbF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,IAAK,IAAKJ,EAAEK,QAE3BJ,EAAYK,MAAMC,KAAKD,MAAM,KAAK,iBAAO,CACvCE,EAAGR,EAAES,OAAOT,EAAEU,QACdC,EAAGX,EAAES,cAGGG,MAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEA,EAAIK,EAAEL,KACjCN,EAAS,CAACD,GAEVD,EAAEc,UAGJd,EAAEe,KAAO,WACPf,EAAEgB,WAAW,GAEbhB,EAAEiB,OAC4B,IAA5BjB,EAAEkB,IAAIlB,EAAEmB,WAAa,KACO,IAA5BnB,EAAEoB,IAAIpB,EAAEmB,WAAa,KAC4B,IAAjDnB,EAAEqB,IAAIrB,EAAEoB,IAAIpB,EAAEmB,WAAa,MAAQ,EAAG,EAAG,EAAG,GAC5C,EACA,EACA,EACA,EACA,EACA,GAGF,IAfkB,eAeTG,GACP,IAAMC,EAAQrB,EAAOoB,GAErBtB,EAAEwB,OAAO,IAAKxB,EAAEqB,IAAIC,EAAG,EAAGpB,EAAOuB,OAAQ,IAAK,IAC9CzB,EAAE0B,QAAQ1B,EAAEqB,IAAIC,EAAG,EAAGpB,EAAOuB,OAAQ,EAAGzB,EAAE2B,UAC1C3B,EAAE4B,aACFL,EAAMM,SAAQ,SAAAC,GAAE,OACd9B,EAAE+B,OAAF,MAAA/B,EAAC,EAAWgC,YAAiB,EAAG,EAAGF,EAAGtB,EAAGsB,EAAGnB,EAzCtC,GAyC0CW,GAAS,QAE3DtB,EAAEiC,SAASjC,EAAEkC,QATNZ,EAAIpB,EAAOuB,OAAS,EAAGH,GAAK,EAAGA,IAAM,EAArCA,GAWTpB,EAAOiC,QACLlC,EAAUoB,KAAI,gBAAGb,EAAH,EAAGA,EAAGG,EAAN,EAAMA,EAAN,MAAe,CAC3BH,EAAGR,EAAEoC,UACH5B,EAAIR,EAAEqB,IAAIrB,EAAEqC,MAAM7B,EAAGR,EAAEmB,WAAa,KAAM,EAAG,EAAG,GAAK,KACrD,EACAnB,EAAEU,QAEJC,EAAGA,EAAIX,EAAEqC,MAAM1B,EAAGX,EAAEmB,WAAa,KAAO,QAGxCjB,EAAOuB,OAASzB,EAAEsC,OAAF,IAClBpC,EAAOqC,QAKE,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAczC,OAAQA,EAAQ0C,KAAMD,EAASE,SAAUC,YAAY,O,kCCnErE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK5B,IAAI0B,GAASC,GAE9BE,EAAoB,SAACJ,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK9B,IAAI4B,GAASC,GAa9BG,EAA0B,SAC9BC,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAK5B,IAAI0B,GAASO,EAChCI,EAAIL,EAAUJ,KAAK9B,IAAI4B,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBzB,IAzBU,SACvBmB,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASL,EAAOC,GACtCU,EAAIR,EAAkBG,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-06-20-js-5276823fda53a4addbf6.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GAP = 10;\n\n  let initShape = [];\n  let shapes = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n\n    initShape = Array.from(Array(10), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(),\n    }));\n\n    initShape.sort((a, b) => a.a - b.a);\n    shapes = [initShape];\n\n    p.noFill();\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    p.camera(\n      p.sin(p.frameCount / 200) * 200,\n      p.cos(p.frameCount / 200) * 200,\n      p.map(p.cos(p.frameCount / 1000), -1, 1, 0, 1) * 500,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    );\n\n    for (let i = shapes.length - 1; i >= 0; i--) {\n      const shape = shapes[i];\n\n      p.stroke(255, p.map(i, 0, shapes.length, 255, 0));\n      p.rotateX(p.map(i, 0, shapes.length, 0, p.HALF_PI));\n      p.beginShape();\n      shape.forEach(pt =>\n        p.vertex(...polarToCartesian(0, 0, pt.a, pt.d + i * GAP, true))\n      );\n      p.endShape(p.CLOSE);\n    }\n    shapes.unshift(\n      initShape.map(({ a, d }) => ({\n        a: p.constrain(\n          a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9),\n          0,\n          p.TWO_PI\n        ),\n        d: d * p.noise(d, p.frameCount / 500) * 10,\n      }))\n    );\n    if (shapes.length > p.height / (GAP * 2)) {\n      shapes.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}