{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/03.js"],"names":["sketch","p","margin","h","RENDER","getURLParams","render","setup","pixelDensity","frameRate","noSmooth","strokeCap","SQUARE","createCanvas","background","createLoop","gif","open","noiseRadius","floor","width","height","draw","animLoop","theta","noise2D","x","stroke","gap","map","sin","y","line","location","path","pathname","description"],"mappings":"6FAAA,yDAIMA,EAAS,SAASC,GACtB,IAIIC,EACAC,EALEC,EAASH,EAAEI,eAAeC,OAOhCL,EAAEM,MAAQ,WACRN,EAAEO,aAAaJ,EAAS,EAAI,GAC5BH,EAAEQ,UAPS,IAQXR,EAAES,WACFT,EAAEU,UAAUV,EAAEW,QACdX,EAAEY,aAAa,IAAK,KACpBZ,EAAEa,WAAW,KACbb,EAAEc,WAba,GAaQ,CACrBC,MAAKZ,GAAS,CAAEE,QAAQ,EAAOW,MAAM,GACrCC,YAAa,KAGfhB,EAASD,EAAEkB,MAAMlB,EAAEmB,MAAQ,IAC3BjB,EAAIF,EAAEoB,OAAkB,EAATnB,GAGjBD,EAAEqB,KAAO,WAAY,IAAD,EACSrB,EAAEsB,SAArBC,EADU,EACVA,MAAOC,EADG,EACHA,QACfxB,EAAEa,WAAW,KAEb,IAAK,IAAIY,EAAIxB,EAAQwB,GAAKzB,EAAEmB,MAAQlB,EAAQwB,IAAK,CAC/CzB,EAAE0B,OAAQD,EAAI,EAAL,IAET,IAAME,EAAM3B,EAAE4B,IAAI5B,EAAE6B,IAAIN,EAAQE,IAAK,EAAG,EAAGvB,EAAI,EAAGA,GAC5C4B,EAAI9B,EAAE4B,IACVJ,EAAQC,EAAI,IAAMA,EAAI,EAAK,IAC1B,EACD,EACAxB,EACAA,EAASC,EAAIyB,GAGf3B,EAAE+B,KAAKN,EAAGxB,EAAQwB,EAAGK,GACrB9B,EAAE+B,KAAKN,EAAGK,EAAIH,EAAKF,EAAGzB,EAAEoB,OAASnB,MAKxB,0BAAG+B,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcjC,OAAQA,EAAQkC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-02-03-js-8214a3e787f25f605f13.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 20;\n  const RATE = 30;\n\n  let margin;\n  let h;\n\n  p.setup = function() {\n    p.pixelDensity(RENDER ? 2 : 1);\n    p.frameRate(RATE);\n    p.noSmooth();\n    p.strokeCap(p.SQUARE);\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.3,\n    });\n\n    margin = p.floor(p.width / 30);\n    h = p.height - margin * 2;\n  };\n\n  p.draw = function() {\n    const { theta, noise2D } = p.animLoop;\n    p.background(255);\n\n    for (let x = margin; x <= p.width - margin; x++) {\n      p.stroke((x % 3) * (255 / 3));\n\n      const gap = p.map(p.sin(theta + x), -1, 1, h / 4, h);\n      const y = p.map(\n        noise2D(x / 100, (x % 3) + 1),\n        -1,\n        1,\n        margin,\n        margin + h - gap\n      );\n\n      p.line(x, margin, x, y);\n      p.line(x, y + gap, x, p.height - margin);\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}