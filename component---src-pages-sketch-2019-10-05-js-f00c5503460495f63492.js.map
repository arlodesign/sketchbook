{"version":3,"sources":["webpack:///./src/pages/sketch/2019/10/05.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","HUE","random","SCALARS","Array","fill","map","floor","setup","createCanvas","colorMode","HSL","background","createLoop","noiseRadius","draw","animLoop","theta","noise1D","pointA","polarToCartesian","height","pointB","width","pointC","pointD","translate","rotate","stroke","cos","noFill","beginShape","curveVertex","endShape","DURATION","frameCount","noLoop","alert","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"s+BAKA,IAAMA,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtB,IAEMC,EAAMD,EAAEE,OAAO,IACfC,EAAUC,MAAM,GACnBC,OACAC,KAAI,kBAAMN,EAAEO,MAAMP,EAAEE,OAAO,EAAG,OAEjCF,EAAEQ,MAAQ,WACRR,EAAES,aAAa,IAAK,KACpBT,EAAEU,UAAUV,EAAEW,IAAK,KACnBX,EAAEY,WAAWX,EAAK,IAAK,IACvBD,EAAEa,WAdW,IAcU,CACrBC,YAAa,MAIjBd,EAAEe,KAAO,WAAY,IAAD,EACSf,EAAEgB,SAArBC,EADU,EACVA,MAAOC,EADG,EACHA,QACTC,EAASC,YAAiB,EAAG,EAAW,EAARH,EAAWjB,EAAEqB,OAAS,GAAG,GACzDC,EAASF,YACb,EACA,GACCH,EAAQd,EAAQ,GAChBH,EAAEuB,MAAQ,EAAKL,EAAQf,EAAQ,GAAK,MACrC,GAEIqB,EAASJ,YACb,EACA,EACAH,EAAQd,EAAQ,GACfH,EAAEuB,MAAQ,EAAKL,EAAQf,EAAQ,GAAK,MACrC,GAEIsB,EAASL,YAAiB,EAAG,EAAY,GAARH,EAAWjB,EAAEuB,MAAQ,GAAG,GAC/DvB,EAAE0B,UAAU1B,EAAEuB,MAAQ,EAAGvB,EAAEqB,OAAS,GACpCrB,EAAE2B,OAAOV,GACTjB,EAAE4B,OACA5B,EAAEM,IAAIY,EAAQf,EAAQ,GAAK,MAAO,EAAG,EAAGF,EAAM,GAAIA,EAAM,IACxD,IACAD,EAAEM,IAAIN,EAAE6B,IAAY,EAARZ,IAAa,EAAG,EAAG,GAAI,KACnCjB,EAAEM,IAAIN,EAAE6B,IAAY,EAARZ,IAAa,EAAG,EAAG,GAAI,IAErCjB,EAAE8B,SACF9B,EAAE+B,aACF/B,EAAEgC,YAAF,MAAAhC,EAAC,EAAgBmB,IACjBnB,EAAEgC,YAAF,MAAAhC,EAAC,EAAgBsB,IACjBtB,EAAEgC,YAAF,MAAAhC,EAAC,EAAgBwB,IACjBxB,EAAEgC,YAAF,MAAAhC,EAAC,EAAgByB,IACjBzB,EAAEgC,YAAF,MAAAhC,EAAC,EAAgBmB,IACjBnB,EAAEgC,YAAF,MAAAhC,EAAC,EAAgBsB,IACjBtB,EAAEgC,YAAF,MAAAhC,EAAC,EAAgBwB,IACjBxB,EAAEiC,WAEmBC,QAAjBlC,EAAEmC,aACJnC,EAAEoC,SACFxC,GAAUyC,MAAM,WAKP,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcvC,OAAQA,EAAQwC,KAAMD,EAASE,SAAUC,YAAY,O,kCCtErE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKjB,IAAIe,GAASC,GAE9BE,EAAoB,SAACJ,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKE,IAAIJ,GAASC,GAsB9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUJ,KAAKjB,IAAIe,GAASQ,EAChCI,EAAIL,EAAUL,KAAKE,IAAIJ,GAASS,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBpC,IAzBU,SACvB8B,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASN,EAAOC,GACtCW,EAAIT,EAAkBI,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-10-05-js-f00c5503460495f63492.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && true;\nconst DURATION = 180;\n\nconst sketch = function(p) {\n  let th = 0;\n  let phi = 0;\n  const HUE = p.random(80);\n  const SCALARS = Array(3)\n    .fill()\n    .map(() => p.floor(p.random(1, 9)));\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 100);\n    p.background(HUE, 100, 90);\n    p.createLoop(DURATION, {\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n    const pointA = polarToCartesian(0, 0, theta * 2, p.height / 3, true);\n    const pointB = polarToCartesian(\n      0,\n      0,\n      -theta * SCALARS[0],\n      (p.width / 2) * noise1D(SCALARS[0] / 100),\n      true\n    );\n    const pointC = polarToCartesian(\n      0,\n      0,\n      theta * SCALARS[1],\n      (p.width / 2) * noise1D(SCALARS[1] / 100),\n      true\n    );\n    const pointD = polarToCartesian(0, 0, -theta * 2, p.width / 3, true);\n    p.translate(p.width / 2, p.height / 2);\n    p.rotate(theta);\n    p.stroke(\n      p.map(noise1D(SCALARS[3] / 100), -1, 1, HUE - 20, HUE + 20),\n      100,\n      p.map(p.cos(theta * 3), -1, 1, 50, 100),\n      p.map(p.cos(theta * 2), -1, 1, 10, 0)\n    );\n    p.noFill();\n    p.beginShape();\n    p.curveVertex(...pointA);\n    p.curveVertex(...pointB);\n    p.curveVertex(...pointC);\n    p.curveVertex(...pointD);\n    p.curveVertex(...pointA);\n    p.curveVertex(...pointB);\n    p.curveVertex(...pointC);\n    p.endShape();\n\n    if (p.frameCount === DURATION * 60) {\n      p.noLoop();\n      RENDER && alert(\"done\");\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}