{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js","webpack:///./src/pages/sketch/2019/05/12.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","p","x1","y1","x2","y2","rate","showFirstDot","l","dist","random","point","lerp","sketch","maxDist","SLICES","vertices","setup","createCanvas","Array","from","floor","theta","TWO_PI","r","height","forEach","i","push","vector","width","reached","hue","map","filter","background","colorMode","HSB","strokeWeight","draw","reachedVector","unreachedIndex","reachedVertices","shortestDist","vertex","thisDist","stroke","lerpLine","noStroke","fill","rect","v","length","noLoop","text","pop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-05-12-js-c3b6c7de7af21e7275fb.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  for (let l = 0; l < 1; l += rate > 0 ? rate : 1 / p.dist(x1, y1, x2, y2)) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const SLICES = p.random([2, 3, 5]);\n\n  let vertices = [];\n  let maxDist;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n\n    Array.from(Array(p.floor(3000 / SLICES)), () => ({\n      theta: p.random(p.TWO_PI / SLICES),\n      r: p.random(p.height / 2),\n    })).forEach(({ theta, r }) => {\n      for (let i = 0; i < SLICES; i++) {\n        vertices.push({\n          vector: polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            theta + (p.TWO_PI / SLICES) * i,\n            r\n          ),\n          reached: false,\n          hue: p.map(p.sin(theta + (p.TWO_PI / SLICES) * i), -1, 1, 0, 100),\n        });\n      }\n    });\n    vertices = vertices.filter(\n      ({ vector }) =>\n        vector.x > 0 &&\n        vector.x < p.width &&\n        vector.y > 0 &&\n        vector.y < p.height\n    );\n    vertices.push({\n      vector: {\n        x: p.width / 2,\n        y: p.height / 2,\n      },\n      reached: true,\n      hue: 0,\n    });\n\n    maxDist = p.dist(0, 0, p.width, p.height);\n\n    p.background(0);\n    p.colorMode(p.HSB, 100);\n    p.strokeWeight(2);\n  };\n\n  p.draw = function() {\n    const reachedVertices = vertices.filter(({ reached }) => reached);\n\n    let shortestDist = maxDist;\n    let reachedVector;\n    let unreachedIndex;\n\n    vertices.forEach((vertex, i) => {\n      if (!vertex.reached) {\n        reachedVertices.forEach(({ vector, hue }) => {\n          const thisDist = p.dist(\n            vector.x,\n            vector.y,\n            vertex.vector.x,\n            vertex.vector.y\n          );\n          if (thisDist < shortestDist) {\n            shortestDist = thisDist;\n            unreachedIndex = i;\n            reachedVector = vector;\n          }\n        });\n      }\n    });\n\n    p.stroke(vertices[unreachedIndex].hue, 80, 100);\n    lerpLine(\n      p,\n      reachedVector.x,\n      reachedVector.y,\n      vertices[unreachedIndex].vector.x,\n      vertices[unreachedIndex].vector.y,\n      p.map(\n        p.dist(p.width / 2, p.height / 2, reachedVector.x, reachedVector.y),\n        0,\n        maxDist / 2,\n        0.1,\n        0.5\n      ),\n      false\n    );\n\n    vertices[unreachedIndex].reached = true;\n\n    p.push();\n    p.noStroke();\n    p.fill(\"black\");\n    p.rect(0, 0, 100, 20);\n\n    if (vertices.filter(v => v.reached).length === vertices.length) {\n      p.noLoop();\n    } else {\n      p.fill(\"white\");\n      p.text(vertices.length - vertices.filter(v => v.reached).length, 0, 18);\n    }\n\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Be patient.\"\n  />\n);\n"],"sourceRoot":""}