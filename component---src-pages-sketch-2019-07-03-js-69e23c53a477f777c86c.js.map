{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/03.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","count","margin","COLORS","setup","createCanvas","width","strokeWeight","draw","blendMode","BLEND","background","fill","noStroke","circle","height","noFill","MULTIPLY","a","map","frameCount","TWO_PI","d","centerPoints","i","r","lerp","forEach","cp","j","stroke","SketchPage"],"mappings":"4FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,gHCV3BO,EAAS,SAASC,GACtB,IACIC,EACAC,EAFEC,EAAS,CAAC,MAAO,QAAS,QAIhCH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBJ,EAAQD,EAAEM,MAAQ,GAClBJ,EAASF,EAAEM,OAAS,EAAI,GACxBN,EAAEO,aAAa,IAGjBP,EAAEQ,KAAO,WACPR,EAAES,UAAUT,EAAEU,OACdV,EAAEW,WAAW,GACbX,EAAEY,KAAK,KACPZ,EAAEa,WACFb,EAAEc,OAAOd,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGf,EAAEM,MAAQJ,EAAS,GAEvDF,EAAEgB,SACFhB,EAAES,UAAUT,EAAEiB,UAUd,IARA,IAAMC,EAAIlB,EAAEmB,IAAInB,EAAEoB,WAAa,KAAM,EAAG,KAAM,EAAGpB,EAAEqB,QAC7CC,EAAItB,EAAEmB,IAAInB,EAAEP,IAAQ,EAAJyB,IAAS,EAAG,EAAG,EAAGlB,EAAEM,MAAQ,EAAIJ,GAElDqB,EAAe,CACjB7B,YAAiBM,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAGI,GAC/C5B,YAAiBM,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAIlB,EAAEqB,QAAU,EAAI,GAAIC,GACpE5B,YAAiBM,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAIlB,EAAEqB,QAAU,EAAI,GAAIC,IAhBpD,WAkBTE,GACP,IAAMC,EAAIzB,EAAE0B,KAAK,EAAG1B,EAAEM,MAAQJ,EAAQsB,GAEtCD,EAAaI,SAAQ,SAACC,EAAIC,GACxB7B,EAAE8B,OAAO3B,EAAO0B,IAChB,IAAMxC,EAAIW,EAAE0B,KAAKE,EAAGvC,EAAGW,EAAEM,MAAQ,EAAGkB,GAC9BhC,EAAIQ,EAAE0B,KAAKE,EAAGpC,EAAGQ,EAAEe,OAAS,EAAGS,GACrCxB,EAAEc,OAAOzB,EAAGG,EAAGiC,OAPVD,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAIvB,EAAQ,EAA/BuB,KAmBEO,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQhC,OAAQA","file":"component---src-pages-sketch-2019-07-03-js-69e23c53a477f777c86c.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const COLORS = [\"red\", \"green\", \"blue\"];\n  let count;\n  let margin;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    count = p.width / 20;\n    margin = p.width * (1 / 6);\n    p.strokeWeight(2);\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0);\n    p.fill(255);\n    p.noStroke();\n    p.circle(p.width / 2, p.height / 2, p.width - margin / 2);\n\n    p.noFill();\n    p.blendMode(p.MULTIPLY);\n\n    const a = p.map(p.frameCount % 1200, 0, 1200, 0, p.TWO_PI);\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width / 2 - margin);\n\n    let centerPoints = [\n      polarToCartesian(p.width / 2, p.height / 2, a, d),\n      polarToCartesian(p.width / 2, p.height / 2, a + p.TWO_PI * (1 / 3), d),\n      polarToCartesian(p.width / 2, p.height / 2, a + p.TWO_PI * (2 / 3), d),\n    ];\n    for (let i = 0; i < 1; i += 1 / count) {\n      const r = p.lerp(6, p.width - margin, i);\n\n      centerPoints.forEach((cp, j) => {\n        p.stroke(COLORS[j]);\n        const x = p.lerp(cp.x, p.width / 2, i);\n        const y = p.lerp(cp.y, p.height / 2, i);\n        p.circle(x, y, r);\n      });\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}