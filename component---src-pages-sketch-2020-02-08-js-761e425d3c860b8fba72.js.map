{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2020/02/08.js","webpack:///./src/lib/lineIntersection.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","sketch","p","r","M","shuffle","OFFSET","QUARTER_PI","HALF_PI","PI","HUE","random","TWO_PI","SIDE_COUNT","shapes","setup","frameRate","createCanvas","colorMode","HSB","background","createLoop","noiseRadius","blendMode","HARD_LIGHT","width","map","d","Array","fill","_","i","height","draw","animLoop","theta","noise","noise1D","progress","thetaA","thetaB","thetaC","thetaD","a","b","lineIntersection","stroke","asin","acos","noFill","bezier","ease","frameCount","console","info","floor","DURATION","noLoop","location","path","pathname","description","x1","y1","x2","y2","x3","y3","x4","y4","uA","uB"],"mappings":"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","file":"component---src-pages-sketch-2020-02-08-js-761e425d3c860b8fba72.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lineIntersection from \"~lib/lineIntersection\";\nimport { easeInOutQuint as ease } from \"~lib/easing\";\n\nconst sketch = function(p) {\n  const DURATION = 360;\n  const RATE = 60;\n  const M = p.shuffle([1, 2, 3, 5, 7, 9, 11, 13, 17]);\n  const OFFSET = p.shuffle([p.QUARTER_PI, p.HALF_PI, p.PI]);\n  const HUE = p.random(0.5, p.TWO_PI - 0.5);\n  const SIDE_COUNT = p.random([3, 4, 5, 6]);\n\n  let shapes = [];\n  let r;\n  let complete = 0;\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, p.TWO_PI);\n    p.background(p.TWO_PI - HUE, p.QUARTER_PI, p.QUARTER_PI);\n    p.createLoop(DURATION, {\n      noiseRadius: 10,\n    });\n    p.blendMode(p.HARD_LIGHT);\n\n    r = p.width / 4 - p.width / 30;\n\n    shapes = [-1, 1].map(d =>\n      Array(SIDE_COUNT)\n        .fill()\n        .map((_, i) => [\n          polarToCartesian(\n            p.width / 2 + r * d,\n            p.height / 2 + r * d,\n            (p.TWO_PI / SIDE_COUNT) * i,\n            r * d,\n            true\n          ),\n          polarToCartesian(\n            p.width / 2 + r * d,\n            p.height / 2 + r * d,\n            (p.TWO_PI / SIDE_COUNT) * (i + 1),\n            r * d,\n            true\n          ),\n        ])\n    );\n  };\n\n  p.draw = function() {\n    const { theta, noise, noise1D, progress } = p.animLoop;\n\n    const thetaA = theta * M[0];\n    const thetaB = theta * M[1] + OFFSET[0];\n    const thetaC = theta * M[2] + OFFSET[1];\n    const thetaD = theta * M[3] + OFFSET[2];\n\n    let a = { x: null, y: null };\n    let b = { x: null, y: null };\n\n    for (let i = 0; i < SIDE_COUNT; i++) {\n      a =\n        a.x && a.y\n          ? a\n          : lineIntersection(\n              p.width / 2 - r,\n              p.height / 2 - r,\n              ...polarToCartesian(\n                p.width / 2 - r,\n                p.height / 2 - r,\n                thetaA,\n                p.width / 2,\n                true\n              ),\n              ...shapes[0][i][0],\n              ...shapes[0][i][1]\n            );\n\n      b =\n        b.x && b.y\n          ? b\n          : lineIntersection(\n              p.width / 2 + r,\n              p.height / 2 + r,\n              ...polarToCartesian(\n                p.width / 2 + r,\n                p.height / 2 + r,\n                thetaB,\n                p.width / 2,\n                true\n              ),\n              ...shapes[1][i][0],\n              ...shapes[1][i][1]\n            );\n    }\n\n    p.stroke(\n      HUE + noise() / 2,\n      p.asin(p.sin(theta * M[4])) + p.PI / 2,\n      p.acos(p.cos(theta * M[5])) + p.PI / 2,\n      ((-(2 * progress * progress) + 2 * progress) / 2) * p.TWO_PI\n    );\n    p.noFill();\n    if (a.x && a.y && b.x && b.y) {\n      p.bezier(\n        a.x,\n        a.y,\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          thetaC,\n          r * ease((noise1D(M[6]) + 1) / 2),\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          thetaD,\n          r * ease((noise1D(M[7]) + 1) / 2),\n          true\n        ),\n        b.x,\n        b.y\n      );\n    }\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","/**\n *\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n * @param {number} x3\n * @param {number} y3\n * @param {number} x4\n * @param {number} y4\n */\nexport default function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {\n  const uA =\n    ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n  const uB =\n    ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    return { x: x1 + uA * (x2 - x1), y: y1 + uA * (y2 - y1) };\n  }\n  return { x: null, y: null };\n}\n"],"sourceRoot":""}