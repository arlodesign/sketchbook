{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/05.js","webpack:///./src/lib/lerpLine.js"],"names":["RENDER","process","DEV","sketch","p","margin","color1","color2","HUE","random","setup","frameRate","pixelDensity","createCanvas","colorMode","HSL","background","noFill","strokeWeight","width","color","createLoop","gif","render","open","noiseRadius","draw","animLoop","noise1D","theta","push","translate","height","stroke","lerpColor","map","sin","lerpLine","cos","pop","DURATION","frameCount","noLoop","location","path","pathname","description","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","Math","max","dist","l","point","lerp"],"mappings":"6FAAA,qEAKMA,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtB,IAEIC,EACAC,EACAC,EAJEC,EAAMJ,EAAEK,OAAO,KAMrBL,EAAEM,MAAQ,WACRN,EAAEO,UAAU,IAERX,GACFI,EAAEQ,aAAa,GAGjBR,EAAES,aAAa,IAAK,KACpBT,EAAEU,UAAUV,EAAEW,IAAK,KACnBX,EAAEY,WAAWR,EAAK,GAAI,IACtBJ,EAAEa,SACFb,EAAEc,aAAa,GAEfb,EAASD,EAAEe,MAAQ,GACnBb,EAASF,EAAEgB,MAAMZ,EAAK,IAAK,GAAI,IAC/BD,EAASH,EAAEgB,MAAM,IAAMZ,EAAK,GAAI,GAAI,IAEpCJ,EAAEiB,WA1BW,GA0BU,CACrBC,MAAKtB,GAAS,CAAEuB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBrB,EAAEsB,KAAO,WAAY,IAAD,EACStB,EAAEuB,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MACjBzB,EAAE0B,OACF1B,EAAE2B,UAAU3B,EAAEe,MAAQ,EAAGf,EAAE4B,OAAS,GACpC5B,EAAE6B,OAAO7B,EAAE8B,UAAU5B,EAAQC,EAAQH,EAAE+B,IAAI/B,EAAEgC,IAAIP,IAAS,EAAG,EAAG,EAAG,KACnEQ,YACEjC,IACEA,EAAEe,MAAQ,EAAId,GAAUuB,GAASxB,EAAEe,MAAQ,EAAId,KAC/CD,EAAE4B,OAAS,EAAI3B,GAAUuB,GAASxB,EAAE4B,OAAS,EAAI3B,IAClDD,EAAEe,MAAQ,EAAId,GAAUuB,EAAQxB,EAAEe,MAAQ,EAAId,IAC9CD,EAAE4B,OAAS,EAAI3B,GAAUuB,EAAQxB,EAAE4B,OAAS,EAAI3B,GACjDD,EAAE+B,IAAIP,EAAQxB,EAAEkC,IAAIT,KAAU,EAAG,EAAG,MAAe,KAErDzB,EAAEmC,OAEDvC,GAA2BwC,OAAjBpC,EAAEqC,YAAgCrC,EAAEsC,WAIpC,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcxC,OAAQA,EAAQyC,KAAMD,EAASE,SAAUC,YAAY,O,oCC9CtD,aACb1C,EACA2C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QACA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAIR,IAFA,IAAMC,EAAWC,KAAKC,IAAIL,EAAM,IAAO/C,EAAEqD,KAAKV,EAAIC,EAAIC,EAAIC,IAEjDQ,EAAI,EAAGA,EAAI,EAAGA,GAAKJ,GAChB,IAANI,GAAYN,KACXC,GAASjD,EAAEK,SAAWiD,IAAOL,IAChCjD,EAAEuD,MAAMvD,EAAEwD,KAAKb,EAAIE,EAAIS,GAAItD,EAAEwD,KAAKZ,EAAIE,EAAIQ","file":"component---src-pages-sketch-2019-08-05-js-82629c44936310ddaa2b.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 60;\n\nconst sketch = function(p) {\n  const HUE = p.random(100);\n\n  let margin;\n  let color1;\n  let color2;\n\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 100);\n    p.background(HUE, 50, 90);\n    p.noFill();\n    p.strokeWeight(2);\n\n    margin = p.width / 20;\n    color1 = p.color(HUE, 100, 20, 80);\n    color2 = p.color(100 - HUE, 50, 50, 80);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.3,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n    p.stroke(p.lerpColor(color1, color2, p.map(p.sin(theta), -1, 1, 0, 1)));\n    lerpLine(\n      p,\n      (-p.width / 2 + margin) * noise1D(-p.width / 2 + margin),\n      (-p.height / 2 + margin) * noise1D(-p.height / 2 + margin),\n      (p.width / 2 - margin) * noise1D(p.width / 2 - margin),\n      (p.height / 2 - margin) * noise1D(p.height / 2 - margin),\n      p.map(noise1D(p.cos(theta)), -1, 1, 0.00000000001, 0.1)\n    );\n    p.pop();\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n"],"sourceRoot":""}