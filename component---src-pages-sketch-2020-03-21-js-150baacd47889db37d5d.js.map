{"version":3,"sources":["webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2020/03/21.js"],"names":["linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","sketch","p","RENDER","getURLParams","render","HUE","random","attractors","particles","alpha","Particle","x","y","sat","this","pos","createVector","vel","p5","Vector","random2D","acc","prev","update","add","show","stroke","closestAttractorDist","closestAttractor","forEach","attractor","thisDist","dist","line","attracted","target","force","sub","dsquared","magSq","strength","min","G","setMag","setup","pixelDensity","frameRate","createCanvas","colorMode","HSB","background","blendMode","HARD_LIGHT","createLoop","gif","open","noiseRadius","Array","fill","map","_","randomGaussian","width","height","draw","progress","animLoop","easedProgress","ease","particle","frameCount","console","info","floor","DURATION","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-03-21-js-150baacd47889db37d5d.js","sourcesContent":["// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport { easeOutQuad as ease } from \"~lib/easing\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 60;\n  const RATE = 30;\n  const G = 25;\n  const HUE = p.random();\n\n  let attractors = [];\n  let particles = [];\n  let alpha = 0;\n\n  class Particle {\n    constructor(x, y, sat) {\n      this.pos = p.createVector(x, y);\n      this.vel = p5.Vector.random2D();\n      this.acc = p.createVector();\n      this.prev = null;\n      this.sat = sat;\n    }\n    update() {\n      this.pos.add(this.vel);\n      this.vel.add(this.acc);\n    }\n    show() {\n      p.stroke(HUE, this.sat, 0.5, alpha);\n      if (this.prev) {\n        let closestAttractorDist = 10000;\n        let closestAttractor = null;\n        attractors.forEach(attractor => {\n          const thisDist = p.dist(\n            attractor.x,\n            attractor.y,\n            this.pos.x,\n            this.pos.y\n          );\n          if (thisDist < closestAttractorDist) {\n            closestAttractorDist = thisDist;\n            closestAttractor = attractor;\n          }\n        });\n        p.line(this.pos.x, this.pos.y, closestAttractor.x, closestAttractor.y);\n        p.line(this.pos.x, this.pos.y, this.prev.x, this.prev.y);\n      }\n      this.prev = { x: this.pos.x, y: this.pos.y };\n    }\n    attracted(target) {\n      const force = p5.Vector.sub(target, this.pos);\n      let dsquared = force.magSq();\n      dsquared = p.min(dsquared, G * 20);\n      const strength = G / dsquared;\n      force.setMag(strength);\n      this.acc = force;\n    }\n  }\n\n  p.setup = function() {\n    p.pixelDensity(RENDER ? 1 : 2);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n    p.background(1 - HUE, 0.2, 1);\n    p.blendMode(p.HARD_LIGHT);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n\n    attractors = Array(10)\n      .fill()\n      .map(_ =>\n        p.createVector(\n          p.randomGaussian(p.width / 2, p.width / 5),\n          p.randomGaussian(p.height / 2, p.width / 5)\n        )\n      );\n    particles = Array(5)\n      .fill()\n      .map(\n        _ => new Particle(p.random(p.width), p.random(p.height), p.random())\n      );\n  };\n\n  p.draw = function() {\n    const { progress } = p.animLoop;\n    const easedProgress = ease(progress);\n    alpha = -2 * easedProgress * easedProgress + 2 * easedProgress;\n\n    particles.forEach(particle => {\n      attractors.forEach(attractor => {\n        // p.point(attractor.x, attractor.y);\n        particle.attracted(attractor);\n      });\n      particle.update();\n      particle.show();\n    });\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (!RENDER && p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}