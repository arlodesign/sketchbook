{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/12/06.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","RENDER","getURLParams","render","COLORS","shuffle","setup","pixelDensity","frameRate","createCanvas","createLoop","gif","open","noiseRadius","noStroke","draw","blendMode","BLEND","background","MULTIPLY","animLoop","theta","noise1D","translate","width","height","rotate","i","a","TWO_PI","fill","push","ellipse","pop","circle","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-12-06-js-c1431fc0102f86f28d8a.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const COLORS = p.shuffle([\"cyan\", \"magenta\", \"yellow\"]);\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n    p.createCanvas(660, 840);\n    p.createLoop(20, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.MULTIPLY);\n\n    const { theta, noise1D } = p.animLoop;\n\n    p.translate(p.width / 2, p.height / 2);\n    p.rotate(theta);\n    for (let i = 0; i < 3; i++) {\n      const a = i * (p.TWO_PI / 3);\n      p.fill(COLORS[i]);\n      p.push();\n      p.translate(...polarToCartesian(0, 0, a, p.width * noise1D(0.1), true));\n      p.rotate(-theta + a);\n      p.ellipse(\n        0,\n        0,\n        (p.width / 10) * (noise1D(0.2) + 2),\n        (p.height / 2) * (noise1D(0.3) + 2)\n      );\n      p.pop();\n    }\n\n    for (let i = 0; i < 3; i++) {\n      const a = i * (p.TWO_PI / 3);\n      p.fill(COLORS[2 - i]);\n\n      p.push();\n      p.translate(\n        ...polarToCartesian(0, 0, a, (p.width / 5) * noise1D(0.4), true)\n      );\n      p.rotate(theta + a);\n      p.ellipse(\n        0,\n        0,\n        (p.width / 2) * (noise1D(0.5) + 2),\n        (p.height / 20) * (noise1D(0.6) + 2)\n      );\n      p.pop();\n    }\n\n    for (let i = 0; i < 18; i++) {\n      const a = i * (p.TWO_PI / 18) + p.TWO_PI / 36;\n      p.fill(COLORS[i % 3]);\n\n      p.push();\n      p.translate(\n        ...polarToCartesian(0, 0, a, p.width * noise1D(0.7 + i), true)\n      );\n      p.rotate(theta + a);\n      p.circle(0, 0, (p.width / 20) * (noise1D(0.8) + 1));\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}