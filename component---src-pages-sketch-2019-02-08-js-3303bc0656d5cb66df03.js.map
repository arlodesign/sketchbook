{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/08.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","img","axis","POINTS_PER_SHAPE","shapes","Shape","colorFunctions","angle","abs","sin","cos","tan","PI","this","cf","Array","from","Set","_cf","length","random","points","fill","map","_","Point","_clr","color","frameCount","draw","blendMode","DIFFERENCE","ADD","noStroke","beginShape","vertex","location","x","y","forEach","i","move","endShape","CLOSE","_angle","TWO_PI","_dist","_speed","_getLocation","polarToCartesian","preload","loadImage","withPrefix","setup","createCanvas","background","createVector","width","keys","setTimeout","noLoop","shape","DARKEST","image","height","path","pathname","description","polarToCartesianX","center","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-02-08-js-3303bc0656d5cb66df03.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { withPrefix } from \"gatsby\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SHAPES_COUNT = 3;\n  const POINTS_PER_SHAPE = 4;\n  let img;\n  let axis;\n  let shapes = [];\n\n  class Shape {\n    constructor() {\n      const colorFunctions = [\n        angle => p.abs(p.sin(angle)) * 240,\n        angle => p.abs(p.cos(angle)) * 240,\n        angle => p.abs(p.tan(angle)) * 240,\n        angle => p.abs(p.sin(angle + p.PI)) * 240,\n        angle => p.abs(p.cos(angle + p.PI)) * 240,\n        angle => p.abs(p.tan(angle + p.PI)) * 240,\n        angle => p.abs(p.sin(-angle)) * 240,\n        angle => p.abs(p.cos(-angle)) * 240,\n        angle => p.abs(p.tan(-angle)) * 240,\n        angle => p.abs(p.sin(-angle + p.PI)) * 240,\n        angle => p.abs(p.cos(-angle + p.PI)) * 240,\n        angle => p.abs(p.tan(-angle + p.PI)) * 240,\n      ];\n      this.cf = [];\n      while (Array.from(new Set(this._cf)).length < 3) {\n        this._cf = [\n          p.random(colorFunctions),\n          p.random(colorFunctions),\n          p.random(colorFunctions),\n        ];\n      }\n      this.points = Array(POINTS_PER_SHAPE)\n        .fill()\n        .map(_ => new Point());\n    }\n    _clr() {\n      return p.color(\n        this._cf[0](p.frameCount),\n        this._cf[1](p.frameCount),\n        this._cf[2](p.frameCount)\n      );\n    }\n    draw() {\n      p.blendMode(p.frameCount % 3 ? p.DIFFERENCE : p.ADD);\n      p.noStroke();\n      p.fill(this._clr());\n      p.beginShape();\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      this.points.forEach(({ location }, i) => {\n        if (i === 0) return;\n        p.vertex(location.x, location.y);\n        this.points[i].move();\n      });\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      p.endShape(p.CLOSE);\n    }\n  }\n\n  class Point {\n    constructor() {\n      this._angle = p.random(p.TWO_PI);\n      this._dist = p.random(200, 350);\n      this._speed = p.random([-0.05, 0.05]);\n      this.location = this._getLocation();\n    }\n\n    _getLocation() {\n      return polarToCartesian(axis.x, axis.y, this._angle, this._dist);\n    }\n\n    move() {\n      this._angle += this._speed;\n      this.location = this._getLocation();\n    }\n  }\n\n  p.preload = function() {\n    img = p.loadImage(withPrefix(\"/assets/susan.png\"));\n  };\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    axis = p.createVector(p.width / 2, 350);\n    shapes = [...Array(SHAPES_COUNT).keys()].map(_ => new Shape());\n    setTimeout(() => {\n      p.noLoop();\n    }, 20000);\n  };\n\n  p.draw = function() {\n    shapes.forEach((shape, i) => shape.draw());\n    p.blendMode(p.DARKEST);\n    p.image(img, 0, 0, p.width, p.height);\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}