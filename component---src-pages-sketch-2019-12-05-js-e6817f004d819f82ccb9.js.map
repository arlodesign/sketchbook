{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2019/12/05.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","sketch","p","RENDER","getURLParams","render","setup","pixelDensity","frameRate","createCanvas","createLoop","gif","open","rectMode","CENTER","noStroke","colorMode","HSB","draw","animLoop","theta","noise2D","blendMode","BLEND","background","DIFFERENCE","GRID","width","height","push","fill","translate","square","ease","map","tan","dist","pop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,kCCxBjC,2kBAGA,IAAME,EAAS,SAAAC,GAAC,OAAIA,GAGdC,EAAa,SAAAD,GAAC,OAAIA,EAAIA,GAGtBE,EAAc,SAAAF,GAAC,OAAIA,GAAK,EAAIA,IAG5BG,EAAgB,SAAAH,GAAC,OAAKA,EAAI,GAAM,EAAIA,EAAIA,GAAU,EAAI,EAAIA,GAAKA,EAAlB,GAG7CI,EAAc,SAAAJ,GAAC,OAAIA,EAAIA,EAAIA,GAG3BK,EAAe,SAAAL,GAAC,QAAMA,EAAIA,EAAIA,EAAI,GAGlCM,EAAiB,SAAAN,GAAC,OACtBA,EAAI,GAAM,EAAIA,EAAIA,EAAIA,GAAKA,EAAI,IAAM,EAAIA,EAAI,IAAM,EAAIA,EAAI,GAAK,GAG5DO,EAAc,SAAAP,GAAC,OAAIA,EAAIA,EAAIA,EAAIA,GAG/BQ,EAAe,SAAAR,GAAC,OAAI,KAAMA,EAAIA,EAAIA,EAAIA,GAGtCS,EAAiB,SAAAT,GAAC,OACtBA,EAAI,GAAM,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,EAAI,IAAMA,EAAIA,EAAIA,EAAIA,GAGhDU,EAAc,SAAAV,GAAC,OAAIA,EAAIA,EAAIA,EAAIA,EAAIA,GAGnCW,EAAe,SAAAX,GAAC,OAAI,IAAMA,EAAIA,EAAIA,EAAIA,EAAIA,GAG1CY,EAAiB,SAAAZ,GAAC,OACtBA,EAAI,GAAM,GAAKA,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,EAAI,KAAOA,EAAIA,EAAIA,EAAIA,EAAIA,I,u7BCpChE,IAAMa,EAAS,SAASC,GACtB,IAAMC,EAASD,EAAEE,eAAeC,OAGhCH,EAAEI,MAAQ,WACJH,IACFD,EAAEK,aAAa,GACfL,EAAEM,UAAU,KAEdN,EAAEO,aAAa,IAAK,KACpBP,EAAEQ,WAAW,GAAI,CACfC,MAAKR,GAAS,CAAEE,QAAQ,EAAOO,MAAM,KAEvCV,EAAEW,SAASX,EAAEY,QACbZ,EAAEa,WACFb,EAAEc,UAAUd,EAAEe,IAAK,IAGrBf,EAAEgB,KAAO,WAAY,IAAD,EACShB,EAAEiB,SAArBC,EADU,EACVA,MAAOC,EADG,EACHA,QACfnB,EAAEoB,UAAUpB,EAAEqB,OACdrB,EAAEsB,WAAW,GACbtB,EAAEoB,UAAUpB,EAAEuB,YAEd,IAAK,IAAIzC,EAAI0C,EAAU1C,EAAIkB,EAAEyB,MAAO3C,GAtBzB,GAuBT,IAAK,IAAIC,EAAIyC,EAAUzC,EAAIiB,EAAE0B,OAAQ3C,GAvB5B,GAwBPiB,EAAE2B,OACF3B,EAAE4B,KAAKT,EAAQrC,EAAGC,GAAK,EAAG,EAAG,GAC7BiB,EAAE6B,UAAU/C,EAAGC,GACfiB,EAAE8B,OACA,EACA,EACAN,MAEEO,qBACE/B,EAAEgC,IACAhC,EAAEiC,IACAjC,EAAEkC,KAAF,MAAAlC,EAAC,CACClB,EACAC,GAFD,SAGIC,YACDgB,EAAEyB,MAAQ,EACVzB,EAAE0B,OAAS,EACXR,EACAM,KACA,MAEAN,IAEL,EACD,EACA,EACA,GACA,IAGNM,GAEFxB,EAAEmC,QAMK,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcrC,OAAQA,EAAQsC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-12-05-js-e6817f004d819f82ccb9.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { easeInQuad as ease } from \"~lib/easing\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const GRID = 10;\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n    p.createCanvas(660, 840);\n    p.createLoop(49, {\n      gif: RENDER ? { render: false, open: true } : false,\n    });\n    p.rectMode(p.CENTER);\n    p.noStroke();\n    p.colorMode(p.HSB, 2);\n  };\n\n  p.draw = function() {\n    const { theta, noise2D } = p.animLoop;\n    p.blendMode(p.BLEND);\n    p.background(0);\n    p.blendMode(p.DIFFERENCE);\n\n    for (let x = GRID / 2; x < p.width; x += GRID) {\n      for (let y = GRID / 2; y < p.height; y += GRID) {\n        p.push();\n        p.fill(noise2D(x, y) + 1, 1, 2);\n        p.translate(x, y);\n        p.square(\n          0,\n          0,\n          GRID *\n            1.333 *\n            ease(\n              p.map(\n                p.tan(\n                  p.dist(\n                    x,\n                    y,\n                    ...polarToCartesian(\n                      p.width / 2,\n                      p.height / 2,\n                      theta,\n                      GRID * 10,\n                      true\n                    )\n                  ) + theta\n                ),\n                -1,\n                1,\n                0,\n                1,\n                true\n              )\n            ),\n          GRID / 2\n        );\n        p.pop();\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}