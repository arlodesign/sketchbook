{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/05.js","webpack:///./src/lib/lerpLine.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","count","margin","HUE","random","COLORS","Array","from","length","_","i","setup","frameRate","createLoop","gif","render","open","createCanvas","width","strokeWeight","rectMode","RADIUS","colorMode","HSB","draw","blendMode","BLEND","background","noFill","HARD_LIGHT","a","map","frameCount","FRAMERATE","FRAMES","TWO_PI","d","centerPoints","height","forEach","cp","j","stroke","lerp","lerpLine","SketchPage","x1","y1","x2","y2","rate","showFirstDot","Error","l","point"],"mappings":"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","file":"component---src-pages-sketch-2019-07-05-js-33a6bf0e346058f1eca9.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const DURATION = 10;\n  const FRAMERATE = 60;\n  const FRAMES = FRAMERATE * DURATION;\n  const QTY = 7;\n  const HUE = p.random(100 / QTY);\n  const COLORS = Array.from({ length: QTY }, (_, i) => HUE + (100 / QTY) * i);\n\n  let count;\n  let margin;\n\n  p.setup = function() {\n    p.frameRate(FRAMERATE);\n    if (p.createLoop) {\n      p.createLoop(DURATION, {\n        gif: { render: false, open: true },\n      });\n    }\n    p.createCanvas(660, 840);\n    count = p.width / 50;\n    margin = p.width * (1 / 8);\n    p.strokeWeight(3);\n    p.rectMode(p.RADIUS);\n    p.colorMode(p.HSB, 100);\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(10);\n\n    p.noFill();\n    p.blendMode(p.HARD_LIGHT);\n\n    const a = p.map((p.frameCount % FRAMES) / 3, 0, FRAMES / 3, 0, p.TWO_PI);\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width - margin * 2);\n\n    let centerPoints = Array.from({ length: COLORS.length }, (_, i) =>\n      polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        a + p.TWO_PI * (i / COLORS.length),\n        d\n      )\n    );\n\n    for (let i = 0; i < 1; i += 1 / count) {\n      centerPoints.forEach((cp, j) => {\n        p.stroke(COLORS[j], 35, 100);\n        const x = p.lerp(cp.x, p.width / 2, i);\n        const y = p.lerp(cp.y, p.width / 2, i);\n        lerpLine(\n          p,\n          x,\n          y,\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            p.map(p.frameCount % FRAMES, 0, FRAMES, 0, p.TWO_PI),\n            p.width / 2 - margin,\n            true\n          ),\n          0.01\n        );\n      });\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}