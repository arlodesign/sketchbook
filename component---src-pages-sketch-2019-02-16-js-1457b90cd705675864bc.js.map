{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/16.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","getColor","angle","color","abs","cos","sin","PI","setup","createCanvas","WEBGL","stroke","noFill","noiseDetail","rectMode","CENTER","camera","width","height","draw","background","x","y","points","col","N","noise","frameCount","push","map","forEach","point","line","apply","concat","polarToCartesianX","GRID_SIZE","polarToCartesianY","translate","noStroke","fill","sphere","pop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname","__webpack_require__","d","polarToCartesianEllipse","center","distance","Math","centerX","centerY","radiusX","radiusY","asArray","polarToCartesian"],"mappings":"8IAIMA,EAAS,SAASC,GAItB,SAASC,EAASC,GAChB,OAAOF,EAAEG,MACe,IAAtBH,EAAEI,IAAIJ,EAAEK,IAAIH,IACkB,IAA9BF,EAAEI,IAAIJ,EAAEM,KAAKJ,EAAQF,EAAEO,KACvB,KAIJP,EAAEQ,MAAQ,WACRR,EAAES,aAAa,IAAK,IAAKT,EAAEU,OAC3BV,EAAEW,OAAO,KACTX,EAAEY,SACFZ,EAAEa,YAAY,EAAG,IACjBb,EAAEc,SAASd,EAAEe,QACbf,EAAEgB,QACChB,EAAEiB,MAAQ,GACVjB,EAAEkB,OAAS,EAlBF,KAoBTlB,EAAEiB,MAAQ,GACVjB,EAAEkB,OAAS,EACZ,EACA,EACA,EACA,IAIJlB,EAAEmB,KAAO,WACPnB,EAAEoB,WAAW,GAIb,IAHA,IAAIC,EAhCY,GAgCIrB,EAAEiB,MAAQ,EAC1BK,EAjCY,GAiCItB,EAAEkB,OAAS,EAC3BK,EAAS,GACNF,EAAI,GAAG,CAEZ,IADA,IAAIG,EAAM,GACHF,EAAI,GAAG,CACZ,IAAMG,EAAIzB,EAAE0B,MACT,IAADL,EACC,IAADC,EACAtB,EAAE2B,WAAa,KAEjBH,EAAII,KAAK,CAACP,EAAGC,EAAGtB,EAAE6B,IAAIJ,EAAG,EAAG,GA1CpB,WA2CRH,GA5CY,GA8CdC,EAAOK,KAAKJ,GACZH,GA/Cc,GAgDdC,EAhDc,GAgDEtB,EAAEkB,OAAS,EAE7BK,EAAOO,QAAQ,SAAAN,GACbA,EAAIM,QAAQ,SAAAC,GACV/B,EAAEW,OAAOV,EAAS8B,EAAM,GAAK,MAC7B/B,EAAEgC,KAAFC,MAAAjC,EACK+B,EADJG,OAAA,CAECC,aAAmBnC,EAAEiB,MAAQ,EAAGjB,EAAE2B,WAAa,IAAKS,KACpDC,aAAmBrC,EAAEkB,OAAS,EAAGlB,EAAE2B,WAAa,IAAKS,MAvD/C,OA0DRpC,EAAE4B,OACF5B,EAAEsC,UAAFL,MAAAjC,EAAe+B,GACf/B,EAAEuC,WACFvC,EAAEwC,KAAKvC,EAAS8B,EAAM,GAAK,MAC3B/B,EAAEyC,OAAOL,GACTpC,EAAE0C,YAMKC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcjD,OAAQA,EAAQkD,KAAMJ,EAASK,8CC5E/CC,EAAAC,EAAAT,EAAA,sBAAAR,IAAAgB,EAAAC,EAAAT,EAAA,sBAAAN,IAAAc,EAAAC,EAAAT,EAAA,sBAAAU,IAAA,IAAMlB,EAAoB,SAACmB,EAAQpD,EAAOqD,GACxC,OAAOD,EAASE,KAAKnD,IAAIH,GAASqD,GAE9BlB,EAAoB,SAACiB,EAAQpD,EAAOqD,GACxC,OAAOD,EAASE,KAAKlD,IAAIJ,GAASqD,GAa9BF,EAA0B,SAC9BI,EACAC,EACAxD,EACAyD,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMxC,EAAIoC,EAAUD,KAAKnD,IAAIH,GAASyD,EAChCrC,EAAIoC,EAAUF,KAAKlD,IAAIJ,GAAS0D,EACtC,OAAOC,EAAU,CAACxC,EAAGC,GAAK,CAAED,IAAGC,MAIlBwC,IAzBU,SACvBL,EACAC,EACAxD,EACAqD,EACAM,QACG,IADHA,OAAU,GAEV,IAAMxC,EAAIc,EAAkBsB,EAASvD,EAAOqD,GACtCjC,EAAIe,EAAkBqB,EAASxD,EAAOqD,GAC5C,OAAOM,EAAU,CAACxC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-02-16-js-1457b90cd705675864bc.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { polarToCartesianX, polarToCartesianY } from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 20;\n  const MAX_Z = 400;\n\n  function getColor(angle) {\n    return p.color(\n      p.abs(p.cos(angle)) * 100,\n      p.abs(p.sin(-angle + p.PI)) * 100,\n      100\n    );\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n    p.stroke(255);\n    p.noFill();\n    p.noiseDetail(4, 0.5);\n    p.rectMode(p.CENTER);\n    p.camera(\n      -p.width / 4,\n      -p.height / 4,\n      MAX_Z,\n      -p.width / 4,\n      -p.height / 4,\n      0,\n      0,\n      1,\n      0\n    );\n  };\n\n  p.draw = function() {\n    p.background(0);\n    let x = GRID_SIZE - p.width / 2;\n    let y = GRID_SIZE - p.height / 2;\n    let points = [];\n    while (x < 0) {\n      let col = [];\n      while (y < 0) {\n        const N = p.noise(\n          x * (GRID_SIZE / 1000),\n          y * (GRID_SIZE / 1000),\n          p.frameCount / 100\n        );\n        col.push([x, y, p.map(N, 0, 1, -MAX_Z, MAX_Z)]);\n        y += GRID_SIZE;\n      }\n      points.push(col);\n      x += GRID_SIZE;\n      y = GRID_SIZE - p.height / 2;\n    }\n    points.forEach(col => {\n      col.forEach(point => {\n        p.stroke(getColor(point[2] / 100));\n        p.line(\n          ...point,\n          polarToCartesianX(-p.width / 4, p.frameCount / 100, GRID_SIZE * 10),\n          polarToCartesianY(-p.height / 4, p.frameCount / 100, GRID_SIZE * 10),\n          -MAX_Z\n        );\n        p.push();\n        p.translate(...point);\n        p.noStroke();\n        p.fill(getColor(point[2] / 100));\n        p.sphere(GRID_SIZE / 10);\n        p.pop();\n      });\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}