{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/02.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","SPEED","TWO_PI","SCALAR","random","HUE","angleA","angleB","setup","createCanvas","background","noFill","strokeWeight","colorMode","HSB","blendMode","HARD_LIGHT","draw","point","map","sin","width","height","bezier","polarToCartesian","stroke","apply","concat","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"uIAIMA,EAAS,SAASC,GACtB,IACMC,EAAQ,IAAOD,EAAEE,OACjBC,EAASH,EAAEI,OAAO,EAAG,IACrBC,EAAML,EAAEI,OAAO,KAEjBE,EAAS,EACTC,EAAS,EAEbP,EAAEQ,MAAQ,WACRR,EAAES,aAAa,IAAK,KACpBT,EAAEU,WAAW,IACbV,EAAEW,SACFX,EAAEY,aAAa,GACfZ,EAAEa,UAAUb,EAAEc,IAAK,KACnBd,EAAEe,UAAUf,EAAEgB,aAGhBhB,EAAEiB,KAAO,WACP,IAAMC,EAAQ,CACZlB,EAAEmB,IAAInB,EAAEoB,IAAId,IAAU,EAAG,EAnBd,GAmByBN,EAAEqB,MAnB3B,IAmB2C,GACtDrB,EAAEmB,IAAInB,EAAEoB,IAAIb,IAAU,EAAG,EApBd,GAoByBP,EAAEsB,OApB3B,IAoB4C,IAGnDC,EAASC,YACbxB,EAAEqB,MAAQ,EACVrB,EAAEsB,OAAS,EACXhB,EACAN,EAAEsB,OAAS,EA3BA,IA4BX,GAGFtB,EAAEyB,OACApB,EACAL,EAAEmB,IAAInB,EAAEoB,IAAId,IAAU,EAAG,EAAG,EAAG,KAAK,GACpCN,EAAEmB,IAAInB,EAAEoB,IAAIb,IAAU,EAAG,EAAG,IAAK,GAAG,GACpC,IAGFP,EAAEuB,OAAFG,MAAA1B,EACKkB,EADJS,OAEIJ,EAFJ,CAGCvB,EAAEqB,MAAQE,EAAO,GACjBvB,EAAEsB,OAASC,EAAO,GAClBvB,EAAEqB,MAAQH,EAAM,GAChBlB,EAAEsB,OAASJ,EAAM,MAGnBX,GAAUN,GADVK,GAAUL,EAAQE,GAGLH,EAAEE,QAAQF,EAAE4B,WAIdC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CACEnC,OAAQA,EACRoC,KAAMJ,EAASK,SACfC,YAAY,8EC9DhBC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK1B,IAAIwB,GAASC,GAa9BH,EAA0B,SAC9BM,EACAC,EACAL,EACAM,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUF,KAAKC,IAAIH,GAASM,EAChCI,EAAIL,EAAUH,KAAK1B,IAAIwB,GAASO,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB9B,IAzBU,SACvBwB,EACAC,EACAL,EACAC,EACAO,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASJ,EAAOC,GACtCS,EAAIb,EAAkBQ,EAASL,EAAOC,GAC5C,OAAOO,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-04-02-js-f753480fd46944f413b9.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const MARGIN = 40;\n  const SPEED = 0.05 / p.TWO_PI;\n  const SCALAR = p.random(2, 20);\n  const HUE = p.random(100);\n\n  let angleA = 0;\n  let angleB = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(64);\n    p.noFill();\n    p.strokeWeight(2);\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.HARD_LIGHT);\n  };\n\n  p.draw = function() {\n    const point = [\n      p.map(p.sin(angleA), -1, 1, MARGIN, p.width - MARGIN, true),\n      p.map(p.sin(angleB), -1, 1, MARGIN, p.height - MARGIN, true),\n    ];\n\n    const bezier = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      angleA,\n      p.height / 3 - MARGIN,\n      true\n    );\n\n    p.stroke(\n      HUE,\n      p.map(p.sin(angleA), -1, 1, 0, 100, true),\n      p.map(p.sin(angleB), -1, 1, 100, 0, true),\n      10\n    );\n\n    p.bezier(\n      ...point,\n      ...bezier,\n      p.width - bezier[0],\n      p.height - bezier[1],\n      p.width - point[0],\n      p.height - point[1]\n    );\n    angleA += SPEED / SCALAR;\n    angleB += SPEED;\n\n    if (angleA > p.TWO_PI) p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Refresh page for a different variation\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}