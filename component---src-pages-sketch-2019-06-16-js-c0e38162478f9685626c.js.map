{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/16.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","points","alpha","setup","createCanvas","background","noFill","colorMode","HSL","blendMode","OVERLAY","_loop","i","initPoints","Array","from","a","TWO_PI","d","width","length","height","aSpeed","_loop2","angle","concat","map","pt","Object","assign","draw","_loop3","pts","stroke","sin","frameCount","cos","beginShape","curveVertex","apply","polarToCartesian","forEach","_ref","j","endShape","noLoop","__webpack_exports__","_ref2","location","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_5__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-06-16-js-c0e38162478f9685626c.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const STEPS = 3;\n  const HUE = p.random(50);\n\n  let points = [[], [], []];\n  let alpha = 15;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(32);\n    p.noFill();\n    p.colorMode(p.HSL, 100);\n    p.blendMode(p.OVERLAY);\n\n    for (let i = 0; i < points.length; i++) {\n      const initPoints = Array.from(Array(3), () => ({\n        a: p.random(p.TWO_PI),\n        d: p.random(\n          (p.width / points.length) * (i + 1),\n          (p.height / points.length) * (i + 1)\n        ),\n        aSpeed: p.random(0.005, 0.01) * p.random([-1, 1]),\n      }));\n\n      for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n        points[i] = points[i].concat(\n          initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\n        );\n      }\n    }\n  };\n\n  p.draw = function() {\n    for (let i = 0; i < points.length; i++) {\n      const pts = points[i];\n\n      p.stroke(\n        p.map(p.sin(p.frameCount / (250 * (i + 1))), -1, 1, HUE, HUE + 50),\n        100,\n        p.map(p.cos(p.frameCount / (750 * (i + 1))), -1, 1, 20, 80),\n        alpha\n      );\n\n      p.beginShape();\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          pts[pts.length - 3].a,\n          pts[pts.length - 3].d,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          pts[pts.length - 2].a,\n          pts[pts.length - 2].d,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          pts[pts.length - 1].a,\n          pts[pts.length - 1].d,\n          true\n        )\n      );\n      pts.forEach(({ a, d, aSpeed }, j) => {\n        p.curveVertex(\n          ...polarToCartesian(p.width / 2, p.height / 2, a, d, true)\n        );\n        points[i][j].a += aSpeed;\n      });\n\n      p.endShape();\n    }\n\n    alpha -= 0.005;\n\n    if (alpha < 0) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}