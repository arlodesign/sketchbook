{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/28.js"],"names":["sketch","p","points","drawAThing","x","y","sort","a","b","dist","vector","POINT_COUNT","getFarthestPoint","color","stroke","line","setup","createCanvas","background","Array","fill","map","_","i","createVector","randomGaussian","width","height","draw","Y","floor","frameCount","X","xi","yi","noLoop","location","path","pathname","description"],"mappings":"mJAGMA,EAAS,SAASC,GACtB,IAEIC,EAAS,GAEb,SAASC,EAAWC,EAAGC,GAAI,IAAD,EAM1B,SAA0BD,EAAGC,GAM3B,OALAH,EAAOI,MACL,SAACC,EAAGC,GAAJ,OACEP,EAAEQ,KAAKL,EAAGC,EAAGE,EAAEG,OAAON,EAAGG,EAAEG,OAAOL,GAClCJ,EAAEQ,KAAKL,EAAGC,EAAGG,EAAEE,OAAON,EAAGI,EAAEE,OAAOL,MAE/BH,EAAOS,GAXYC,CAAiBR,EAAGC,GAAtCK,EADgB,EAChBA,OAAQG,EADQ,EACRA,MAChBZ,EAAEa,OAAOD,EAAOA,EAAOA,EAAO,IAC9BZ,EAAEc,KAAKX,EAAGC,EAAGK,EAAON,EAAGM,EAAOL,GAYhCJ,EAAEe,MAAQ,WACRf,EAAEgB,aAAa,IAAK,KACpBhB,EAAEiB,WAAW,KACbhB,EAAS,IAAIiB,MArBK,IAqBcC,OAAOC,KAAI,SAACC,EAAGC,GAAJ,MAAW,CACpDb,OAAQT,EAAEuB,aACRvB,EAAEwB,eAAexB,EAAEyB,MAAQ,EAAIzB,EAAEyB,MAxB1B,GAwB0C,GACjDzB,EAAEwB,eAAexB,EAAE0B,OAAS,EAAI1B,EAAE0B,OAzB3B,GAyB4C,IAErDd,MAAO,CAAC,IAAK,OAAa,GAAGU,EAAI,QAIrCtB,EAAE2B,KAAO,WACP,IAAMC,EAAI5B,EAAE6B,MAAM7B,EAAE8B,YAAc9B,EAAEyB,MAhCzB,KAiCLM,EAAI/B,EAAE6B,MAAM7B,EAAE8B,WAAc9B,EAAEyB,MAjCzB,GAiCyCG,GACpD,GAAIA,EAAI5B,EAAE0B,OAlCC,GAmCT,IAAK,IAAIM,EAAK,EAAGA,EAnCR,GAmCmBA,IAC1B,IAAK,IAAIC,EAAK,EAAGA,EApCV,GAoCqBA,MACxBjC,EAAE8B,WAAa9B,EAAE6B,MArCd,GAqC2B,MAC9B3B,EAAW6B,EAAK/B,EAAEyB,MAtCf,GAsC+BO,EAAIJ,EAAK5B,EAAE0B,OAtC1C,GAsC2DO,QAIpEjC,EAAEkC,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcpC,OAAQA,EAAQqC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-01-28-js-c9c76b40b17299c15785.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const GRID = 30;\n  const POINT_COUNT = 10;\n  let points = [];\n\n  function drawAThing(x, y) {\n    const { vector, color } = getFarthestPoint(x, y);\n    p.stroke(color, color, color, 32);\n    p.line(x, y, vector.x, vector.y);\n  }\n\n  function getFarthestPoint(x, y) {\n    points.sort(\n      (a, b) =>\n        p.dist(x, y, a.vector.x, a.vector.y) -\n        p.dist(x, y, b.vector.x, b.vector.y)\n    );\n    return points[POINT_COUNT - 1];\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    points = new Array(POINT_COUNT).fill().map((_, i) => ({\n      vector: p.createVector(\n        p.randomGaussian(p.width / 2, (p.width / GRID) * 3),\n        p.randomGaussian(p.height / 2, (p.height / GRID) * 3)\n      ),\n      color: [255, 255 * 0.666, 0][i % 3],\n    }));\n  };\n\n  p.draw = function() {\n    const Y = p.floor(p.frameCount / (p.width / GRID));\n    const X = p.floor(p.frameCount - (p.width / GRID) * Y);\n    if (Y < p.height / GRID) {\n      for (let xi = 0; xi < GRID; xi++) {\n        for (let yi = 0; yi < GRID; yi++) {\n          !(p.frameCount % p.floor(GRID / 13)) &&\n            drawAThing(X + (p.width / GRID) * xi, Y + (p.height / GRID) * yi);\n        }\n      }\n    } else {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n"],"sourceRoot":""}