{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/05.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","POINT_COUNT","points","colorFunctions","angle","abs","sin","cos","tan","PI","drawAThing","x","y","sort","a","b","dist","vector","getFarthestPoint","color","fill","noStroke","i","ellipse","lerp","setup","createCanvas","background","Array","map","_","createVector","polarToCartesianX","width","noise","TWO_PI","height","polarToCartesianY","random","blendMode","OVERLAY","draw","Y","floor","frameCount","X","xi","yi","noLoop","location","path","pathname","description","center","distance","Math","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","polarToCartesian"],"mappings":"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","file":"component---src-pages-sketch-2019-02-05-js-9aeb42ee3adba952456e.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { polarToCartesianX, polarToCartesianY } from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GRID = 10;\n  const POINT_COUNT = 10;\n  let points = [];\n  let drawMod = GRID;\n  const colorFunctions = [\n    angle => p.abs(p.sin(angle)) * 240,\n    angle => p.abs(p.cos(angle)) * 240,\n    angle => p.abs(p.tan(angle)) * 240,\n    angle => p.abs(p.sin(angle + p.PI)) * 240,\n    angle => p.abs(p.cos(angle + p.PI)) * 240,\n    angle => p.abs(p.tan(angle + p.PI)) * 240,\n    angle => p.abs(p.sin(-angle)) * 240,\n    angle => p.abs(p.cos(-angle)) * 240,\n    angle => p.abs(p.tan(-angle)) * 240,\n    angle => p.abs(p.sin(-angle + p.PI)) * 240,\n    angle => p.abs(p.cos(-angle + p.PI)) * 240,\n    angle => p.abs(p.tan(-angle + p.PI)) * 240,\n  ];\n\n  function drawAThing(x, y) {\n    const { vector, color } = getFarthestPoint(x, y);\n    p.fill(color);\n    p.noStroke();\n    for (let i = 0; i < p.PI; i += 0.05) {\n      p.ellipse(\n        p.lerp(x, vector.x, p.sin(i)),\n        p.lerp(y, vector.y, p.sin(i)),\n        3\n      );\n    }\n  }\n\n  function getFarthestPoint(x, y) {\n    points.sort(\n      (a, b) =>\n        p.dist(x, y, a.vector.x, a.vector.y) -\n        p.dist(x, y, b.vector.x, b.vector.y)\n    );\n    return points[POINT_COUNT - 1];\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(128);\n    points = Array(POINT_COUNT)\n      .fill()\n      .map((_, i) => ({\n        vector: p.createVector(\n          polarToCartesianX(p.width / 2, p.noise(i) * p.TWO_PI, p.height),\n          polarToCartesianY(p.height / 2, p.noise(i) * p.TWO_PI, p.height)\n        ),\n        color: p.color(\n          p.random(colorFunctions)(i),\n          p.random(colorFunctions)(i),\n          p.random(colorFunctions)(i),\n          32\n        ),\n      }));\n    p.blendMode(p.OVERLAY);\n  };\n\n  p.draw = function() {\n    const Y = p.floor(p.frameCount / (p.width / GRID));\n    const X = p.floor(p.frameCount - (p.width / GRID) * Y);\n    if (Y < p.height / GRID) {\n      for (let xi = 0; xi < GRID; xi++) {\n        for (let yi = 0; yi < GRID; yi++) {\n          !(p.frameCount % drawMod) &&\n            drawAThing(X + (p.width / GRID) * xi, Y + (p.height / GRID) * yi);\n        }\n      }\n    } else {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Be patient. Reload page for a different variation.\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}