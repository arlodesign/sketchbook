{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/11/16.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","h1","h2","RENDER","getURLParams","render","H","random","flames","Flame","this","draw","animLoop","noise1D","noise2D","d","map","height","r","l","y1","fill","lerpColor","noStroke","rect","stroke","point","setup","createCanvas","colorMode","HSL","color","a","width","floor","flamePoint","find","f","push","PI","createLoop","gif","open","noiseRadius","background","forEach","noFill","strokeWeight","arc","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-11-16-js-1dadbc82aaa70905d9df.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const H = p.random(0.5);\n\n  let flames = [];\n  let h1;\n  let h2;\n\n  function flamePoint(a) {\n    const { x, y } = polarToCartesian(\n      p.width / 2,\n      p.height * (2 / 3),\n      a,\n      p.width / 5\n    );\n    return {\n      x: p.floor(x),\n      y: p.floor(y),\n    };\n  }\n\n  class Flame {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    draw() {\n      const { noise1D, noise2D } = p.animLoop;\n      const { x, y } = this;\n      const d =\n        p.map(noise2D(x, y), -1, 1, p.height / 10, p.height / 3) +\n        (y - p.height * (2 / 3));\n      const r = p.map(noise1D(x), -1, 1, 0.001, 1);\n\n      for (let l = 0; l < 1; l += r) {\n        const y1 = y - d * l;\n        p.fill(p.lerpColor(h1, h2, l));\n        p.noStroke();\n        p.rect(x, y1, 1, -d * r);\n      }\n\n      p.stroke(255);\n      p.point(x, y - d * (r + 1) + d * (noise1D(-y) / 3));\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 1);\n\n    h1 = p.color(H, 1, 0.5, 1);\n    h2 = p.color(H, 0, 1, 0);\n\n    for (let a = 0; a < p.PI; a += 0.001) {\n      const { x, y } = flamePoint(a);\n      if (!flames.find(f => f.x === x)) {\n        flames.push(new Flame(x, y));\n      }\n    }\n\n    p.createLoop(20, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    p.background(H, 1, 0.1);\n\n    flames.forEach(f => f.draw());\n\n    p.noFill();\n    p.stroke(h1);\n    p.strokeWeight(2);\n    p.arc(\n      p.width / 2,\n      p.height * (2 / 3),\n      (p.width / 5) * 2 - 1,\n      (p.width / 5) * 2 - 1,\n      0,\n      p.PI\n    );\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}