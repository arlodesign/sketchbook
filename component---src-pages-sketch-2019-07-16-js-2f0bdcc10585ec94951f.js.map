{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/16.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","setup","pixelDensity","frameRate","createCanvas","strokeWeight","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","SCREEN","NOISE","animLoop","noise","i","push","noFill","stroke","translate","width","height","rotate","TWO_PI","theta","ellipse","polarToCartesian","map","sin","cos","pop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","y","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"ukBAMA,IAAMA,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACJL,IACFI,EAAEE,aAAa,GACfF,EAAEG,UAAU,KAGdH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,aAAa,IAEfL,EAAEM,WAAW,GAAI,CACfC,MAAKX,GAAS,CAAEY,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBV,EAAEW,KAAO,WACPX,EAAEY,UAAUZ,EAAEa,OACdb,EAAEc,WAAW,GACbd,EAAEY,UAAUZ,EAAEe,QAId,IAFA,IAAMC,EAAQhB,EAAEiB,SAASC,QAAU,EAE1BC,EAAI,EAAGA,EAAI,GAAIA,IACtBnB,EAAEoB,OACFpB,EAAEqB,SACFrB,EAAEsB,OAAO,CAAC,MAAO,QAAS,QAAQH,EAAI,IACtCnB,EAAEuB,UAAUvB,EAAEwB,MAAQ,EAAGxB,EAAEyB,OAAS,GACpCzB,EAAE0B,OAAQ1B,EAAE2B,OAAS,GAAMR,EAAInB,EAAEiB,SAASW,OAC1C5B,EAAE6B,QAAF,MAAA7B,EAAC,EACI8B,YACD,EACA,EACC9B,EAAE2B,OAAS,GAAMR,EACjBnB,EAAEwB,MAAQ,GAAMR,GACjB,IANH,QAQEhB,EAAEwB,MAAQ,EAAKxB,EAAE+B,IAAI/B,EAAEgC,IAAIhC,EAAEiB,SAASW,QAAS,EAAG,EAAGZ,EAAO,GAC5DhB,EAAEyB,OAAS,EAAKzB,EAAE+B,IAAI/B,EAAEiC,IAAIjC,EAAEiB,SAASW,QAAS,EAAG,EAAG,EAAGZ,MAE5DhB,EAAEkC,QAsBOC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQpC,OAAQA,O,kCClEpB,sCAiBMqC,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKX,IAAIM,GAASC,EAChCK,EAAIP,EAAUM,KAAKZ,IAAIO,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE,MAIlBf,IAzBU,SACvBO,EACAC,EACAC,EACAO,EACAJ,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACI,EAAQR,EAAOO,GACxC,OAAOC,EAASH,KAAKX,IAAIM,GAASO,EAYxBE,CAAkBX,EAASE,EAAOO,GACtCD,EAXkB,SAACE,EAAQR,EAAOO,GACxC,OAAOC,EAASH,KAAKZ,IAAIO,GAASO,EAUxBG,CAAkBX,EAASC,EAAOO,GAC5C,OAAOJ,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2019-07-16-js-2f0bdcc10585ec94951f.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.strokeWeight(10);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0);\n    p.blendMode(p.SCREEN);\n\n    const NOISE = p.animLoop.noise() + 1;\n\n    for (let i = 0; i < 33; i++) {\n      p.push();\n      p.noFill();\n      p.stroke([\"red\", \"green\", \"blue\"][i % 3]);\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate((p.TWO_PI / 33) * i + p.animLoop.theta);\n      p.ellipse(\n        ...polarToCartesian(\n          0,\n          0,\n          (p.TWO_PI / 33) * i,\n          (p.width / 10) * NOISE,\n          true\n        ),\n        (p.width / 2) * p.map(p.sin(p.animLoop.theta), -1, 1, NOISE, 0),\n        (p.height / 2) * p.map(p.cos(p.animLoop.theta), -1, 1, 0, NOISE)\n      );\n      p.pop();\n    }\n  };\n\n  // p.touchMoved = function() {\n  //  if (\n  //    p.mouseX >= 0 &&\n  //    p.mouseY >= 0 &&\n  //    p.mouseX <= p.width &&\n  //    p.mouseY <= p.height\n  //  ) {\n  //    return false;\n  //  }\n  // };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}