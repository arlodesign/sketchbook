{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/02/19.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","r","g","b","CF","abs","tan","PI","size","axis","a","getColor","setup","createCanvas","background","width","height","Array","from","Set","length","random","color","blendMode","DIFFERENCE","draw","i","TWO_PI","thisAngle","noFill","strokeWeight","map","stroke","ellipse","noise","noLoop","location","path","pathname"],"mappings":"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","file":"component---src-pages-sketch-2019-02-19-js-411f4d1afabcd58034ba.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const CF = [\n    angle => p.abs(p.sin(angle)) * 240,\n    angle => p.abs(p.cos(angle)) * 240,\n    angle => p.abs(p.tan(angle)) * 240,\n    angle => p.abs(p.sin(angle + p.PI)) * 240,\n    angle => p.abs(p.cos(angle + p.PI)) * 240,\n    angle => p.abs(p.tan(angle + p.PI)) * 240,\n    angle => p.abs(p.sin(-angle)) * 240,\n    angle => p.abs(p.cos(-angle)) * 240,\n    angle => p.abs(p.tan(-angle)) * 240,\n    angle => p.abs(p.sin(-angle + p.PI)) * 240,\n    angle => p.abs(p.cos(-angle + p.PI)) * 240,\n    angle => p.abs(p.tan(-angle + p.PI)) * 240,\n  ];\n  const Q = 2;\n  let distance = 0;\n  let angle = 0;\n  let size = 10;\n  let axis = {};\n  let r;\n  let g;\n  let b;\n  let a = 32;\n  let getColor = () => {};\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(192);\n    axis = {\n      x: p.width / 2,\n      y: p.height / 2,\n    };\n    while (Array.from(new Set([r, g, b])).length < 3) {\n      r = p.random(CF);\n      g = p.random(CF);\n      b = p.random(CF);\n    }\n    getColor = angle => p.color(r(angle), g(angle), b(angle), a);\n    p.blendMode(p.DIFFERENCE);\n  };\n\n  p.draw = function() {\n    for (let i = 0; i < p.TWO_PI; i += p.TWO_PI / Q) {\n      const thisAngle = angle + i;\n      const { x, y } = polarToCartesian(axis.x, axis.y, thisAngle, distance);\n      p.noFill();\n      p.strokeWeight(p.map(distance, 0, p.width, 1, Q));\n      p.stroke(getColor(thisAngle / (Q * 1.5)));\n      p.ellipse(x, y, p.noise(angle / 10, distance / 10) * size);\n    }\n    angle += 0.01;\n    distance += 0.01;\n    size += 0.05;\n    a = size > p.width ? a - 0.1 : a;\n    axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      angle / Q,\n      distance * (Q / 2)\n    );\n    if (a === 0) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n"],"sourceRoot":""}