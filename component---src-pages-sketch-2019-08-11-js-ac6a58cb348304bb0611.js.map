{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/11.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./node_modules/amp-is-object/is-object.js","webpack:///./node_modules/coordinate-systems/coordinate-systems.js","webpack:///./node_modules/amp-is-array/is-array.js","webpack:///./node_modules/amp-is-number/is-number.js","webpack:///./node_modules/amp-extend/extend.js"],"names":["RENDER","process","DEV","sketch","p","HUE","random","setup","frameRate","pixelDensity","createCanvas","WEBGL","noStroke","colorMode","HSB","width","createLoop","gif","render","open","noiseRadius","draw","_p$animLoop","animLoop","noise1D","theta","background","camera","apply","spherical","cart","concat","a","TWO_PI","_polarToCartesian","polarToCartesian","x","y","push","RGB","pointLight","sin","specularMaterial","lerp","map","translate","rotateX","cos","rotateZ","box","pop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","module","exports","obj","type","isArray","isNumber","isObject","extend","degPerRadian","PI","Coordinate","config","isRadian","isDegree","_x","_y","_z","_r","_t","_p","pos","defineProperty","this","get","set","label","coords","Error","initialType","prototype","cartesian","arguments","options","temp","cartesian2d","cartesian3d","polarToCart2d","polar","cylindrical","sphericalToCart3d","cyl","cartesian2dToPolar","cartesian3dToCylindrical","sphericalToCylindrical","pol","sph","cartesian3dToSpherical","cylindricalToSpherical","baseCoord","arrToNumeric","length","nums","num","TypeError","i","parseFloat","rt","r","t","xy","sqrt","atan2","xyz","z","x2","y2","z2","rtz","sr","sp","rtp","cr","toString","nativeIsArray","Array","call","source","prop"],"mappings":"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","file":"component---src-pages-sketch-2019-08-11-js-ac6a58cb348304bb0611.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport { spherical } from \"coordinate-systems\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 60;\n\nconst sketch = function(p) {\n  const HUE = p.random(50);\n\n  let margin;\n\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840, p.WEBGL);\n    p.noStroke();\n    p.colorMode(p.HSB, 100);\n\n    margin = p.width / 20;\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n    p.colorMode(p.HSB, 100);\n\n    p.background(HUE, 20, 1);\n    p.camera(...spherical([2500, 0, theta]).cart(), 0, 0, 0, 0, 1, 0);\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 15) {\n      const { x, y } = polarToCartesian(0, 0, a, p.width);\n      p.push();\n\n      p.colorMode(p.RGB, 255);\n      p.pointLight(\n        255,\n        255,\n        255,\n        ...spherical([5000 * noise1D(p.sin(theta)), 0, theta]).cart()\n      );\n\n      p.colorMode(p.HSB, 100);\n      p.specularMaterial(\n        p.lerp(HUE, HUE + 50, p.map(p.sin(a), -1, 1, 0, 1)),\n        p.lerp(100, 50, p.map(p.sin(a), -1, 1, 0, 1)),\n        p.map(y, -p.width, p.width, 20, 100)\n        // 90\n      );\n\n      p.translate(x, 0, y);\n      p.rotateX(noise1D(p.sin(a) + p.cos(theta)));\n      p.rotateZ(theta);\n      p.box(500, 2000, 500);\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","module.exports = function isObject(obj) {\n  var type = typeof obj;\n  return !!obj && (type === 'function' || type === 'object');\n};","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nvar isArray = require('amp-is-array');\n\nvar isNumber = require('amp-is-number');\n\nvar isObject = require('amp-is-object');\n\nvar extend = require('amp-extend');\n\nvar degPerRadian = 180 / Math.PI;\n/**\n * @constructor Coordinate\n * @description Defines object which can convert between coordinate systems.\n * It is recommended to use one of the Coodinate.STATIC_CONSTRUCTOR functions\n * to generate your first coordinate before conversions. e.g. Coodinate.spherical(...)\n * @param {Object} config\n * {\n *     label: 'type of initial coordinate',\n *     coords: {\n *         x/y/z/r/t/p: 'k-v pairs'\n *     },\n *     isDegree: Boolean\n * }\n */\n\nvar Coordinate = function Coordinate(config) {\n  var isRadian,\n      isDegree,\n      pos = {},\n      _x,\n      _y,\n      _z,\n      _r,\n      _t,\n      _p; // Override select setters/getts\n\n\n  Object.defineProperty(this, \"isRadian\", {\n    get: function get(x) {\n      return isRadian;\n    },\n    set: function set(x) {\n      isRadian = !!x;\n\n      if (isDegree !== !x) {\n        isDegree = !x;\n      } // jshint ignore:line\n\n    }\n  });\n  Object.defineProperty(this, \"isDegree\", {\n    get: function get(x) {\n      return isDegree;\n    },\n    set: function set(x) {\n      isDegree = x;\n\n      if (isRadian !== !x) {\n        isRadian = !x;\n      } // jshint ignore:line\n\n    }\n  });\n  Object.defineProperty(pos, \"cartesian2d\", {\n    get: function get(x) {\n      return [_x, _y];\n    },\n    set: function set(x) {\n      _x = x[0];\n      _y = x[1];\n    }\n  });\n  Object.defineProperty(pos, \"cartesian3d\", {\n    get: function get(x) {\n      return [_x, _y, _z];\n    },\n    set: function set(x) {\n      _x = x[0];\n      _y = x[1];\n      _z = x[2];\n    }\n  });\n  Object.defineProperty(pos, \"polar\", {\n    get: function get(x) {\n      return [_r, _t];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n    }\n  });\n  Object.defineProperty(pos, \"cylindrical\", {\n    get: function get(x) {\n      return [_r, _t, _z];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n      _z = x[2];\n    }\n  });\n  Object.defineProperty(pos, \"spherical\", {\n    get: function get(x) {\n      return [_r, _t, _p];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n      _p = x[2];\n    }\n  }); // init from config\n\n  if (config.isDegree && !config.isRadian) {\n    this.isDegree = true;\n  } else {\n    this.isRadian = true;\n  }\n\n  if (!config.label || !config.coords) {\n    throw new Error(\"no coordinate type defined\");\n  }\n\n  this.initialType = config.label;\n  this.pos = pos;\n  this.pos[config.label] = config.coords;\n};\n/**\n * @method cartesian\n * Converts current coordinate to cartesian\n * @function cartesian\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cartesian = function () {\n  return this.cart.apply(this, arguments);\n};\n/**\n * @method cart\n * Converts current coordinate to cartesian\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cart = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      return this.pos.cartesian2d;\n\n    case 'cartesian3d':\n      return this.pos.cartesian3d;\n\n    case 'polar':\n      this.pos.cartesian2d = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n      return this.pos.cartesian2d;\n\n    case 'cylindrical':\n      temp = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n      this.pos.cartesian3d = [temp[0], temp[1], this.pos.cylindrical[2]];\n      return this.pos.cartesian3d;\n\n    case 'spherical':\n      this.pos.cartesian3d = Coordinate.sphericalToCart3d(this.pos.spherical, this.isDegree);\n      return this.pos.cartesian3d;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method cylindrical\n * Converts current coordinate to cylindrical\n * @function cylindrical\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cylindrical = function () {\n  return this.cyl.apply(this, arguments);\n};\n/**\n * @method cyl\n * Converts current coordinate to cylindrical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cyl = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      this.pos.cylindrical = [temp[0], temp[1], 0];\n      return this.pos.cylindrical;\n\n    case 'cartesian3d':\n      this.pos.cylindrical = Coordinate.cartesian3dToCylindrical(this.pos.cartesian3d, this.isDegree, options.center);\n      return this.pos.cylindrical;\n\n    case 'polar':\n      temp = this.pos.polar;\n      return [temp[0], temp[1], 0];\n\n    case 'cylindrical':\n      return this.pos.cylindrical;\n\n    case 'spherical':\n      this.pos.cylindrical = Coordinate.sphericalToCylindrical(this.pos.spherical, this.isDegree);\n      return this.pos.cylindrical;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method pol\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.pol = function () {\n  return this.polar.apply(this, arguments);\n};\n/**\n * @method polar\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.polar = function (options) {\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      this.pos.polar = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      return this.pos.polar;\n\n    case 'polar':\n      return this.pos.polar;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method spherical\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.spherical = function () {\n  return this.sph.apply(this, arguments);\n};\n/**\n * @method sph\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.sph = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      this.pos.spherical = [temp[0], temp[1], 0];\n      return this.pos.spherical;\n\n    case 'cartesian3d':\n      this.pos.spherical = Coordinate.cartesian3dToSpherical(this.pos.cartesian3d, this.isDegree, options.center);\n      return this.pos.spherical;\n\n    case 'polar':\n      temp = this.pos.polar;\n      return [temp[0], temp[1], 0];\n\n    case 'cylindrical':\n      this.pos.spherical = Coordinate.cylindricalToSpherical(this.pos.cylindrical, this.isDegree);\n      return this.pos.spherical;\n\n    case 'spherical':\n      return this.pos.spherical;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n}; ///\n/// Static Constructor Functions\n///\n\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cartesian = function (x) {\n  return Coordinate.cart(x);\n};\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cart = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length < 2 || options.coords.length > 3) {\n      throw new Error('expected exactly 2 or exactly 3 cartesian options');\n    }\n\n    baseCoord = {\n      label: 'cartesian2d',\n      options: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n\n    if (options.coords.length === 2) {\n      return new Coordinate(baseCoord);\n    }\n\n    baseCoord.label = 'cartesian3d';\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [x,y,(z?)] coords');\n};\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cylindrical = function (x) {\n  return Coordinate.cyl(x);\n};\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cyl = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 3) {\n      throw new Error('expected exactly 3 params [r, t, z]');\n    }\n\n    baseCoord = {\n      label: 'cylindrical',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [r, t, z] coords');\n};\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.polar = function (x) {\n  return Coordinate.pol(x);\n};\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.pol = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 2) {\n      throw new Error('expected exactly 2 params [r, t]');\n    }\n\n    baseCoord = {\n      label: 'polar',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected array of [r, t] options');\n};\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.spherical = function (options) {\n  return Coordinate.sph(options);\n};\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.sph = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 3) {\n      throw new Error('expected exactly 3 params [r, t, p]');\n    }\n\n    baseCoord = {\n      label: 'spherical',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [r, t, p] coords');\n};\n/**\n * Mutates an array of number-like looking values to purely numeric array\n * @example\n * [5, '2.4', '0'] => [5, 2.4, 0]\n * @param  {Array} nums\n * @return {undefined}\n */\n\n\nCoordinate.arrToNumeric = function (nums) {\n  var num;\n\n  if (!isArray(nums)) {\n    throw new TypeError(\"expected array of number-like values\");\n  }\n\n  for (var i = nums.length - 1; i >= 0; i--) {\n    num = nums[i];\n\n    if (typeof num === 'string') {\n      num = parseFloat(num);\n    }\n\n    if (!isNumber(num)) {\n      throw new TypeError(num + ' not numeric or numeric-like');\n    }\n  }\n};\n/**\n * Convert polar to 2d cartesian coordinates\n * @param  {Array}   rt        [radis, theta]\n * @param  {Boolean} isDegree specifies units\n * @return {Array}  [x, y]\n */\n\n\nCoordinate.polarToCart2d = function (rt, isDegree) {\n  var r, t, x, y;\n  r = rt[0];\n  t = rt[1];\n\n  if (isDegree) {\n    t = t * (1 / degPerRadian);\n  }\n\n  x = r * Math.cos(t);\n  y = r * Math.sin(t);\n  return [x, y];\n};\n/**\n * Convert cartesian 2d to polar coordinates\n * @param  {Array}  xy\n * @param {Boolean=} isDegree overrides default radian theta assumption\n * @param  {Array=} center [x, y] coords of center of circle.  Defaults to [0, 0],\n * however may be offset.  Note. Such functionality not supported yet for converting\n * polar to cartesian\n * @return {Array}  [radius, theta]\n */\n\n\nCoordinate.cartesian2dToPolar = function (xy, isDegree, center) {\n  var x, y, r, t;\n\n  if (!isArray(xy) && xy.length !== 2) {\n    throw new TypeError('expected [x, y] xy array');\n  }\n\n  x = xy[0];\n  y = xy[1];\n\n  if (center && !isArray(center) && center.length !== 2) {\n    throw new TypeError('expected [x, y] center array');\n  }\n\n  if (center) {\n    x = x - center[0];\n    y = y - center[1];\n  }\n\n  r = Math.sqrt(x * x + y * y);\n  t = Math.atan2(y, x);\n\n  if (isDegree) {\n    t = t * degPerRadian;\n  }\n\n  return [r, t];\n};\n/**\n * Convert 3d cartesian to 3d cylindrical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y] coords of center of circle\n * @return {Array}      [radius, theta, z]\n */\n\n\nCoordinate.cartesian3dToCylindrical = function (xyz, isDegree, center) {\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      rt;\n  rt = Coordinate.cartesian2dToPolar([x, y], isDegree, center);\n  return [rt[0], rt[1], z];\n};\n/**\n * Convert 3d cartesian to 3d spherical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y, z] coords of center of circle\n * @return {Array}      [radius, theta, phi]\n */\n\n\nCoordinate.cartesian3dToSpherical = function (xyz, isDegree, center) {\n  if (center && center.length !== 3) {\n    throw new Error('expected center value to have [x, y, z] coords' + 'for locating sphere center');\n  }\n\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      x2,\n      y2,\n      z2,\n      r,\n      t,\n      p;\n\n  if (center) {\n    x = x - center[0];\n    y = y - center[1];\n    z = z - center[2];\n  }\n\n  x2 = x * x;\n  y2 = y * y;\n  z2 = z * z;\n  r = Math.sqrt(x2 + y2 + z2);\n\n  if (!r) {\n    p = t = 0;\n  } else {\n    t = Math.atan2(y, x);\n    p = Math.atan2(Math.sqrt(x2 + y2), z);\n\n    if (isDegree) {\n      t = t * degPerRadian;\n      p = p * degPerRadian;\n    }\n  }\n\n  return [r, t, p];\n};\n/**\n * Convert a cylindrical to a spherical coordinates\n * @param  {Array}   rtz\n * @param  {Boolean} isDegree\n * @return {Array}   [radius, theta, phi]\n */\n\n\nCoordinate.cylindricalToSpherical = function (rtz, isDegree) {\n  var r = rtz[0],\n      t = rtz[1],\n      z = rtz[2];\n  var sr, sp; // sphere radius, sphere theta...\n\n  if (isDegree) {\n    t = t / degPerRadian;\n  }\n\n  sr = Math.sqrt(r * r + z * z);\n  sp = Math.atan2(r, z);\n\n  if (isDegree) {\n    sp = sp * degPerRadian;\n    t = t * degPerRadian;\n  }\n\n  return [sr, t, sp];\n};\n/**\n * Convert spherical to a cartesian coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\n\n\nCoordinate.sphericalToCart3d = function (rtp, isDegree) {\n  var r = rtp[0],\n      t = rtp[1],\n      p = rtp[2],\n      x,\n      y,\n      z;\n\n  if (isDegree) {\n    t = t / degPerRadian;\n    p = p / degPerRadian;\n  }\n\n  x = r * Math.sin(p) * Math.cos(t);\n  y = r * Math.sin(p) * Math.sin(t);\n  z = r * Math.cos(p);\n  return [x, y, z];\n};\n/**\n * Convert spherical to cylindrical coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\n\n\nCoordinate.sphericalToCylindrical = function (rtp, isDegree) {\n  var r = rtp[0],\n      t = rtp[1],\n      p = rtp[2],\n      cr,\n      z;\n\n  if (isDegree) {\n    t = t / degPerRadian;\n    p = p / degPerRadian;\n  }\n\n  cr = r * Math.sin(p);\n  z = r * Math.cos(p);\n\n  if (isDegree) {\n    t = t * degPerRadian;\n    p = p * degPerRadian;\n  }\n\n  return [cr, t, z];\n};\n\nmodule.exports = Coordinate;","require(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nvar toString = Object.prototype.toString;\nvar nativeIsArray = Array.isArray;\n\nmodule.exports = nativeIsArray || function isArray(obj) {\n  return toString.call(obj) === '[object Array]';\n};","require(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nvar toString = Object.prototype.toString;\n\nmodule.exports = function isNumber(obj) {\n  return toString.call(obj) === '[object Number]';\n};","var isObject = require('amp-is-object');\n\nmodule.exports = function (obj) {\n  if (!isObject(obj)) return obj;\n  var source, prop;\n\n  for (var i = 1, length = arguments.length; i < length; i++) {\n    source = arguments[i];\n\n    for (prop in source) {\n      obj[prop] = source[prop];\n    }\n  }\n\n  return obj;\n};"],"sourceRoot":""}