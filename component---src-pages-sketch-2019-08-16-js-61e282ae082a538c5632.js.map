{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/16.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","setup","pixelDensity","frameRate","createCanvas","noStroke","colorMode","HSB","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","HARD_LIGHT","_p$animLoop","animLoop","noise1D","theta","i","PI","a","TWO_PI","fill","map","cos","circle","apply","polarToCartesian","width","height","sin","concat","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"+IAKMA,UAASC,GAAYC,MAAO,GAE5BC,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACRD,EAAEE,aAAa,GAEXN,GACFI,EAAEG,UAAU,IAGdH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,WACFL,EAAEM,UAAUN,EAAEO,IAAK,GAEnBP,EAAEQ,WAAW,GAAI,CACfC,MAAKb,GAAS,CAAEc,QAAQ,EAAOC,MAAM,GACrCC,YAAa,KAIjBZ,EAAEa,KAAO,WACPb,EAAEc,UAAUd,EAAEe,OACdf,EAAEgB,WAAW,KACbhB,EAAEc,UAAUd,EAAEiB,YAId,IAPkB,IAAAC,EAKSlB,EAAEmB,SAArBC,EALUF,EAKVE,QAASC,EALCH,EAKDG,MAERC,EAAItB,EAAEuB,GAAID,EAAI,EAAGA,GAAKtB,EAAEuB,GAAK,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIxB,EAAEyB,OAAQD,GAAKxB,EAAEyB,OAAS,EAC5CzB,EAAE0B,KACA1B,EAAE2B,IAAIP,EAAQpB,EAAE4B,IAAIJ,EAAIH,EAAQC,KAAM,EAAG,EAAG,EAAG,GAC/C,GACA,IACAtB,EAAE2B,IAAIL,EAAGtB,EAAEuB,GAAI,EAAG,EAAG,KAEvBvB,EAAE6B,OAAFC,MAAA9B,EACK+B,YACD/B,EAAEgC,MAAQ,EACVhC,EAAEiC,OAAS,EACXT,EAAIH,EAAQC,EACZtB,EAAE2B,IAAIP,EAAQpB,EAAEkC,IAAIb,EAAQC,KAAM,EAAG,EAAG,EAAGtB,EAAEgC,MAAQ,IACrD,GANHG,OAAA,CAQCnC,EAAE2B,IAAIL,EAAGtB,EAAEuB,GAAI,EAAG,IAAM,OAG1BvB,EAAE0B,KAAK1B,EAAE2B,IAAIP,EAAQpB,EAAE4B,IAAIJ,EAAIH,KAAU,EAAG,EAAG,EAAG,GAAI,GAAI,KAC1DrB,EAAE6B,OAAFC,MAAA9B,EACK+B,YACD/B,EAAEgC,MAAQ,EACVhC,EAAEiC,OAAS,EACXT,EAAIH,EACJrB,EAAE2B,IAAIP,EAAQpB,EAAEkC,IAAIb,KAAU,EAAG,EAAG,EAAGrB,EAAEgC,MAAQ,IACjD,GANHG,OAAA,CAQC,QAOKC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAc1C,OAAQA,EAAQ2C,KAAMJ,EAASK,SAAUC,YAAY,wCCpErEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKzB,IAAIuB,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKnB,IAAIiB,GAASC,GAa9BH,EAA0B,SAC9BK,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUD,KAAKzB,IAAIuB,GAASK,EAChCI,EAAIL,EAAUF,KAAKnB,IAAIiB,GAASM,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB7B,IAzBU,SACvBuB,EACAC,EACAJ,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASH,EAAOC,GACtCQ,EAAIZ,EAAkBO,EAASJ,EAAOC,GAC5C,OAAOM,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-08-16-js-61e282ae082a538c5632.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.pixelDensity(1);\n\n    if (RENDER) {\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.colorMode(p.HSB, 1);\n\n    p.createLoop(15, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.HARD_LIGHT);\n\n    const { noise1D, theta } = p.animLoop;\n\n    for (let i = p.PI; i > 0; i -= p.PI / 20) {\n      for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 3) {\n        p.fill(\n          p.map(noise1D(p.cos(a + theta - i)), -1, 1, 0, 1),\n          50,\n          100,\n          p.map(i, p.PI, 0, 0, 0.5)\n        );\n        p.circle(\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            a + theta - i,\n            p.map(noise1D(p.sin(theta - i)), -1, 1, 0, p.width / 3),\n            true\n          ),\n          p.map(i, p.PI, 0, 1000, 10)\n        );\n\n        p.fill(p.map(noise1D(p.cos(a + theta)), -1, 1, 0, 1), 50, 100);\n        p.circle(\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            a + theta,\n            p.map(noise1D(p.sin(theta)), -1, 1, 0, p.width / 3),\n            true\n          ),\n          10\n        );\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}