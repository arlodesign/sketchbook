{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/08/16.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","RENDER","process","DEV","sketch","p","setup","pixelDensity","frameRate","createCanvas","noStroke","colorMode","HSB","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","HARD_LIGHT","animLoop","noise1D","theta","i","PI","a","TWO_PI","fill","map","circle","width","height","SketchPage"],"mappings":"6FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,qhBCTjC,IAAMO,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACRD,EAAEE,aAAa,GAEXN,GACFI,EAAEG,UAAU,IAGdH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,WACFL,EAAEM,UAAUN,EAAEO,IAAK,GAEnBP,EAAEQ,WAAW,GAAI,CACfC,MAAKb,GAAS,CAAEc,QAAQ,EAAOC,MAAM,GACrCC,YAAa,KAIjBZ,EAAEa,KAAO,WACPb,EAAEc,UAAUd,EAAEe,OACdf,EAAEgB,WAAW,KACbhB,EAAEc,UAAUd,EAAEiB,YAId,IAPkB,MAKSjB,EAAEkB,SAArBC,EALU,EAKVA,QAASC,EALC,EAKDA,MAERC,EAAIrB,EAAEsB,GAAID,EAAI,EAAGA,GAAKrB,EAAEsB,GAAK,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIvB,EAAEwB,OAAQD,GAAKvB,EAAEwB,OAAS,EAC5CxB,EAAEyB,KACAzB,EAAE0B,IAAIP,EAAQnB,EAAEZ,IAAImC,EAAIH,EAAQC,KAAM,EAAG,EAAG,EAAG,GAC/C,GACA,IACArB,EAAE0B,IAAIL,EAAGrB,EAAEsB,GAAI,EAAG,EAAG,KAEvBtB,EAAE2B,OAAF,MAAA3B,EAAC,EACIT,YACDS,EAAE4B,MAAQ,EACV5B,EAAE6B,OAAS,EACXN,EAAIH,EAAQC,EACZrB,EAAE0B,IAAIP,EAAQnB,EAAEV,IAAI8B,EAAQC,KAAM,EAAG,EAAG,EAAGrB,EAAE4B,MAAQ,IACrD,IANH,QAQC5B,EAAE0B,IAAIL,EAAGrB,EAAEsB,GAAI,EAAG,IAAM,OAG1BtB,EAAEyB,KAAKzB,EAAE0B,IAAIP,EAAQnB,EAAEZ,IAAImC,EAAIH,KAAU,EAAG,EAAG,EAAG,GAAI,GAAI,KAC1DpB,EAAE2B,OAAF,MAAA3B,EAAC,EACIT,YACDS,EAAE4B,MAAQ,EACV5B,EAAE6B,OAAS,EACXN,EAAIH,EACJpB,EAAE0B,IAAIP,EAAQnB,EAAEV,IAAI8B,KAAU,EAAG,EAAG,EAAGpB,EAAE4B,MAAQ,IACjD,IANH,QAQC,QAaKE,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ/B,OAAQA","file":"component---src-pages-sketch-2019-08-16-js-b1604a4e6e068b65c08f.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.pixelDensity(1);\n\n    if (RENDER) {\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.colorMode(p.HSB, 1);\n\n    p.createLoop(15, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.HARD_LIGHT);\n\n    const { noise1D, theta } = p.animLoop;\n\n    for (let i = p.PI; i > 0; i -= p.PI / 20) {\n      for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 3) {\n        p.fill(\n          p.map(noise1D(p.cos(a + theta - i)), -1, 1, 0, 1),\n          50,\n          100,\n          p.map(i, p.PI, 0, 0, 0.5)\n        );\n        p.circle(\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            a + theta - i,\n            p.map(noise1D(p.sin(theta - i)), -1, 1, 0, p.width / 3),\n            true\n          ),\n          p.map(i, p.PI, 0, 1000, 10)\n        );\n\n        p.fill(p.map(noise1D(p.cos(a + theta)), -1, 1, 0, 1), 50, 100);\n        p.circle(\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            a + theta,\n            p.map(noise1D(p.sin(theta)), -1, 1, 0, p.width / 3),\n            true\n          ),\n          10\n        );\n      }\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}