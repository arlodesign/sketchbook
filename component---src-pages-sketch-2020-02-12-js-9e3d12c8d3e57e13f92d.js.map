{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2020/02/12.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","RENDER","getURLParams","render","H","random","coord","setup","frameRate","noSmooth","createCanvas","background","colorMode","HSB","noFill","createLoop","gif","open","noiseRadius","draw","animLoop","progress","theta","noise1D","bezierPoints","push","width","height","bezierPoint","map","cp","stroke","length","curve","slice","flat","frameCount","console","info","floor","DURATION","noLoop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,i6BCnBjC,IAAME,EAAS,SAASC,GACtB,IAAMC,EAASD,EAAEE,eAAeC,OAG1BC,EAAIJ,EAAEK,SAERC,EAAQ,GAEZN,EAAEO,MAAQ,WACRP,EAAEQ,UANS,IAOXR,EAAES,WACFT,EAAEU,aAAa,IAAK,KACpBV,EAAEW,WAAW,GACbX,EAAEY,UAAUZ,EAAEa,IAAK,GACnBb,EAAEc,SACFd,EAAEe,WAba,IAaQ,CACrBC,MAAKf,GAAS,CAAEE,QAAQ,EAAOc,MAAM,GACrCC,YAAa,MAIjBlB,EAAEmB,KAAO,WAAY,IAAD,EACmBnB,EAAEoB,SAA/BC,EADU,EACVA,SAAUC,EADA,EACAA,MAAOC,EADP,EACOA,QACrBC,EAAe,GACnBA,EAAaC,KAAK,CAAW,GAAVzB,EAAE0B,OAAc1B,EAAE2B,OAAS3B,EAAE0B,OAAS,IACzDF,EAAaC,KACX3B,YACY,GAAVE,EAAE0B,OACD1B,EAAE2B,OAAS3B,EAAE0B,OAAS,EACvBJ,GAAS,IAAsB,IAAhBC,EAAQ,MACvBvB,EAAE0B,MAAQH,EAAQ,MAClB,IAGJC,EAAaC,KACX3B,YACY,GAAVE,EAAE0B,OACD1B,EAAE2B,OAAS3B,EAAE0B,OAAS,EAAI1B,EAAE0B,OAC5BJ,GAAS,IAAsB,IAAhBC,EAAQ,MACxBvB,EAAE0B,OAASH,EAAQ,MACnB,IAGJC,EAAaC,KAAK,CAAW,GAAVzB,EAAE0B,OAAc1B,EAAE2B,OAAS3B,EAAE0B,OAAS,EAAI1B,EAAE0B,QAE/DpB,EAAMmB,KAAK,CACTzB,EAAE4B,YAAF,MAAA5B,EAAC,EAAgBwB,EAAaK,KAAI,SAAAC,GAAE,OAAIA,EAAG,OAA1C,QAA+CT,KAChDrB,EAAE4B,YAAF,MAAA5B,EAAC,EAAgBwB,EAAaK,KAAI,SAAAC,GAAE,OAAIA,EAAG,OAA1C,QAA+CT,OAGlDrB,EAAE+B,OAAO3B,EAAG,EAAG,GAEXE,EAAM0B,OAAS,GACjBhC,EAAEiC,MAAF,MAAAjC,EAAC,EAAUM,EAAM4B,OAAO,GAAGC,SAG7BnC,EAAEoC,WAAa,KAAQ,GAAKC,QAAQC,KAAQtC,EAAEuC,MAAiB,IAAXlB,GAAxB,KACvBpB,GAA2BuC,OAAjBxC,EAAEoC,aACfC,QAAQC,KAAK,QACbtC,EAAEyC,YAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc3C,OAAQA,EAAQ4C,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-02-12-js-9e3d12c8d3e57e13f92d.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 120;\n  const RATE = 60;\n  const H = p.random();\n\n  let coord = [];\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.noSmooth();\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSB, 1);\n    p.noFill();\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    const { progress, theta, noise1D } = p.animLoop;\n    let bezierPoints = [];\n    bezierPoints.push([p.width * 0.1, (p.height - p.width) / 2]);\n    bezierPoints.push(\n      polarToCartesian(\n        p.width * 0.1,\n        (p.height - p.width) / 2,\n        theta * (400 + noise1D(0.05) * 100),\n        p.width * noise1D(0.07),\n        true\n      )\n    );\n    bezierPoints.push(\n      polarToCartesian(\n        p.width * 0.9,\n        (p.height - p.width) / 2 + p.width,\n        -theta * (400 + noise1D(0.06) * 100),\n        p.width * -noise1D(0.08),\n        true\n      )\n    );\n    bezierPoints.push([p.width * 0.9, (p.height - p.width) / 2 + p.width]);\n\n    coord.push([\n      p.bezierPoint(...bezierPoints.map(cp => cp[0]), progress),\n      p.bezierPoint(...bezierPoints.map(cp => cp[1]), progress),\n    ]);\n\n    p.stroke(H, 1, 1);\n\n    if (coord.length > 3) {\n      p.curve(...coord.slice(-4).flat());\n    }\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (!RENDER && p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}