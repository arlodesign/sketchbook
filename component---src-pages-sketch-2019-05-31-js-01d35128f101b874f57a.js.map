{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/31.js"],"names":["sketch","p","WIDTH","GRID_SIZE","RULES","random","row","this","cells","Array","from","length","draw","y","forEach","c","i","fill","square","update","newState","str","String","push","setup","createCanvas","background","noStroke","frameCount","noLoop","SketchPage"],"mappings":"kLAIMA,EAAS,SAASC,GACtB,IAAMC,EAAQ,IAERC,EAAY,GACZC,EAAQ,CACZ,IAAOH,EAAEI,OAAO,CAAC,EAAG,IACpB,IAAOJ,EAAEI,OAAO,CAAC,EAAG,IACpB,IAAOJ,EAAEI,OAAO,CAAC,EAAG,IACpB,IAAOJ,EAAEI,OAAO,CAAC,EAAG,IACpB,MAAOJ,EAAEI,OAAO,CAAC,EAAG,IACpB,MAAOJ,EAAEI,OAAO,CAAC,EAAG,IACpB,MAAOJ,EAAEI,OAAO,CAAC,EAAG,IACpB,MAAOJ,EAAEI,OAAO,CAAC,EAAG,KA4BhBC,EAAM,IAxCa,WAgBvB,aACEC,KAAKC,MAAQC,MAAMC,KAAK,CAAEC,OAAQT,EAAQC,IAAa,kBACrDF,EAAEI,OAAO,CAAC,EAAG,OAEfE,KAAKC,MAAMD,KAAKC,MAAMG,OAAS,GAAK,EApBf,2BAsBvBC,KAAA,SAAKC,GACHN,KAAKC,MAAMM,SAAQ,SAACC,EAAGC,GACrBf,EAAEgB,KAAKF,EAAI,EAAI,KACfd,EAAEiB,OAAOF,EAAIb,EAAWU,EAAIV,EAAWA,OAzBpB,EA4BvBgB,OAAA,WAAU,IAAD,OACHC,EAAW,GACfb,KAAKC,MAAMM,SAAQ,SAACC,EAAGC,GACrB,IAAIK,EAAY,IAANL,EAAU,IAAMM,OAAO,EAAKd,MAAMQ,EAAI,IAChDK,GAAOC,OAAO,EAAKd,MAAMQ,IACzBK,GAAOL,IAAM,EAAKR,MAAMG,OAAS,EAAI,IAAMW,OAAO,EAAKd,MAAMQ,EAAI,IACjEI,EAASG,KAAKnB,EAAMiB,OAEtBd,KAAKC,MAAQY,GApCQ,MA0CzBnB,EAAEuB,MAAQ,WACRvB,EAAEwB,aAAavB,EAzCF,KA0CbD,EAAEyB,WAAW,KACbzB,EAAE0B,YAGJ1B,EAAEW,KAAO,WACPN,EAAIM,KAAKX,EAAE2B,WAAa,GACxBtB,EAAIa,SACJlB,EAAE2B,WAAazB,EAjDF,KAiDwBF,EAAE4B,WAc5BC,UAVI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ9B,OAAQA,IAChB","file":"component---src-pages-sketch-2019-05-31-js-01d35128f101b874f57a.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\n\nconst sketch = function(p) {\n  const WIDTH = 660;\n  const HEIGHT = 840;\n  const GRID_SIZE = 10;\n  const RULES = {\n    \"111\": p.random([0, 1]),\n    \"110\": p.random([0, 1]),\n    \"101\": p.random([0, 1]),\n    \"100\": p.random([0, 1]),\n    \"011\": p.random([0, 1]),\n    \"010\": p.random([0, 1]),\n    \"001\": p.random([0, 1]),\n    \"000\": p.random([0, 1]),\n  };\n\n  class Row {\n    constructor() {\n      this.cells = Array.from({ length: WIDTH / GRID_SIZE }, () =>\n        p.random([0, 1])\n      );\n      this.cells[this.cells.length - 1] = 1;\n    }\n    draw(y) {\n      this.cells.forEach((c, i) => {\n        p.fill(c ? 0 : 255);\n        p.square(i * GRID_SIZE, y * GRID_SIZE, GRID_SIZE);\n      });\n    }\n    update() {\n      let newState = [];\n      this.cells.forEach((c, i) => {\n        let str = i === 0 ? \"1\" : String(this.cells[i - 1]);\n        str += String(this.cells[i]);\n        str += i === this.cells.length - 1 ? \"1\" : String(this.cells[i + 1]);\n        newState.push(RULES[str]);\n      });\n      this.cells = newState;\n    }\n  }\n\n  const row = new Row();\n\n  p.setup = function() {\n    p.createCanvas(WIDTH, HEIGHT);\n    p.background(255);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    row.draw(p.frameCount - 1);\n    row.update();\n    p.frameCount * GRID_SIZE > HEIGHT && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n    <p>\n      Randomly generated cellular automata. Some of these will look, well, bad.\n      Just keep refreshing the page until you see something you like.\n    </p>\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}