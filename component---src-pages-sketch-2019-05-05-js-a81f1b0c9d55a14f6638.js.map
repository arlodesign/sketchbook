{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/05.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","size","prevPoint","outerAngle","innerAngle","PI","outerSpeed","SPEED","TWO_PI","innerSpeed","setup","createCanvas","background","noFill","strokeWeight","width","draw","thisFocalPoint","polarToCartesian","height","map","thisPoint","noise","frameCount","lerpLine","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","distance","center","polarToCartesianX","polarToCartesianY","x1","y1","x2","y2","rate","showFirstDot","Error","l","random","point","lerp"],"mappings":"ukBAMA,IAAMA,EAAS,SAASC,GACtB,IAEIC,EACAC,EACAC,EAAa,EACbC,EAAaJ,EAAEK,GACfC,EAAaC,KAAcP,EAAEQ,OAC7BC,EAPU,EAOWT,EAAEQ,OAE3BR,EAAEU,MAAQ,WACRV,EAAEW,aAAa,IAAK,KACpBX,EAAEY,WAAW,KACbZ,EAAEa,SACFb,EAAEc,aAAa,IACfb,EAAiB,GAAVD,EAAEe,OAGXf,EAAEgB,KAAO,WACP,IAAMC,EAAiBC,YACrBlB,EAAEe,MAAQ,EACVf,EAAEmB,OAAS,EACXhB,EACAH,EAAEoB,IAAIjB,EAAY,EAAc,EAAXH,EAAEQ,OAAYP,EAAM,IACzC,GAGIoB,EAAYH,IAAgB,WAAhB,IACbD,GADa,QAEhBb,GACCD,EAAaH,EAAEQ,OACZR,EAAEoB,IAAIjB,EAAYH,EAAEQ,OAAmB,EAAXR,EAAEQ,OAAYP,EAAM,GAChDD,EAAEoB,IAAIjB,EAAY,EAAGH,EAAEQ,OAAQ,EAAGP,IACpCD,EAAEsB,MAAM,IAAM,IAAMtB,EAAEuB,WAAa,MACrC,KAEErB,GACFsB,IAAQ,WAAR,GAASxB,GAAT,SAAeqB,GAAf,EAA6BnB,GAA7B,CAAwCF,EAAEsB,MAAF,MAAAtB,EAAC,EAAUiB,OAErDf,EAAYmB,EAEZjB,GAAcK,GADdN,GAAcG,GAEc,EAAXN,EAAEQ,QAAYR,EAAEyB,WAUtBC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ3B,OAAQA,O,kCCtDpB,sCAiBM4B,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBnB,IAzBU,SACvBU,EACAC,EACAC,EACAS,EACAN,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACM,EAAQV,EAAOS,GACxC,OAAOC,EAASL,KAAKC,IAAIN,GAASS,EAYxBE,CAAkBb,EAASE,EAAOS,GACtCF,EAXkB,SAACG,EAAQV,EAAOS,GACxC,OAAOC,EAASL,KAAKG,IAAIR,GAASS,EAUxBG,CAAkBb,EAASC,EAAOS,GAC5C,OAAON,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,oCCflB,aAASrC,EAAG2C,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChBhD,EAAEmD,SAAWD,GAAKlD,EAAEoD,MAAMpD,EAAEqD,KAAKV,EAAIE,EAAIK,GAAIlD,EAAEqD,KAAKT,EAAIE,EAAII","file":"component---src-pages-sketch-2019-05-05-js-a81f1b0c9d55a14f6638.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const SPEED = 1;\n\n  let size;\n  let prevPoint;\n  let outerAngle = 0;\n  let innerAngle = p.PI;\n  let outerSpeed = SPEED / 250 / p.TWO_PI;\n  let innerSpeed = SPEED / p.TWO_PI;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.noFill();\n    p.strokeWeight(0.5);\n    size = p.width * 0.4;\n  };\n\n  p.draw = function() {\n    const thisFocalPoint = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      outerAngle,\n      p.map(outerAngle, 0, p.TWO_PI * 2, size, 0),\n      true\n    );\n\n    const thisPoint = polarToCartesian(\n      ...thisFocalPoint,\n      innerAngle,\n      (outerAngle > p.TWO_PI\n        ? p.map(outerAngle, p.TWO_PI, p.TWO_PI * 2, size, 0)\n        : p.map(outerAngle, 0, p.TWO_PI, 0, size)) *\n        p.noise(0.01, 0.02, p.frameCount / 2000),\n      true\n    );\n    if (prevPoint) {\n      lerpLine(p, ...thisPoint, ...prevPoint, p.noise(...thisFocalPoint));\n    }\n    prevPoint = thisPoint;\n    outerAngle += outerSpeed;\n    innerAngle += innerSpeed;\n    if (outerAngle > p.TWO_PI * 2) p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}