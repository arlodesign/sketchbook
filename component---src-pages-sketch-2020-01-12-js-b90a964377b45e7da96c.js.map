{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2020/01/12.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","sketch","p","HUE","random","setup","frameRate","createCanvas","noSmooth","noFill","background","strokeWeight","blendMode","HARD_LIGHT","colorMode","HSL","createLoop","noiseRadius","draw","animLoop","theta","noise","noise1D","translate","width","height","abs","rotate","maxSize","map","points","Array","fill","_","i","TWO_PI","dist","ease","maxDist","max","stroke","beginShape","forEach","curveVertex","j","endShape","frameCount","console","log","DURATION","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-01-12-js-b90a964377b45e7da96c.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport { easeOutQuint as ease } from \"~lib/easing\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const DURATION = 120;\n  const RATE = 60;\n  const POINT_COUNT = 6;\n  const HUE = p.random();\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.noSmooth();\n    p.noFill();\n    p.background(64);\n    p.strokeWeight(2);\n    p.blendMode(p.HARD_LIGHT);\n    p.colorMode(p.HSL, 1);\n    p.createLoop(DURATION, {\n      noiseRadius: 2,\n    });\n  };\n\n  p.draw = function() {\n    const { theta, noise, noise1D } = p.animLoop;\n\n    p.translate(\n      ...polarToCartesian(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          theta,\n          p.width / 10,\n          true\n        ),\n        theta * 5,\n        (p.width / 2) * p.abs(noise1D(0.04)),\n        true\n      )\n    );\n    p.rotate(theta * 4);\n\n    const maxSize = p.map(noise1D(0.05), -1, 1, p.width / 6, p.width / 4);\n\n    let points = Array(POINT_COUNT)\n      .fill()\n      .map((_, i) => ({\n        angle: p.map(\n          noise1D(0.06),\n          -1,\n          1,\n          (p.TWO_PI / POINT_COUNT) * i,\n          (p.TWO_PI / POINT_COUNT) * (i + 1)\n        ),\n        dist:\n          i % 2\n            ? ease(p.abs(noise1D(0.07))) * (maxSize / 3)\n            : ease(p.abs(noise1D(0.07))) * maxSize,\n      }));\n\n    const maxDist = Math.max(...points.map(({ dist }) => dist));\n\n    for (let i = 1; i > 0; i -= 40 / maxDist) {\n      p.stroke(\n        HUE,\n        p.map(p.sin(theta), -1, 1, 0.5, 1),\n        (noise() + 1) / 2,\n        (1 - i) * p.map(-p.cos(theta * 3), -1, 1, 0, 1)\n      );\n\n      p.beginShape();\n\n      points.forEach(({ angle, dist }) =>\n        p.curveVertex(...polarToCartesian(0, 0, angle, i * dist, true))\n      );\n      for (let j = 0; j < 3; j++) {\n        p.curveVertex(\n          ...polarToCartesian(0, 0, points[j].angle, i * points[j].dist, true)\n        );\n      }\n\n      p.endShape();\n    }\n\n    p.frameCount % 100 === 0 &&\n      console.log(`${p.frameCount} / ${DURATION * RATE}`);\n    p.frameCount === DURATION * RATE && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}