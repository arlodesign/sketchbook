{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/04.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","count","margin","HUE","random","COLORS","Array","from","length","_","i","setup","frameRate","createLoop","FRAMES","createCanvas","width","strokeWeight","rectMode","RADIUS","colorMode","HSB","draw","blendMode","BLEND","background","noFill","HARD_LIGHT","a","map","frameCount","TWO_PI","d","sin","centerPoints","polarToCartesian","height","r","lerp","br","forEach","cp","j","stroke","x","y","square","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","Math","cos","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"oLAMMA,EAAS,SAASC,GACtB,IAKIC,EACAC,EAJEC,EAAMH,EAAEI,OAAO,IACfC,EAASC,MAAMC,KAAK,CAAEC,OAFhB,IAE+B,SAACC,EAAGC,GAAJ,OAAUP,EAAO,GAAaO,KAKzEV,EAAEW,MAAQ,WACRX,EAAEY,UAAU,IAERZ,EAAEa,YACJb,EAAEa,WAAWC,IAEfd,EAAEe,aAAa,IAAK,KACpBd,EAAQD,EAAEgB,MAAQ,GAClBd,EAASF,EAAEgB,OAAS,EAAI,GACxBhB,EAAEiB,aAAa,GACfjB,EAAEkB,SAASlB,EAAEmB,QACbnB,EAAEoB,UAAUpB,EAAEqB,IAAK,MAGrBrB,EAAEsB,KAAO,WACPtB,EAAEuB,UAAUvB,EAAEwB,OACdxB,EAAEyB,WAAW,GAEbzB,EAAE0B,SACF1B,EAAEuB,UAAUvB,EAAE2B,YAcd,IAZA,IAAMC,EAAI5B,EAAE6B,IAAI7B,EAAE8B,WA7BL,IA6B0B,EA7B1B,IA6BqC,EAAG9B,EAAE+B,QACjDC,EAAIhC,EAAE6B,IAAI7B,EAAEiC,IAAQ,EAAJL,IAAS,EAAG,EAAG,EAAG5B,EAAEgB,MAAQ,EAAa,EAATd,GAElDgC,EAAe5B,MAAMC,KAAK,CAAEC,OAAQH,EAAOG,SAAU,SAACC,EAAGC,GAAJ,OACvDyB,YACEnC,EAAEgB,MAAQ,EACVhB,EAAEoC,OAAS,EACXR,EAAI5B,EAAE+B,QAAUrB,EAAIL,EAAOG,QAC3BwB,MAfc,WAmBTtB,GACP,IAAM2B,EAAIrC,EAAEsC,KAAK,GAAItC,EAAEgB,MAAQ,EAAId,EAAQQ,GACrC6B,EAAKvC,EAAE6B,IAAI7B,EAAEiC,IAAQ,EAAJL,IAAS,EAAG,EAAG,EAAGS,GAEzCH,EAAaM,SAAQ,SAACC,EAAIC,GACxB1C,EAAE2C,OAAOtC,EAAOqC,GAAI,GAAI,KACxB,IAAME,EAAI5C,EAAEsC,KAAKG,EAAGG,EAAG5C,EAAEgB,MAAQ,EAAGN,GAC9BmC,EAAI7C,EAAEsC,KAAKG,EAAGI,EAAG7C,EAAEoC,OAAS,EAAG1B,GACrCV,EAAE8C,OAAOF,EAAGC,EAAGR,EAAGE,OARb7B,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAIT,EAAQ,EAA/BS,KAoBEqC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQhD,OAAQA,O,kCChEpB,sCAiBMiD,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMV,EAAIK,EAAUM,KAAKC,IAAIL,GAASC,EAChCP,EAAIK,EAAUK,KAAKtB,IAAIkB,GAASE,EACtC,OAAOC,EAAU,CAACV,EAAGC,GAAK,CAAED,IAAGC,MAIlBV,IAzBU,SACvBc,EACAC,EACAC,EACAM,EACAH,QACG,IADHA,OAAU,GAEV,IAAMV,EAbkB,SAACc,EAAQP,EAAOM,GACxC,OAAOC,EAASH,KAAKC,IAAIL,GAASM,EAYxBE,CAAkBV,EAASE,EAAOM,GACtCZ,EAXkB,SAACa,EAAQP,EAAOM,GACxC,OAAOC,EAASH,KAAKtB,IAAIkB,GAASM,EAUxBG,CAAkBV,EAASC,EAAOM,GAC5C,OAAOH,EAAU,CAACV,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-07-04-js-835404b854efc57e2c4b.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n// import \"p5.createloop\";\n\nconst sketch = function(p) {\n  const FRAMES = 600;\n  const QTY = 4;\n  const HUE = p.random(100 / QTY);\n  const COLORS = Array.from({ length: QTY }, (_, i) => HUE + (100 / QTY) * i);\n\n  let count;\n  let margin;\n\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (p.createLoop) {\n      p.createLoop(FRAMES / 30);\n    }\n    p.createCanvas(660, 840);\n    count = p.width / 50;\n    margin = p.width * (1 / 8);\n    p.strokeWeight(2);\n    p.rectMode(p.RADIUS);\n    p.colorMode(p.HSB, 100);\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0);\n\n    p.noFill();\n    p.blendMode(p.HARD_LIGHT);\n\n    const a = p.map(p.frameCount % FRAMES, 0, FRAMES, 0, p.TWO_PI);\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width / 2 - margin * 2);\n\n    let centerPoints = Array.from({ length: COLORS.length }, (_, i) =>\n      polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        a + p.TWO_PI * (i / COLORS.length),\n        d\n      )\n    );\n\n    for (let i = 0; i < 1; i += 1 / count) {\n      const r = p.lerp(10, p.width / 2 - margin, i);\n      const br = p.map(p.sin(a * 3), -1, 1, 0, r);\n\n      centerPoints.forEach((cp, j) => {\n        p.stroke(COLORS[j], 50, 100);\n        const x = p.lerp(cp.x, p.width / 2, i);\n        const y = p.lerp(cp.y, p.height / 2, i);\n        p.square(x, y, r, br);\n      });\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}