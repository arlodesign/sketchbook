{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/14.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","points","setup","createCanvas","stroke","strokeWeight","strokeJoin","BEVEL","fill","colorMode","HSB","initPoints","Array","from","a","random","TWO_PI","d","width","aSpeed","angle","concat","map","pt","Object","assign","draw","background","beginShape","forEach","i","vertex","polarToCartesian","height","endShape","CLOSE","push","blendMode","SCREEN","sin","frameCount","rect","pop","location","path","pathname","description","polarToCartesianX","center","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"iKAIMA,EAAS,SAASC,GACtB,IAEIC,EAAS,GAEbD,EAAEE,MAAQ,WACRF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,OAAO,KACTJ,EAAEK,aAAa,IACfL,EAAEM,WAAWN,EAAEO,OACfP,EAAEQ,KAAK,GACPR,EAAES,UAAUT,EAAEU,IAAK,KAQnB,IANA,IAAMC,EAAaC,MAAMC,KAAKD,MAAM,IAAI,iBAAO,CAC7CE,EAAGd,EAAEe,OAAOf,EAAEgB,QACdC,EAAGjB,EAAEe,OAAOf,EAAEkB,MAAQ,GAAIlB,EAAEkB,MAAQ,GACpCC,OAAQnB,EAAEe,OAAO,KAAQf,EAAEe,OAAO,EAAE,EAAG,QAXtB,WAcVK,GACPnB,EAASA,EAAOoB,OACdV,EAAWW,KAAI,SAAAC,GAAE,OAAIC,OAAOC,OAAO,GAAIF,EAAI,CAAET,EAAGS,EAAGT,EAAIM,SAFlDA,EAAQ,EAAGA,EAAQpB,EAAEgB,OAAQI,GAASpB,EAAEgB,OAlBrC,EAkBsD,EAAzDI,IAOXpB,EAAE0B,KAAO,WACP1B,EAAE2B,WAAW,KAEb3B,EAAE4B,aAEF3B,EAAO4B,SAAQ,WAAmBC,GAAO,IAAvBhB,EAAsB,EAAtBA,EAAGG,EAAmB,EAAnBA,EAAGE,EAAgB,EAAhBA,OACtBnB,EAAE+B,OAAF,MAAA/B,EAAYgC,YAAiBhC,EAAEkB,MAAQ,EAAGlB,EAAEiC,OAAS,EAAGnB,EAAGG,GAAG,IAC9DhB,EAAO6B,GAAGhB,GAAKK,KAGjBnB,EAAEkC,SAASlC,EAAEmC,OAEbnC,EAAEoC,OACFpC,EAAEqC,UAAUrC,EAAEsC,QACdtC,EAAEQ,KAAKR,EAAEsB,IAAItB,EAAEuC,IAAIvC,EAAEwC,WAAa,MAAO,EAAG,EAAG,EAAG,KAAM,IAAK,KAC7DxC,EAAEyC,KAAK,EAAG,EAAGzC,EAAEkB,MAAOlB,EAAEiC,QACxBjC,EAAE0C,QAIS,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc5C,OAAQA,EAAQ6C,KAAMD,EAASE,SAAUC,YAAY,O,iCCnDrE,0GAAMC,EAAoB,SAACC,EAAQ5B,EAAO6B,GACxC,OAAOD,EAASE,KAAKC,IAAI/B,GAAS6B,GAE9BG,EAAoB,SAACJ,EAAQ5B,EAAO6B,GACxC,OAAOD,EAASE,KAAKX,IAAInB,GAAS6B,GAa9BI,EAA0B,SAC9BC,EACAC,EACAnC,EACAoC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUJ,KAAKC,IAAI/B,GAASoC,EAChCI,EAAIL,EAAUL,KAAKX,IAAInB,GAASqC,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB5B,IAzBU,SACvBsB,EACAC,EACAnC,EACA6B,EACAS,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASlC,EAAO6B,GACtCW,EAAIR,EAAkBG,EAASnC,EAAO6B,GAC5C,OAAOS,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-06-14-js-762a2afc960b7633d023.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const STEPS = 3;\n\n  let points = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.stroke(255);\n    p.strokeWeight(10);\n    p.strokeJoin(p.BEVEL);\n    p.fill(0);\n    p.colorMode(p.HSB, 100);\n\n    const initPoints = Array.from(Array(5), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.width / 10, p.width / 2),\n      aSpeed: p.random(0.01) * p.random([-1, 1]),\n    }));\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      points = points.concat(\n        initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\n      );\n    }\n  };\n\n  p.draw = function() {\n    p.background(255);\n\n    p.beginShape();\n\n    points.forEach(({ a, d, aSpeed }, i) => {\n      p.vertex(...polarToCartesian(p.width / 2, p.height / 2, a, d, true));\n      points[i].a += aSpeed;\n    });\n\n    p.endShape(p.CLOSE);\n\n    p.push();\n    p.blendMode(p.SCREEN);\n    p.fill(p.map(p.sin(p.frameCount / 500), -1, 1, 0, 100), 100, 100);\n    p.rect(0, 0, p.width, p.height);\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}