{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2020/02/11.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","RENDER","getURLParams","render","floor","random","setup","pixelDensity","frameRate","createCanvas","noFill","noSmooth","stroke","createLoop","gif","open","noiseRadius","draw","animLoop","noise1D","progress","theta","blendMode","BLEND","background","MULTIPLY","forEach","c","i","beginShape","j","b","width","height","TWO_PI","curveVertex","bezierPoint","endShape","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,i6BCnBjC,IAAME,EAAS,SAASC,GACtB,IAAMC,EAASD,EAAEE,eAAeC,OAGtBH,EAAEI,MAAMJ,EAAEK,OAAO,IAAK,MAEhCL,EAAEM,MAAQ,WACRN,EAAEO,aAAa,GACfP,EAAEQ,UALS,IAMXR,EAAES,aAAa,IAAK,KACpBT,EAAEU,SACFV,EAAEW,WACFX,EAAEY,OAAO,EAAG,KACZZ,EAAEa,WAXa,GAWQ,CACrBC,MAAKb,GAAS,CAAEE,QAAQ,EAAOY,MAAM,GACrCC,YAAa,KAIjBhB,EAAEiB,KAAO,WAAY,IAAD,EACmBjB,EAAEkB,SAAdC,GADP,EACVC,SADU,EACAC,MADA,EACOF,SACzBnB,EAAEsB,UAAUtB,EAAEuB,OACdvB,EAAEwB,WAAW,KACbxB,EAAEsB,UAAUtB,EAAEyB,UAEd,CAAC,OAAQ,UAAW,UAAUC,SAAQ,SAACC,EAAGC,GACxC5B,EAAEY,OAAOe,GACT3B,EAAE6B,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAK,KAAQ,CAClC,IAAMC,EAAC,CACK,IAAV/B,EAAEgC,MACFhC,EAAEiC,OAAS,GAFN,SAGFnC,YACS,IAAVE,EAAEgC,MACFhC,EAAEiC,OAAS,EACXjC,EAAEkC,OAASJ,GAAK,IAA0C,EAApCX,GAASS,EAAI,IAAgB,IAATE,EAAI,MAC9C9B,EAAEgC,MAAQ,GACV,IARG,EAUFlC,YACS,IAAVE,EAAEgC,MACS,IAAXhC,EAAEiC,QACDjC,EAAEkC,OAASJ,GAAK,IAA0C,EAApCX,GAASS,EAAI,IAAgB,IAATE,EAAI,MAC/C9B,EAAEgC,MAAQ,GACV,IAfG,CAiBK,IAAVhC,EAAEgC,MACS,IAAXhC,EAAEiC,SAGJjC,EAAEmC,YACAnC,EAAEoC,YAAYL,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAID,GACtC9B,EAAEoC,YAAYL,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAID,IAG1C9B,EAAEqC,gBAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcvC,OAAQA,EAAQwC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-02-11-js-1b5f1e5d54dafc8200d0.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 40;\n  const RATE = 30;\n  const M = p.floor(p.random(150, 250));\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.noFill();\n    p.noSmooth();\n    p.stroke(0, 128);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    const { progress, theta, noise1D } = p.animLoop;\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.MULTIPLY);\n\n    [\"cyan\", \"magenta\", \"yellow\"].forEach((c, i) => {\n      p.stroke(c);\n      p.beginShape();\n      for (let j = 0; j < 1; j += 0.0001) {\n        const b = [\n          p.width * 0.25,\n          p.height / 4,\n          ...polarToCartesian(\n            p.width * 0.25,\n            p.height / 4,\n            p.TWO_PI * j * (175 + noise1D((i + 1) / ((j + 1) * 10)) * 7),\n            p.width / 2,\n            true\n          ),\n          ...polarToCartesian(\n            p.width * 0.75,\n            p.height * 0.75,\n            -p.TWO_PI * j * (175 + noise1D((i + 2) / ((j + 1) * 10)) * 7),\n            p.width / 2,\n            true\n          ),\n          p.width * 0.75,\n          p.height * 0.75,\n        ];\n\n        p.curveVertex(\n          p.bezierPoint(b[0], b[2], b[4], b[6], j),\n          p.bezierPoint(b[1], b[3], b[5], b[7], j)\n        );\n      }\n      p.endShape();\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}