{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/07.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","random","verticesArray","Vertex","this","angle","TWO_PI","distance","height","speed","set","vertex","polarToCartesian","width","update","setup","createCanvas","Array","from","colorMode","HSB","strokeJoin","ROUND","strokeWeight","noFill","draw","blendMode","BLEND","background","ADD","forEach","vertices","i","reached","unreached","push","splice","length","record","dist","ui","j","a","b","d","x","y","stroke","beginShape","sort","v","endShape","CLOSE","location","path","pathname","description","polarToCartesianX","center","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-06-07-js-9368c8d6a184b2b4d6bf.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const HUE = p.random(20, 80);\n  const TRAILS = 20;\n\n  let verticesArray = [];\n\n  class Vertex {\n    constructor() {\n      this.angle = p.random(p.TWO_PI);\n      this.distance = p.random(p.height / 2 - 10);\n      this.speed = p.random([-1, 1]) * p.random(0.001, 0.01);\n      this.set();\n    }\n    set() {\n      this.vertex = polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        this.angle,\n        this.distance\n      );\n    }\n    update() {\n      this.angle += this.speed;\n      if (this.angle < 0) {\n        this.angle = p.TWO_PI + this.angle;\n      }\n      if (this.angle > p.TWO_PI) {\n        this.angle = this.angle - p.TWO_PI;\n      }\n      this.set();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    verticesArray = Array.from(Array(10), () =>\n      Array.from(Array(5), () => new Vertex())\n    );\n    p.colorMode(p.HSB, 100);\n    p.strokeJoin(p.ROUND);\n    p.strokeWeight(20);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(10);\n    p.blendMode(p.ADD);\n\n    verticesArray.forEach((vertices, i) => {\n      let reached = [];\n      let unreached = [...vertices];\n\n      reached.push(unreached[0]);\n      unreached.splice(0, 1);\n\n      while (unreached.length > 0) {\n        let record = p.dist(0, 0, p.width, p.height);\n        let ri;\n        let ui;\n        for (let i = 0; i < reached.length; i++) {\n          for (let j = 0; j < unreached.length; j++) {\n            const a = reached[i].vertex;\n            const b = unreached[j].vertex;\n            const d = p.dist(a.x, a.y, b.x, b.y);\n            if (d < record) {\n              record = d;\n              ri = i;\n              ui = j;\n            }\n          }\n        }\n\n        reached.push(unreached[ui]);\n        unreached.splice(ui, 1);\n      }\n\n      p.stroke(i * (100 / verticesArray.length), 100, 100);\n      p.beginShape();\n      vertices\n        .sort((a, b) => a.angle - b.angle)\n        .forEach(v => {\n          p.vertex(v.vertex.x, v.vertex.y);\n          v.update();\n        });\n      p.endShape(p.CLOSE);\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}