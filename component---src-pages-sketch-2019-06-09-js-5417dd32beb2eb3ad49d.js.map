{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/09.js","webpack:///./src/lib/shuffle.js"],"names":["sketch","p","HUE","random","RULES","ROTATIONS","shuffle","HALF_PI","PI","cellCount","row","this","cells","Array","from","length","WIDTH","floor","draw","y","forEach","c","i","console","log","fill","color","push","translate","GRID_SIZE","rotate","triangle","pop","update","newState","str","String","setup","createCanvas","colorMode","HSL","background","noStroke","frameCount","noLoop","location","path","pathname","description","a","j","Math"],"mappings":"oLAIMA,EAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,KAGfC,EAAQ,CACZ,IAAOH,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,KAGhBE,EAAYC,YAAQ,CAAC,EAAGL,EAAEM,QAASN,EAAEO,GAAIP,EAAEM,QAAUN,EAAEO,KAEzDC,EAAY,EA4CVC,EAAM,IA7Da,WAoBvB,aACEC,KAAKC,MAAQC,MAAMC,KAAK,CAAEC,OAAQC,KAAqB,kBAAM,KAC7DL,KAAKC,MAAM,GAAK,EAChBD,KAAKC,MAAMD,KAAKC,MAAMG,OAAS,GAAK,EACpCJ,KAAKC,MAAMX,EAAEgB,MAAMN,KAAKC,MAAMG,OAAS,IAAM,EAC7CJ,KAAKC,MAAMX,EAAEgB,MAAMN,KAAKC,MAAMG,QAAU,EAAI,KAAO,EAzB9B,2BA2BvBG,KAAA,SAAKC,GAAI,IAAD,OACNR,KAAKC,MAAMQ,SAAQ,SAACC,EAAGC,GACrBC,QAAQC,IAAIH,EAfA,GAeGC,EAAe,EAAKH,GACnClB,EAAEwB,KAAKJ,EAAIpB,EAAEyB,MAAMxB,EAAK,IAAK,IAAMD,EAAEyB,MAAMxB,EAAK,IAAK,KACrDD,EAAE0B,OACF1B,EAAE2B,UAlBU,GAmBVN,EAAgBO,EAnBN,GAoBVV,EAAgBU,GAElB5B,EAAE6B,OAAOzB,EAAUI,EAAY,IAC/BR,EAAE8B,UACA,GACA,EACAF,EACAA,GACA,EACAA,GAEF5B,EAAE+B,MACFvB,QA9CmB,EAiDvBwB,OAAA,WAAU,IAAD,OACHC,EAAW,GACfvB,KAAKC,MAAMQ,SAAQ,SAACC,EAAGC,GACrB,IAAIa,EAAY,IAANb,EAAU,IAAMc,OAAO,EAAKxB,MAAMU,EAAI,IAChDa,GAAOC,OAAO,EAAKxB,MAAMU,IACzBa,GAAOb,IAAM,EAAKV,MAAMG,OAAS,EAAI,IAAMqB,OAAO,EAAKxB,MAAMU,EAAI,IACjEY,EAASP,KAAKvB,EAAM+B,OAEtBxB,KAAKC,MAAQsB,GAzDQ,MA+DzBjC,EAAEoC,MAAQ,WACRpC,EAAEqC,aA9DU,IACC,KA8DbrC,EAAEsC,UAAUtC,EAAEuC,IAAK,IACnBvC,EAAEwC,WAAWvC,EAAK,IAAK,IACvBD,EAAEyC,YAGJzC,EAAEiB,KAAO,WACPR,EAAIQ,KAAKjB,EAAE0C,WAAa,GACxBjC,EAAIuB,SA1DY,GA2DhBhC,EAAE0C,WAtEW,KAsEwB1C,EAAE2C,WAI5B,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACE7C,OAAQA,EACR8C,KAAMD,EAASE,SACfC,YAAY,kE,kCCrFD,SAAS1C,EAAQ2C,GAC9B,IAAK,IAAI3B,EAAI2B,EAAElC,OAAS,EAAGO,EAAI,EAAGA,IAAK,CACrC,IAAM4B,EAAIC,KAAKlC,MAAMkC,KAAKhD,UAAYmB,EAAI,IADL,EAEtB,CAAC2B,EAAEC,GAAID,EAAE3B,IAAvB2B,EAAE3B,GAFkC,KAE9B2B,EAAEC,GAF4B,KAIvC,OAAOD,EALT","file":"component---src-pages-sketch-2019-06-09-js-5417dd32beb2eb3ad49d.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport shuffle from \"~lib/shuffle\";\n\nconst sketch = function(p) {\n  const HUE = p.random(100);\n  const WIDTH = 660;\n  const HEIGHT = 840;\n  const RULES = {\n    \"111\": p.random([0, 1]),\n    \"110\": p.random([0, 1]),\n    \"101\": p.random([0, 1]),\n    \"100\": p.random([0, 1]),\n    \"011\": p.random([0, 1]),\n    \"010\": p.random([0, 1]),\n    \"001\": p.random([0, 1]),\n    \"000\": p.random([0, 1]),\n  };\n  const GRID_SIZE = 10;\n  const ROTATIONS = shuffle([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]);\n\n  let cellCount = 0;\n\n  class Row {\n    constructor() {\n      this.cells = Array.from({ length: WIDTH / GRID_SIZE }, () => 0);\n      this.cells[0] = 1;\n      this.cells[this.cells.length - 1] = 1;\n      this.cells[p.floor(this.cells.length / 3)] = 1;\n      this.cells[p.floor(this.cells.length * (2 / 3))] = 1;\n    }\n    draw(y) {\n      this.cells.forEach((c, i) => {\n        console.log(c, i * GRID_SIZE, this.y);\n        p.fill(c ? p.color(HUE, 100, 50) : p.color(HUE, 100, 25));\n        p.push();\n        p.translate(\n          i * GRID_SIZE + GRID_SIZE / 2,\n          y * GRID_SIZE + GRID_SIZE / 2\n        );\n        p.rotate(ROTATIONS[cellCount % 4]);\n        p.triangle(\n          -GRID_SIZE / 2,\n          -GRID_SIZE / 2,\n          GRID_SIZE / 2,\n          GRID_SIZE / 2,\n          -GRID_SIZE / 2,\n          GRID_SIZE / 2\n        );\n        p.pop();\n        cellCount++;\n      });\n    }\n    update() {\n      let newState = [];\n      this.cells.forEach((c, i) => {\n        let str = i === 0 ? \"0\" : String(this.cells[i - 1]);\n        str += String(this.cells[i]);\n        str += i === this.cells.length - 1 ? \"0\" : String(this.cells[i + 1]);\n        newState.push(RULES[str]);\n      });\n      this.cells = newState;\n    }\n  }\n\n  const row = new Row();\n\n  p.setup = function() {\n    p.createCanvas(WIDTH, HEIGHT);\n    p.colorMode(p.HSL, 75);\n    p.background(HUE, 100, 33);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    row.draw(p.frameCount - 1);\n    row.update();\n    p.frameCount * GRID_SIZE > HEIGHT && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Continuing to explore randomly generated cellular automata.\"\n  />\n);\n","export default function shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n"],"sourceRoot":""}