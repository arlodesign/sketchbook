{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/29.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","w","h","GRID_SIZE","SIZES","LINES","grid","Doodad","x","y","size","this","lines","rate","drawFunc","random","square","triangle","push","translate","rotate","HALF_PI","PI","i","DIST","lerpLine","pop","setup","createCanvas","colorMode","HSB","hue","background","stroke","strokeWeight","strokeCap","ROUND","noFill","floor","width","height","xx","yy","visited","draw","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description","x1","y1","x2","y2","showFirstDot","Error","l","point","lerp"],"mappings":"uIAIMA,EAAS,SAASC,GACtB,IAKIC,EACAC,EANEC,EAAY,GACZC,EAAQ,CAAC,EAAG,EAAG,GACfC,EAAQ,GAEVC,EAAO,GAILC,EATmB,WAUvB,WAAYC,EAAGC,EAAGC,GAChBC,KAAKH,EAAIA,EAAIL,EACbQ,KAAKF,EAAIA,EAAIN,EACbQ,KAAKD,KAAOA,EAAOP,EACnBQ,KAAKC,MAAQF,EAAOL,EACpBM,KAAKE,KAAO,IAAOH,EAEnBC,KAAKG,SAAWd,EAAEe,OAAO,CAACJ,KAAKK,OAAQL,KAAKM,WAC5CN,KAAKG,WAlBgB,2BAqBvBE,OAAA,WACEhB,EAAEkB,OACFlB,EAAEmB,UAAUR,KAAKH,EAAIG,KAAKD,KAAO,EAAGC,KAAKF,EAAIE,KAAKD,KAAO,GACzDV,EAAEoB,OAAOpB,EAAEe,OAAO,CAAC,EAAGf,EAAEqB,QAASrB,EAAEsB,GAAItB,EAAEqB,QAAUrB,EAAEsB,MAErD,IAAK,IAAIC,EAAI,EAAGA,GAAKZ,KAAKC,MAAOW,IAAK,CACpC,IAAMC,EAAQb,KAAKD,KAAOC,KAAKC,MAASW,EAExCE,YACEzB,GACCW,KAAKD,KAAO,EAAIc,GAChBb,KAAKD,KAAO,GACZC,KAAKD,KAAO,EAAIc,EACjBb,KAAKD,KAAO,EACZC,KAAKE,MAGTb,EAAE0B,OAtCmB,EAyCvBT,SAAA,WACEjB,EAAEkB,OACFlB,EAAEmB,UAAUR,KAAKH,EAAIG,KAAKD,KAAO,EAAGC,KAAKF,EAAIE,KAAKD,KAAO,GACzDV,EAAEoB,OAAOpB,EAAEe,OAAO,CAAC,EAAGf,EAAEqB,QAASrB,EAAEsB,GAAItB,EAAEqB,QAAUrB,EAAEsB,MAErD,IAAK,IAAIC,EAAI,EAAGA,GAAKZ,KAAKC,MAAOW,IAAK,CACpC,IAAMC,EAAQb,KAAKD,KAAOC,KAAKC,MAASW,EAExCE,YACEzB,EACAW,KAAKD,KAAO,GACXC,KAAKD,KAAO,EAAIc,GAChBb,KAAKD,KAAO,EAAIc,EACjBb,KAAKD,KAAO,EACZC,KAAKE,MAGT,IAAK,IAAIU,EAAI,EAAGA,GAAKZ,KAAKC,MAAOW,IAAK,CACpC,IAAMC,EAAQb,KAAKD,KAAOC,KAAKC,MAASW,EAExCE,YACEzB,EACAW,KAAKD,KAAO,EAAIc,GACfb,KAAKD,KAAO,GACZC,KAAKD,KAAO,EACbC,KAAKD,KAAO,EAAIc,EAChBb,KAAKE,MAGTb,EAAE0B,OAtEmB,KA0EzB1B,EAAE2B,MAAQ,WACR3B,EAAE4B,aAAa,IAAK,KACpB5B,EAAE6B,UAAU7B,EAAE8B,IAAK,KAEnB,IAAMC,EAAM/B,EAAEe,OAAO,KACrBf,EAAEgC,WAAWD,EAAK,GAAI,KACtB/B,EAAEiC,OAAOF,EAAK,GAAI,IAClB/B,EAAEkC,aAAa,GACflC,EAAEmC,UAAUnC,EAAEoC,OAEdpC,EAAEqC,SAEFpC,EAAID,EAAEsC,MAAMtC,EAAEuC,MAAQpC,GACtBD,EAAIF,EAAEsC,MAAMtC,EAAEwC,OAASrC,GAEvB,IAAK,IAAIsC,EAAK,EAAGA,EAAKxC,EAAGwC,IAAM,CAC7BnC,EAAKY,KAAK,IACV,IAAK,IAAIwB,EAAK,EAAGA,EAAKxC,EAAGwC,IACvBpC,EAAKmC,GAAIvB,KAAK,CACZV,EAAGiC,EACHhC,EAAGiC,EACHC,SAAS,MAMjB3C,EAAE4C,KAAO,WAAY,IAAD,MACD5C,EAAEe,QACjB,MAAG8B,OAAH,QAAavC,GAAMwC,QAAO,qBAAGH,YADvBnC,EADU,EACVA,EAAGC,EADO,EACPA,EAINH,EAAKE,GAAGC,GAAGkC,SAAU,WACxB,IACII,EADArC,EAAOsC,KAAKC,IAAL,MAAAD,KAAY5C,GAGvB,EAAG,CACD2C,GAAU,EACV,IAAK,IAAIN,EAAKjC,EAAGiC,EAAK/B,EAAOF,EAAGiC,IAC9B,IAAK,IAAIC,EAAKjC,EAAGiC,EAAKhC,EAAOD,EAAGiC,KAC1BlC,EAAIE,EAAOT,GAAKQ,EAAIC,EAAOR,GAAKI,EAAKmC,GAAIC,GAAIC,WAC/CI,GAAU,GAIZA,IACFrC,EAAOsC,KAAKC,IAAL,MAAAD,KAAY5C,EAAM0C,QAAO,SAAAI,GAAC,OAAIA,EAAIxC,aAEpCqC,GAET,IAAIxC,EAAOC,EAAGC,EAAGC,GAEjB,IAAK,IAAI+B,EAAKjC,EAAGiC,EAAK/B,EAAOF,EAAGiC,IAC9B,IAAK,IAAIC,EAAKjC,EAAGiC,EAAKhC,EAAOD,EAAGiC,IAC9BpC,EAAKmC,GAAIC,GAAIC,SAAU,EAtBH,IA2BrB,MAAGE,OAAH,QAAavC,GAAMwC,QAAO,qBAAGH,WAAwBQ,QACxDnD,EAAEoD,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAActD,OAAQA,EAAQuD,KAAMD,EAASE,SAAUC,YAAY,O,iCChJtD,aAASxD,EAAGyD,EAAIC,EAAIC,EAAIC,EAAI/C,EAAMgD,GAC/C,QADoE,IAArBA,OAAe,GAC1DhD,GAAQ,EACV,MAAM,IAAIiD,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKlD,GAChB,IAANkD,GAAYF,IAChB7D,EAAEe,SAAWgD,GAAK/D,EAAEgE,MAAMhE,EAAEiE,KAAKR,EAAIE,EAAII,GAAI/D,EAAEiE,KAAKP,EAAIE,EAAIG","file":"component---src-pages-sketch-2019-05-29-js-8e4f6b80909a56f4a1ba.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 60;\n  const SIZES = [1, 2, 3];\n  const LINES = 10;\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size * GRID_SIZE;\n      this.lines = size * LINES;\n      this.rate = 0.03 / size;\n\n      this.drawFunc = p.random([this.square, this.triangle]);\n      this.drawFunc();\n    }\n\n    square() {\n      p.push();\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\n\n      for (let i = 0; i <= this.lines; i++) {\n        const DIST = (this.size / this.lines) * i;\n\n        lerpLine(\n          p,\n          -this.size / 2 + DIST,\n          -this.size / 2,\n          -this.size / 2 + DIST,\n          this.size / 2,\n          this.rate\n        );\n      }\n      p.pop();\n    }\n\n    triangle() {\n      p.push();\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\n\n      for (let i = 0; i <= this.lines; i++) {\n        const DIST = (this.size / this.lines) * i;\n\n        lerpLine(\n          p,\n          this.size / 2,\n          -this.size / 2 + DIST,\n          -this.size / 2 + DIST,\n          this.size / 2,\n          this.rate\n        );\n      }\n      for (let i = 0; i <= this.lines; i++) {\n        const DIST = (this.size / this.lines) * i;\n\n        lerpLine(\n          p,\n          this.size / 2 - DIST,\n          -this.size / 2,\n          -this.size / 2,\n          this.size / 2 - DIST,\n          this.rate\n        );\n      }\n      p.pop();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    const hue = p.random(100);\n    p.background(hue, 75, 100);\n    p.stroke(hue, 50, 15);\n    p.strokeWeight(2);\n    p.strokeCap(p.ROUND);\n\n    p.noFill();\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}