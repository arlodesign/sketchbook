{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/07.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","color1","color2","HUE","random","setup","frameRate","pixelDensity","colorMode","HSL","createCanvas","background","color","createLoop","gif","render","open","noiseRadius","draw","animLoop","noise1D","theta","strokeWeight","HSB","push","translate","width","height","noFill","stroke","lerpColor","map","sin","curve","polarToCartesian","PI","pop","DURATION","frameCount","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"wkBAMA,IAAMA,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtB,IAEIC,EACAC,EAHEC,EAAMH,EAAEI,OAAO,IAKrBJ,EAAEK,MAAQ,WACRL,EAAEM,UAAU,IACZV,GAAUI,EAAEO,aAAa,GAEzBP,EAAEQ,UAAUR,EAAES,IAAK,KACnBT,EAAEU,aAAa,IAAK,KACpBV,EAAEW,WAAWR,EAAK,GAAI,IAEtBF,EAASD,EAAEY,MAAMT,EAAK,GAAI,GAAI,IAC9BD,EAASF,EAAEY,MAAMT,EAAM,GAAI,IAAK,IAAK,IAErCH,EAAEa,WAnBW,GAmBU,CACrBC,MAAKlB,GAAS,CAAEmB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,OAIjBjB,EAAEkB,KAAO,WAAY,IAAD,EACSlB,EAAEmB,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MAEjBrB,EAAEsB,aAAa,GACftB,EAAEQ,UAAUR,EAAEuB,IAAK,KACnBvB,EAAEwB,OACFxB,EAAEyB,UAAUzB,EAAE0B,MAAQ,EAAG1B,EAAE2B,OAAS,GACpC3B,EAAE4B,SACF5B,EAAE6B,OAAO7B,EAAE8B,UAAU7B,EAAQC,EAAQF,EAAE+B,IAAI/B,EAAEgC,IAAIX,IAAS,EAAG,EAAG,EAAG,KACnErB,EAAEiC,MAAF,MAAAjC,EAAC,EACIkC,YAAiB,EAAG,EAAGb,EAAOrB,EAAE2B,QAAQ,IAD5C,SAEG3B,EAAE0B,MAAQ,EAAKN,GAASpB,EAAE0B,QAC1B1B,EAAE2B,OAAS,EAAKP,GAASpB,EAAE2B,QAC5B3B,EAAE0B,MAAQ,EAAKN,EAAQpB,EAAE0B,OACzB1B,EAAE2B,OAAS,EAAKP,EAAQpB,EAAE2B,SAL5B,EAMIO,YAAiB,EAAG,EAAGb,EAAQrB,EAAEmC,GAAInC,EAAE2B,QAAQ,MAEpD3B,EAAEoC,OAEDxC,GAA2ByC,OAAjBrC,EAAEsC,YAAgCtC,EAAEuC,WAUpCC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQzC,OAAQA,O,kCCzDpB,sCAiBM0C,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKjB,IAAIY,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBjB,IAzBU,SACvBQ,EACAC,EACAC,EACAQ,EACAL,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACK,EAAQT,EAAOQ,GACxC,OAAOC,EAASJ,KAAKC,IAAIN,GAASQ,EAYxBE,CAAkBZ,EAASE,EAAOQ,GACtCD,EAXkB,SAACE,EAAQT,EAAOQ,GACxC,OAAOC,EAASJ,KAAKjB,IAAIY,GAASQ,EAUxBG,CAAkBZ,EAASC,EAAOQ,GAC5C,OAAOL,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG","file":"component---src-pages-sketch-2019-08-07-js-24745f442e66be645e0f.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 60;\n\nconst sketch = function(p) {\n  const HUE = p.random(70);\n\n  let color1;\n  let color2;\n\n  p.setup = function() {\n    p.frameRate(30);\n    RENDER && p.pixelDensity(1);\n\n    p.colorMode(p.HSL, 100);\n    p.createCanvas(660, 840);\n    p.background(HUE, 20, 10);\n\n    color1 = p.color(HUE, 50, 50, 10);\n    color2 = p.color(HUE + 30, 100, 100, 10);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.31,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n\n    p.strokeWeight(2);\n    p.colorMode(p.HSB, 100);\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n    p.noFill();\n    p.stroke(p.lerpColor(color1, color2, p.map(p.sin(theta), -1, 1, 0, 1)));\n    p.curve(\n      ...polarToCartesian(0, 0, theta, p.height, true),\n      (-p.width / 2) * noise1D(-p.width),\n      (-p.height / 2) * noise1D(-p.height),\n      (p.width / 2) * noise1D(p.width),\n      (p.height / 2) * noise1D(p.height),\n      ...polarToCartesian(0, 0, theta + p.PI, p.height, true)\n    );\n    p.pop();\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}