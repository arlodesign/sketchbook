{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/22.js","webpack:///./src/lib/polarToCartesian.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_1__","_lib_polarToCartesian__WEBPACK_IMPORTED_MODULE_2__","sketch","p","speed1","speed2","variant","prevPoint","r1","r2","setup","createCanvas","background","stroke","random","TWO_PI","floor","draw","AXIS_X","polarToCartesianX","width","AXIS_Y","polarToCartesianY","height","sin","X","Y","line","_ref","location","a","createElement","path","pathname","description","d","center","angle","distance","Math","cos","polarToCartesian","centerX","centerY","asArray","x","y"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAIMQ,EAAS,SAASC,GACtB,IAAIC,EACAC,EAGAC,EACAC,EAHAC,EAAK,EACLC,EAAK,EAITN,EAAEO,MAAQ,WACRP,EAAEQ,aAAa,IAAK,KACpBR,EAAES,WAAW,KACbT,EAAEU,OAAO,EAAG,EAAG,EAAG,IAClBT,EAASD,EAAEW,OAAO,IAAM,KAAQX,EAAEY,OAClCV,EAASF,EAAEW,OAAO,GAAK,IAAOX,EAAEY,OAChCT,EAAUH,EAAEa,MAAMb,EAAEW,OAAO,EAAG,KAGhCX,EAAEc,KAAO,WACP,IAAMC,EAASC,YAAkBhB,EAAEiB,MAAQ,EAAGZ,EAAKF,EAAS,KACtDe,EAASC,YAAkBnB,EAAEoB,OAAS,EAAGpB,EAAEqB,IAAIhB,GAAK,KACpDiB,EAAIN,YAAkBD,EAAQT,EAAI,KAClCiB,EAAIJ,YAAkBD,EAAQZ,EAAKH,EAAS,KAC9CC,IACFJ,EAAEwB,KAAKF,EAAGC,EAAGnB,EAAUkB,EAAGlB,EAAUmB,GACpCvB,EAAEwB,KACAxB,EAAEiB,MAAQK,EACVtB,EAAEoB,OAASG,EACXvB,EAAEiB,MAAQb,EAAUkB,EACpBtB,EAAEoB,OAAShB,EAAUmB,GAEvBvB,EAAEwB,KAAKF,EAAGtB,EAAEoB,OAASG,EAAGnB,EAAUkB,EAAGtB,EAAEoB,OAAShB,EAAUmB,GAC1DvB,EAAEwB,KAAKxB,EAAEiB,MAAQK,EAAGC,EAAGvB,EAAEiB,MAAQb,EAAUkB,EAAGlB,EAAUmB,IAE1DlB,GAAMJ,EACNK,GAAMJ,EACNE,EAAY,CACVkB,IACAC,OAKS9B,EAAA,iBAAAgC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACb/B,EAAAgC,EAAAC,cAAC/B,EAAA,EAAD,CAAcE,OAAQA,EAAQ8B,KAAMH,EAASI,SAAUC,YAAY,8EC/CrExC,EAAAyC,EAAAvC,EAAA,sBAAAuB,IAAAzB,EAAAyC,EAAAvC,EAAA,sBAAA0B,IAAA,IAAMH,EAAoB,SAACiB,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BhB,EAAoB,SAACc,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKf,IAAIa,GAASC,GA2BrBG,IAzBU,SACvBC,EACAC,EACAN,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAMC,EAAI1B,EAAkBuB,EAASL,EAAOC,GACtCQ,EAAIxB,EAAkBqB,EAASN,EAAOC,GAC5C,OAAOM,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-01-22-js-1769622fcbeb2a57f040.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { polarToCartesianX, polarToCartesianY } from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let speed1;\n  let speed2;\n  let r1 = 0;\n  let r2 = 0;\n  let variant;\n  let prevPoint;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.stroke(0, 0, 0, 64);\n    speed1 = p.random(0.02, 0.05) / p.TWO_PI;\n    speed2 = p.random(0.2, 0.3) / p.TWO_PI;\n    variant = p.floor(p.random(2, 6));\n  };\n\n  p.draw = function() {\n    const AXIS_X = polarToCartesianX(p.width / 2, r1 * variant, 100);\n    const AXIS_Y = polarToCartesianY(p.height / 2, p.sin(r1), 200);\n    const X = polarToCartesianX(AXIS_X, r2, 100);\n    const Y = polarToCartesianY(AXIS_Y, r2 * variant, 100);\n    if (prevPoint) {\n      p.line(X, Y, prevPoint.X, prevPoint.Y);\n      p.line(\n        p.width - X,\n        p.height - Y,\n        p.width - prevPoint.X,\n        p.height - prevPoint.Y\n      );\n      p.line(X, p.height - Y, prevPoint.X, p.height - prevPoint.Y);\n      p.line(p.width - X, Y, p.width - prevPoint.X, prevPoint.Y);\n    }\n    r1 += speed1;\n    r2 += speed2;\n    prevPoint = {\n      X,\n      Y,\n    };\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}