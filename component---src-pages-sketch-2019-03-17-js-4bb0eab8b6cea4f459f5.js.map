{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/17.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","hue","manualControl","setup","createCanvas","colorMode","HSB","random","fill","noStroke","draw","background","gx","GRID_SIZE","width","gy","height","push","translate","focus","createVector","mouseX","mouseY","polarToCartesian","frameCount","noise","sub","setMag","min","dist","x","y","beginShape","vertex","handles","mult","quadraticVertex","endShape","CLOSE","pop","mousePressed","touchMoved","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"oJAIMA,EAAS,SAASC,GACtB,IACIC,EAEAC,GAAgB,EAEpBF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,UAAUL,EAAEM,IAAK,KACnBL,EAAMD,EAAEO,OAAO,EAAG,IAClBP,EAAEQ,KAAKP,EAAK,IAAK,IACjBD,EAAES,YAGJT,EAAEU,KAAO,WACPV,EAAEW,WAAW,IAAMV,EAAK,IAAK,IAE7B,IAAK,IAAIW,EAAKC,GAAeD,EAAKZ,EAAEc,MAAOF,GAhB3B,GAiBd,IAAK,IAAIG,EAAKF,GAAeE,EAAKf,EAAEgB,OAAQD,GAjB9B,GAiB+C,CAC3Df,EAAEiB,OACFjB,EAAEkB,UAAUN,EAAIG,GAEhB,IAAII,EAAQjB,EACRF,EAAEoB,aAAapB,EAAEqB,OAAQrB,EAAEsB,QAC3BtB,EAAEoB,aAAF,MAAApB,EACKuB,YACDvB,EAAEc,MAAQ,EACVd,EAAEgB,OAAS,EACXhB,EAAEwB,WAAa,IACfxB,EAAEc,MAAQd,EAAEyB,MAAMzB,EAAEwB,WAAa,MACjC,IAIRL,EAAMO,IAAI1B,EAAEoB,aAAaR,EAAIG,IAC7BI,EAAMQ,OAAO,GAAM3B,EAAE4B,IAlCT,GAkCwB5B,EAAE6B,KAAK,EAAG,EAAGV,EAAMW,EAAGX,EAAMY,KAEhE/B,EAAEgC,aACFhC,EAAEiC,OAAOd,EAAMW,EAAGX,EAAMY,GACxB,IAAMG,EAAU,CACdlC,EAAEoB,aAAaD,EAAMY,GAAIZ,EAAMW,GAAGK,KAAK,MACvCnC,EAAEoB,cAAcD,EAAMY,EAAGZ,EAAMW,GAAGK,KAAK,OAEzCnC,EAAEoC,gBAAgBF,EAAQ,GAAGJ,EAAGI,EAAQ,GAAGH,EAAG,EAAG,GACjD/B,EAAEoC,gBAAgBF,EAAQ,GAAGJ,EAAGI,EAAQ,GAAGH,EAAGZ,EAAMW,EAAGX,EAAMY,GAC7D/B,EAAEqC,SAASrC,EAAEsC,OACbtC,EAAEuC,QAKRvC,EAAEwC,aAAe,WACftC,GAAiBA,GAGnBF,EAAEyC,WAAa,WACb,GACEzC,EAAEqB,QAAU,GACZrB,EAAEsB,QAAU,GACZtB,EAAEqB,QAAUrB,EAAEc,OACdd,EAAEsB,QAAUtB,EAAEgB,OAEd,OAAO,IAKE,0BAAG0B,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACE3C,OAAQA,EACR4C,KAAMD,EAASE,SACfC,YAAY,iI,iCC3EhB,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM7B,EAAIyB,EAAUL,KAAKC,IAAIH,GAASS,EAChC1B,EAAIyB,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAAC7B,EAAGC,GAAK,CAAED,IAAGC,MAIlBR,IAzBU,SACvBgC,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAM7B,EAAIgB,EAAkBS,EAASP,EAAOC,GACtClB,EAAIqB,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAAC7B,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-17-js-4bb0eab8b6cea4f459f5.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 60;\n  let hue;\n\n  let manualControl = false;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    hue = p.random(0, 45);\n    p.fill(hue, 100, 75);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    p.background(100 - hue, 100, 50);\n\n    for (let gx = GRID_SIZE / 2; gx < p.width; gx += GRID_SIZE) {\n      for (let gy = GRID_SIZE / 2; gy < p.height; gy += GRID_SIZE) {\n        p.push();\n        p.translate(gx, gy);\n\n        let focus = manualControl\n          ? p.createVector(p.mouseX, p.mouseY)\n          : p.createVector(\n              ...polarToCartesian(\n                p.width / 2,\n                p.height / 2,\n                p.frameCount / 100,\n                p.width * p.noise(p.frameCount / 1000),\n                true\n              )\n            );\n\n        focus.sub(p.createVector(gx, gy));\n        focus.setMag(0.9 * p.min(GRID_SIZE, p.dist(0, 0, focus.x, focus.y)));\n\n        p.beginShape();\n        p.vertex(focus.x, focus.y);\n        const handles = [\n          p.createVector(focus.y, -focus.x).mult(0.333),\n          p.createVector(-focus.y, focus.x).mult(0.333),\n        ];\n        p.quadraticVertex(handles[0].x, handles[0].y, 0, 0);\n        p.quadraticVertex(handles[1].x, handles[1].y, focus.x, focus.y);\n        p.endShape(p.CLOSE);\n        p.pop();\n      }\n    }\n  };\n\n  p.mousePressed = function() {\n    manualControl = !manualControl;\n  };\n\n  p.touchMoved = function() {\n    if (\n      p.mouseX >= 0 &&\n      p.mouseY >= 0 &&\n      p.mouseX <= p.width &&\n      p.mouseY <= p.height\n    ) {\n      return false;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Learning vector math. Click or tap on the canvas to control the focal point. Refresh page for a different color variation.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}