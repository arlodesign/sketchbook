{"version":3,"sources":["webpack:///./src/pages/sketch/2018/12/22.js"],"names":["sketch","p","size","spheres","getCoordinate","value","random","Math","min","max","setup","createCanvas","WEBGL","noFill","strokeWeight","i","x","y","z","draw","background","camera","cos","frameCount","sin","length","s","push","translate","sphere","noise","pop","oppositeS","bezier","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname"],"mappings":"6HAGMA,EAAS,SAASC,GACtB,IAAIC,EACAC,EAAU,GAEd,SAASC,IACP,IAAMC,EAAQJ,EAAEK,QAAQJ,EAAMA,GAC9B,OAAOK,KAAKC,IAAID,KAAKE,IAAIJ,GAAQH,EAAO,GAAIA,EAAO,GAGrDD,EAAES,MAAQ,WACRT,EAAEU,aAAa,IAAK,IAAKV,EAAEW,OAC3BX,EAAEY,SACFZ,EAAEa,aAAa,IACfZ,EAAOD,EAAEK,OAAO,IAAK,KACrB,IAAK,IAAIS,EAAI,EAAGA,EAAW,EAAPb,EAAUa,IAC5BZ,EAAQY,GAAK,CACXC,EAAGZ,IACHa,EAAGb,IACHc,EAAGd,MAKTH,EAAEkB,KAAO,WACPlB,EAAEmB,WAAW,SACbnB,EAAEoB,OACApB,EAAEqB,IAAIrB,EAAEsB,WAAa,KAAOrB,EAC5BD,EAAEuB,IAAIvB,EAAEsB,WAAa,KAAOrB,EAC5BD,EAAEuB,IAAIvB,EAAEsB,WAAa,KAAOrB,EAC5B,EACA,EACA,EACA,EACA,EACA,GAEF,IAAK,IAAIa,EAAI,EAAGA,EAAIZ,EAAQsB,OAAQV,IAAK,CACvC,IAAMW,EAAIvB,EAAQY,GAKlB,GAJAd,EAAE0B,OACF1B,EAAE2B,UAAUF,EAAEV,EAAGU,EAAET,EAAGS,EAAER,GACxBjB,EAAE4B,OAAQ3B,EAAO,IAAOD,EAAE6B,MAAMJ,EAAEV,EAAGU,EAAET,EAAGS,EAAER,IAC5CjB,EAAE8B,MACEhB,EAAIZ,EAAQsB,OAAS,EAAG,CAC1B,IAAMO,EAAY7B,EAAQA,EAAQsB,OAAS,EAAIV,GAC/Cd,EAAEgC,OACAP,EAAEV,EACFU,EAAET,EACFS,EAAER,GACDhB,EAAO,KACPA,EAAO,KACPA,EAAO,IACRA,EAAO,IACPA,EAAO,IACPA,EAAO,IACP8B,EAAUhB,EACVgB,EAAUf,EACVe,EAAUd,OAOLgB,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcvC,OAAQA,EAAQwC,KAAMJ,EAASK","file":"component---src-pages-sketch-2018-12-22-js-f44ebfe847d09451f80b.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  let size;\n  let spheres = [];\n\n  function getCoordinate() {\n    const value = p.random(-size, size);\n    return Math.min(Math.max(value, -size / 2), size / 2);\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n    p.noFill();\n    p.strokeWeight(0.5);\n    size = p.random(300, 500);\n    for (let i = 0; i < size * 2; i++) {\n      spheres[i] = {\n        x: getCoordinate(),\n        y: getCoordinate(),\n        z: getCoordinate(),\n      };\n    }\n  };\n\n  p.draw = function() {\n    p.background(\"white\");\n    p.camera(\n      p.cos(p.frameCount / 100) * size,\n      p.sin(p.frameCount / 100) * size,\n      p.sin(p.frameCount / 100) * size,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    );\n    for (let i = 0; i < spheres.length; i++) {\n      const s = spheres[i];\n      p.push();\n      p.translate(s.x, s.y, s.z);\n      p.sphere((size / 100) * p.noise(s.x, s.y, s.z));\n      p.pop();\n      if (i < spheres.length / 2) {\n        const oppositeS = spheres[spheres.length - 1 - i];\n        p.bezier(\n          s.x,\n          s.y,\n          s.z,\n          -size / 100,\n          -size / 100,\n          -size / 100,\n          size / 100,\n          size / 100,\n          size / 100,\n          oppositeS.x,\n          oppositeS.y,\n          oppositeS.z\n        );\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n"],"sourceRoot":""}