{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/11.js"],"names":["sketch","p","grid1","grid2","grid3","colorFunctions","angle","abs","sin","cos","tan","HALF_PI","Hexagon","centx","centy","radius","this","cf","random","_proto","prototype","getColor","color","TAU","draw","fill","noStroke","TWO_PI","beginShape","a","PI","vx","vy","vertex","endShape","CLOSE","Grid","rad","cols","ceil","width","sqrt","rows","height","grid","_makeGrid","console","log","_proto2","x","y","i","push","j","floor","setup","createCanvas","background","blendMode","DIFFERENCE","translate","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname"],"mappings":"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","file":"component---src-pages-sketch-2019-02-11-js-e2c2f805e12197bfd109.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const colorFunctions = [\n    angle => p.abs(p.sin(angle)) * 240,\n    angle => p.abs(p.cos(angle)) * 240,\n    angle => p.abs(p.tan(angle)) * 240,\n    angle => p.abs(p.sin(angle + p.HALF_PI)) * 240,\n    angle => p.abs(p.cos(angle + p.HALF_PI)) * 240,\n    angle => p.abs(p.tan(angle + p.HALF_PI)) * 240,\n    angle => p.abs(p.sin(-angle)) * 240,\n    angle => p.abs(p.cos(-angle)) * 240,\n    angle => p.abs(p.tan(-angle)) * 240,\n    angle => p.abs(p.sin(-angle + p.HALF_PI)) * 240,\n    angle => p.abs(p.cos(-angle + p.HALF_PI)) * 240,\n    angle => p.abs(p.tan(-angle + p.HALF_PI)) * 240,\n  ];\n  let grid1;\n  let grid2;\n  let grid3;\n\n  class Hexagon {\n    constructor(centx, centy, radius) {\n      this.centx = centx;\n      this.centy = centy;\n      this.radius = radius;\n      this.cf = [\n        p.random(colorFunctions),\n        p.random(colorFunctions),\n        p.random(colorFunctions),\n      ];\n    }\n\n    getColor() {\n      return p.color(\n        this.cf[0](p.random(p.TAU)),\n        this.cf[1](p.random(p.TAU)),\n        this.cf[2](p.random(p.TAU))\n      );\n    }\n\n    draw() {\n      p.fill(this.getColor());\n      p.noStroke();\n      let angle = p.TWO_PI / 6;\n      p.beginShape();\n      for (let a = p.PI / 6; a < p.TWO_PI; a += angle) {\n        let vx = this.centx + p.cos(a) * this.radius;\n        let vy = this.centy + p.sin(a) * this.radius;\n        p.vertex(vx, vy);\n      }\n      p.endShape(p.CLOSE);\n    }\n  }\n\n  class Grid {\n    constructor(rad) {\n      this.cols = p.ceil(p.width / (p.sqrt(3) * rad));\n      this.rows = p.ceil(p.height / ((rad * 3) / 2)) + 1;\n      this.radius = rad;\n      this.grid = [];\n      this._makeGrid();\n      console.log(this.cols, this.rows);\n    }\n    _makeGrid() {\n      let x = p.sqrt(3) * this.radius;\n      let y = this.radius;\n      for (let i = 0; i < this.rows; i++) {\n        this.grid.push([]);\n        for (let j = 0; j < this.cols; j++) {\n          this.grid[i].push(new Hexagon(x, y, this.radius));\n          x += this.radius * p.sqrt(3);\n        }\n        y += (this.radius * 3) / 2;\n        if ((i + 1) % 2 == 0) {\n          x = p.floor(p.sqrt(3) * this.radius);\n        } else {\n          x = p.floor((this.radius * p.sqrt(3)) / 2);\n        }\n      }\n    }\n    draw() {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.cols; j++) {\n          this.grid[i][j].draw();\n        }\n      }\n    }\n  }\n\n  p.setup = function() {\n    // ;\n    p.createCanvas(660, 840);\n    p.background(127);\n    p.blendMode(p.DIFFERENCE);\n    p.translate(-20, -20);\n    grid1 = new Grid(10);\n    grid2 = new Grid(15);\n    grid3 = new Grid(20);\n    grid1.draw();\n    grid2.draw();\n    grid3.draw();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n"],"sourceRoot":""}