{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/07.js"],"names":["sketch","p","marginH","marginV","vertices","maxDist","setup","createCanvas","width","height","Array","from","vector","createVector","constrain","randomGaussian","reached","push","dist","background","draw","reachedVector","unreachedIndex","reachedVertices","filter","v","shortestDist","forEach","vertex","i","thisDist","x","y","strokeWeight","map","line","length","noLoop","location","path","pathname","description"],"mappings":"6JAGMA,EAAS,SAASC,GACtB,IAEIC,EACAC,EACAC,EAGAC,EAEJJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBL,GAAWD,EAAEO,MAAQP,EAAEO,MAXL,cAW4B,EAC9CL,GAAWF,EAAEQ,OAASR,EAAEQ,OAZN,cAY8B,GAChDL,EAAWM,MAAMC,KAAKD,MAAM,OAAO,iBAAO,CACxCE,OAAQX,EAAEY,aACRZ,EAAEa,UACAb,EAAEc,eAAed,EAAEO,MAAQ,EAAGP,EAAEO,MAhBpB,aACA,GAgBZN,EACAD,EAAEO,MAAQN,GAEZD,EAAEa,UACAb,EAAEc,eAAed,EAAEQ,OAAS,EAAGR,EAAEQ,OArBrB,aACA,GAqBZN,EACAF,EAAEQ,OAASN,IAGfa,SAAS,OAEF,GAAK,CACZJ,OAAQX,EAAEY,aAAaZ,EAAEO,MAAQ,EAAGP,EAAEQ,OAAS,GAC/CO,SAAS,GAEXZ,EAASa,KAAK,CACZL,OAAQX,EAAEY,aAAaX,EAASC,GAChCa,SAAS,IAEXZ,EAASa,KAAK,CACZL,OAAQX,EAAEY,aAAaZ,EAAEO,MAAQN,EAASC,GAC1Ca,SAAS,IAEXZ,EAASa,KAAK,CACZL,OAAQX,EAAEY,aAAaX,EAASD,EAAEQ,OAASN,GAC3Ca,SAAS,IAEXZ,EAASa,KAAK,CACZL,OAAQX,EAAEY,aAAaZ,EAAEO,MAAQN,EAASD,EAAEQ,OAASN,GACrDa,SAAS,IAEXX,EAAUJ,EAAEiB,KAAKhB,EAASC,EAASF,EAAEO,MAAQN,EAASD,EAAEQ,OAASN,GACjEF,EAAEkB,WAAW,MAGflB,EAAEmB,KAAO,WACP,IAEIC,EACAC,EAHEC,EAAkBnB,EAASoB,QAAO,SAAAC,GAAC,OAAIA,EAAET,WAC3CU,EAAerB,EAGnBD,EAASuB,SAAQ,SAACC,EAAQC,GACnBD,EAAOZ,SACVO,EAAgBI,SAAQ,YAAiB,IAAdf,EAAa,EAAbA,OACnBkB,EAAW7B,EAAEiB,KACjBN,EAAOmB,EACPnB,EAAOoB,EACPJ,EAAOhB,OAAOmB,EACdH,EAAOhB,OAAOoB,GAEZF,EAAWJ,IACbA,EAAeI,EACfR,EAAiBO,EACjBR,EAAgBT,SAKxBX,EAAEgC,aACAhC,EAAEiC,IACAjC,EAAEiB,KACAjB,EAAEO,MAAQ,EACVP,EAAEQ,OAAS,EACXL,EAASkB,GAAgBV,OAAOmB,EAChC3B,EAASkB,GAAgBV,OAAOoB,GAElC,EACA3B,EAAU,EACV,EAnFc,IAuFlBJ,EAAEkC,KACAd,EAAcU,EACdV,EAAcW,EACd5B,EAASkB,GAAgBV,OAAOmB,EAChC3B,EAASkB,GAAgBV,OAAOoB,GAElC5B,EAASkB,GAAgBN,SAAU,EAC/BZ,EAASoB,QAAO,SAAAC,GAAC,OAAIA,EAAET,WAASoB,SAAWhC,EAASgC,QACtDnC,EAAEoC,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAActC,OAAQA,EAAQuC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-01-07-js-e586d1f011a4d2c81475.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const goldenRatio = 1.6180339887;\n  const magicNumber = 5;\n  let marginH;\n  let marginV;\n  let vertices;\n  let pointTestIndex = 0;\n  let currentPoint;\n  let maxDist;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    marginH = (p.width - p.width / goldenRatio) / 2;\n    marginV = (p.height - p.height / goldenRatio) / 2;\n    vertices = Array.from(Array(2500), () => ({\n      vector: p.createVector(\n        p.constrain(\n          p.randomGaussian(p.width / 2, p.width / goldenRatio / magicNumber),\n          marginH,\n          p.width - marginH\n        ),\n        p.constrain(\n          p.randomGaussian(p.height / 2, p.height / goldenRatio / magicNumber),\n          marginV,\n          p.height - marginV\n        )\n      ),\n      reached: false,\n    }));\n    vertices[0] = {\n      vector: p.createVector(p.width / 2, p.height / 2),\n      reached: true,\n    };\n    vertices.push({\n      vector: p.createVector(marginH, marginV),\n      reached: false,\n    });\n    vertices.push({\n      vector: p.createVector(p.width - marginH, marginV),\n      reached: false,\n    });\n    vertices.push({\n      vector: p.createVector(marginH, p.height - marginV),\n      reached: false,\n    });\n    vertices.push({\n      vector: p.createVector(p.width - marginH, p.height - marginV),\n      reached: false,\n    });\n    maxDist = p.dist(marginH, marginV, p.width - marginH, p.height - marginV);\n    p.background(255);\n  };\n\n  p.draw = function() {\n    const reachedVertices = vertices.filter(v => v.reached);\n    let shortestDist = maxDist;\n    let reachedVector;\n    let unreachedIndex;\n    vertices.forEach((vertex, i) => {\n      if (!vertex.reached) {\n        reachedVertices.forEach(({ vector }) => {\n          const thisDist = p.dist(\n            vector.x,\n            vector.y,\n            vertex.vector.x,\n            vertex.vector.y\n          );\n          if (thisDist < shortestDist) {\n            shortestDist = thisDist;\n            unreachedIndex = i;\n            reachedVector = vector;\n          }\n        });\n      }\n    });\n    p.strokeWeight(\n      p.map(\n        p.dist(\n          p.width / 2,\n          p.height / 2,\n          vertices[unreachedIndex].vector.x,\n          vertices[unreachedIndex].vector.y\n        ),\n        0,\n        maxDist / 2,\n        1,\n        magicNumber\n      )\n    );\n    p.line(\n      reachedVector.x,\n      reachedVector.y,\n      vertices[unreachedIndex].vector.x,\n      vertices[unreachedIndex].vector.y\n    );\n    vertices[unreachedIndex].reached = true;\n    if (vertices.filter(v => v.reached).length === vertices.length) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Be patient. Reload page for a different variation.\" />\n);\n"],"sourceRoot":""}