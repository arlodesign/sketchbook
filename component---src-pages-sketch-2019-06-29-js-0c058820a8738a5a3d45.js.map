{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/29.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["noise","OpenSimplexNoise","Date","now","sketch","p","hue","random","a","i","setup","createCanvas","background","colorMode","HSB","blendMode","OVERLAY","strokeWeight","draw","translate","width","height","stroke","noiseVal","map","noise4D","cos","TWO_PI","frameCount","sin","lerpLine","polarToCartesian","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","max","dist","l","point","lerp"],"mappings":"i/BAMA,IAAMA,EAAQ,IAAIC,IAAiBC,KAAKC,OAElCC,EAAS,SAASC,GACtB,IAEIC,EAAMD,EAAEE,OAAO,GAAI,KACnBC,EAAI,EACJC,EAAI,EAERJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,WAAW,IACbP,EAAEQ,UAAUR,EAAES,IAAK,KACnBT,EAAEU,UAAUV,EAAEW,SACdX,EAAEY,aAAa,KAGjBZ,EAAEa,KAAO,WACPb,EAAEc,UAAUd,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,GACpChB,EAAEiB,OAAOhB,EAAK,IAAK,IAAK,IAExB,IAAMiB,EAAWlB,EAAEmB,IACjBxB,EAAMyB,SACHhB,EAAI,IAAO,IACXA,EAAI,IAAO,GACZJ,EAAEqB,IAAIrB,EAAEsB,QAAUtB,EAAEuB,WAtBZ,MAuBRvB,EAAEwB,IAAIxB,EAAEsB,QAAUtB,EAAEuB,WAvBZ,QAyBT,EACD,EACA,EACA,IAGFE,IAAQ,WAAR,GACEzB,EACA,EACA,GAHF,SAIK0B,YAAiB,EAAG,EAAGvB,EAAGH,EAAEgB,OAASE,EAAW,IAAI,IAJzD,CAKEA,GACA,MAGFf,GAAKH,EAAEsB,OAxCK,KAyCJtB,EAAEsB,SACRlB,GAAK,IACLD,EAAI,GACJF,GAAO,IACG,GAAGD,EAAE2B,YAKN,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc7B,OAAQA,EAAQ8B,KAAMD,EAASE,SAAUC,YAAY,O,kCC5DrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKf,IAAIa,GAASC,GAE9BE,EAAoB,SAACJ,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKZ,IAAIU,GAASC,GAsB9BG,EAA0B,SAC9BC,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKf,IAAIa,GAASO,EAChCI,EAAIL,EAAUJ,KAAKZ,IAAIU,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBnB,IAzBU,SACvBa,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASL,EAAOC,GACtCU,EAAIR,EAAkBG,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,oCCZlB,aACb7C,EACA8C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QACA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAIR,IAFA,IAAMC,EAAWjB,KAAKkB,IAAIJ,EAAM,IAAOlD,EAAEuD,KAAKT,EAAIC,EAAIC,EAAIC,IAEjDO,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYL,KACXC,GAASpD,EAAEE,SAAWsD,IAAOJ,IAChCpD,EAAEyD,MAAMzD,EAAE0D,KAAKZ,EAAIE,EAAIQ,GAAIxD,EAAE0D,KAAKX,EAAIE,EAAIO","file":"component---src-pages-sketch-2019-06-29-js-0c058820a8738a5a3d45.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport OpenSimplexNoise from \"open-simplex-noise\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst noise = new OpenSimplexNoise(Date.now());\n\nconst sketch = function(p) {\n  const STEPS = 1000;\n\n  let hue = p.random(67, 100);\n  let a = 0;\n  let i = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(64);\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.OVERLAY);\n    p.strokeWeight(10);\n  };\n\n  p.draw = function() {\n    p.translate(p.width / 2, p.height / 2);\n    p.stroke(hue, 100, 100, 20);\n\n    const noiseVal = p.map(\n      noise.noise4D(\n        (i + 0.1) / 10,\n        (i + 0.2) / 10,\n        p.cos(p.TWO_PI * (p.frameCount / STEPS)),\n        p.sin(p.TWO_PI * (p.frameCount / STEPS))\n      ),\n      -1,\n      1,\n      0,\n      0.1\n    );\n\n    lerpLine(\n      p,\n      0,\n      0,\n      ...polarToCartesian(0, 0, a, p.height * noiseVal * 10, true),\n      noiseVal,\n      false\n    );\n\n    a += p.TWO_PI / STEPS;\n    if (a > p.TWO_PI) {\n      i += 1000;\n      a = 0;\n      hue -= 33;\n      if (hue < 0) p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n"],"sourceRoot":""}