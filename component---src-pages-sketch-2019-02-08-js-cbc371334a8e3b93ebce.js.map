{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/02/08.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","img","axis","POINTS_PER_SHAPE","shapes","Shape","colorFunctions","abs","tan","PI","this","cf","Array","from","Set","_cf","length","random","points","fill","map","_","Point","_clr","color","frameCount","draw","blendMode","DIFFERENCE","ADD","noStroke","beginShape","vertex","location","forEach","i","move","endShape","CLOSE","_angle","TWO_PI","_dist","_speed","_getLocation","preload","loadImage","withPrefix","setup","createCanvas","background","createVector","width","keys","setTimeout","noLoop","shape","DARKEST","image","height","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-02-08-js-cbc371334a8e3b93ebce.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { withPrefix } from \"gatsby\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SHAPES_COUNT = 3;\n  const POINTS_PER_SHAPE = 4;\n  let img;\n  let axis;\n  let shapes = [];\n\n  class Shape {\n    constructor() {\n      const colorFunctions = [\n        angle => p.abs(p.sin(angle)) * 240,\n        angle => p.abs(p.cos(angle)) * 240,\n        angle => p.abs(p.tan(angle)) * 240,\n        angle => p.abs(p.sin(angle + p.PI)) * 240,\n        angle => p.abs(p.cos(angle + p.PI)) * 240,\n        angle => p.abs(p.tan(angle + p.PI)) * 240,\n        angle => p.abs(p.sin(-angle)) * 240,\n        angle => p.abs(p.cos(-angle)) * 240,\n        angle => p.abs(p.tan(-angle)) * 240,\n        angle => p.abs(p.sin(-angle + p.PI)) * 240,\n        angle => p.abs(p.cos(-angle + p.PI)) * 240,\n        angle => p.abs(p.tan(-angle + p.PI)) * 240,\n      ];\n      this.cf = [];\n      while (Array.from(new Set(this._cf)).length < 3) {\n        this._cf = [\n          p.random(colorFunctions),\n          p.random(colorFunctions),\n          p.random(colorFunctions),\n        ];\n      }\n      this.points = Array(POINTS_PER_SHAPE)\n        .fill()\n        .map(_ => new Point());\n    }\n    _clr() {\n      return p.color(\n        this._cf[0](p.frameCount),\n        this._cf[1](p.frameCount),\n        this._cf[2](p.frameCount)\n      );\n    }\n    draw() {\n      p.blendMode(p.frameCount % 3 ? p.DIFFERENCE : p.ADD);\n      p.noStroke();\n      p.fill(this._clr());\n      p.beginShape();\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      this.points.forEach(({ location }, i) => {\n        if (i === 0) return;\n        p.vertex(location.x, location.y);\n        this.points[i].move();\n      });\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      p.endShape(p.CLOSE);\n    }\n  }\n\n  class Point {\n    constructor() {\n      this._angle = p.random(p.TWO_PI);\n      this._dist = p.random(200, 350);\n      this._speed = p.random([-0.05, 0.05]);\n      this.location = this._getLocation();\n    }\n\n    _getLocation() {\n      return polarToCartesian(axis.x, axis.y, this._angle, this._dist);\n    }\n\n    move() {\n      this._angle += this._speed;\n      this.location = this._getLocation();\n    }\n  }\n\n  p.preload = function() {\n    img = p.loadImage(withPrefix(\"/assets/susan.png\"));\n  };\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    axis = p.createVector(p.width / 2, 350);\n    shapes = [...Array(SHAPES_COUNT).keys()].map(_ => new Shape());\n    setTimeout(() => {\n      p.noLoop();\n    }, 20000);\n  };\n\n  p.draw = function() {\n    shapes.forEach((shape, i) => shape.draw());\n    p.blendMode(p.DARKEST);\n    p.image(img, 0, 0, p.width, p.height);\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n"],"sourceRoot":""}