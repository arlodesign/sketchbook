{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/12.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","maxDist","SLICES","random","vertices","setup","createCanvas","Array","from","floor","theta","TWO_PI","r","height","forEach","_ref","i","push","vector","polarToCartesian","width","reached","hue","map","sin","filter","_ref2","x","y","dist","background","colorMode","HSB","strokeWeight","draw","reachedVector","unreachedIndex","reachedVertices","_ref3","shortestDist","vertex","_ref4","thisDist","stroke","lerpLine","noStroke","fill","rect","v","length","noLoop","text","pop","__webpack_exports__","_ref5","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_5__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"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","file":"component---src-pages-sketch-2019-05-12-js-bf11612ba0da1559b1f8.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const SLICES = p.random([2, 3, 5]);\n\n  let vertices = [];\n  let maxDist;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n\n    Array.from(Array(p.floor(3000 / SLICES)), () => ({\n      theta: p.random(p.TWO_PI / SLICES),\n      r: p.random(p.height / 2),\n    })).forEach(({ theta, r }) => {\n      for (let i = 0; i < SLICES; i++) {\n        vertices.push({\n          vector: polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            theta + (p.TWO_PI / SLICES) * i,\n            r\n          ),\n          reached: false,\n          hue: p.map(p.sin(theta + (p.TWO_PI / SLICES) * i), -1, 1, 0, 100),\n        });\n      }\n    });\n    vertices = vertices.filter(\n      ({ vector }) =>\n        vector.x > 0 &&\n        vector.x < p.width &&\n        vector.y > 0 &&\n        vector.y < p.height\n    );\n    vertices.push({\n      vector: {\n        x: p.width / 2,\n        y: p.height / 2,\n      },\n      reached: true,\n      hue: 0,\n    });\n\n    maxDist = p.dist(0, 0, p.width, p.height);\n\n    p.background(0);\n    p.colorMode(p.HSB, 100);\n    p.strokeWeight(2);\n  };\n\n  p.draw = function() {\n    const reachedVertices = vertices.filter(({ reached }) => reached);\n\n    let shortestDist = maxDist;\n    let reachedVector;\n    let unreachedIndex;\n\n    vertices.forEach((vertex, i) => {\n      if (!vertex.reached) {\n        reachedVertices.forEach(({ vector, hue }) => {\n          const thisDist = p.dist(\n            vector.x,\n            vector.y,\n            vertex.vector.x,\n            vertex.vector.y\n          );\n          if (thisDist < shortestDist) {\n            shortestDist = thisDist;\n            unreachedIndex = i;\n            reachedVector = vector;\n          }\n        });\n      }\n    });\n\n    p.stroke(vertices[unreachedIndex].hue, 80, 100);\n    lerpLine(\n      p,\n      reachedVector.x,\n      reachedVector.y,\n      vertices[unreachedIndex].vector.x,\n      vertices[unreachedIndex].vector.y,\n      p.map(\n        p.dist(p.width / 2, p.height / 2, reachedVector.x, reachedVector.y),\n        0,\n        maxDist / 2,\n        0.1,\n        0.5\n      ),\n      false\n    );\n\n    vertices[unreachedIndex].reached = true;\n\n    p.push();\n    p.noStroke();\n    p.fill(\"black\");\n    p.rect(0, 0, 100, 20);\n\n    if (vertices.filter(v => v.reached).length === vertices.length) {\n      p.noLoop();\n    } else {\n      p.fill(\"white\");\n      p.text(vertices.length - vertices.filter(v => v.reached).length, 0, 18);\n    }\n\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Be patient.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}