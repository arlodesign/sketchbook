{"version":3,"sources":["webpack:///./src/pages/sketch/2018/12/13.js"],"names":["sketch","p","diagonal","getHypotenuse","a","b","Math","sqrt","getDistanceFromPointer","x","y","abs","mouseX","mouseY","setup","createCanvas","width","height","noStroke","draw","background","noiseVal","noise","scaleVal","map","push","translate","size","fill","ellipse","pop","touchMoved","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname","description"],"mappings":"oIAGMA,EAAS,SAASC,GACtB,IACIC,EAEJ,SAASC,EAAcC,EAAGC,GACxB,OAAOC,KAAKC,KAAKH,EAAIA,EAAIC,EAAIA,GAG/B,SAASG,EAAuBC,EAAGC,GAGjC,OAAOP,EAFGG,KAAKK,IAAIV,EAAEW,OAASH,GACpBH,KAAKK,IAAIV,EAAEY,OAASH,IAIhCT,EAAEa,MAAQ,WACRb,EAAEc,aAAa,IAAK,KACpBb,EAAWC,EAAcF,EAAEe,MAAOf,EAAEgB,QACpChB,EAAEiB,YAGJjB,EAAEkB,KAAO,WACPlB,EAAEmB,WAAW,SACb,IAAK,IAAIX,EAAI,EAAGA,EAAIR,EAAEe,MAAOP,GArBlB,GAsBT,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAEgB,OAAQP,GAtBrB,GAsBgC,CACvC,IAAMW,EAAWpB,EAAEqB,MAAMb,EAAGC,GACtBa,EAAWtB,EAAEuB,IACjBhB,EAAuBC,EAAGC,GAC1B,EACAR,EACA,GACA,KAEFD,EAAEwB,OACFxB,EAAEyB,UAAUjB,EAAIkB,GAAUjB,EAAIiB,IAC9B1B,EAAE2B,KAAF,iBAAwBP,EAAxB,KACApB,EAAE4B,QAAQ,EAAG,EAlCN,GAkCiBR,EAAYE,GACpCtB,EAAE6B,QAKR7B,EAAE8B,WAAa,WACb,GACE9B,EAAEW,QAAU,GACZX,EAAEY,QAAU,GACZZ,EAAEW,QAAUX,EAAEe,OACdf,EAAEY,QAAUZ,EAAEgB,OAEd,OAAO,IAKEe,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcrC,OAAQA,EAAQsC,KAAMJ,EAASK,SAAUC,YAAY","file":"component---src-pages-sketch-2018-12-13-js-5cccd80f01cef47b300e.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const size = 20;\n  let diagonal;\n\n  function getHypotenuse(a, b) {\n    return Math.sqrt(a * a + b * b);\n  }\n\n  function getDistanceFromPointer(x, y) {\n    const a = Math.abs(p.mouseX - x);\n    const b = Math.abs(p.mouseY - y);\n    return getHypotenuse(a, b);\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    diagonal = getHypotenuse(p.width, p.height);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    p.background(\"white\");\n    for (let x = 0; x < p.width; x += size) {\n      for (let y = 0; y < p.height; y += size) {\n        const noiseVal = p.noise(x, y);\n        const scaleVal = p.map(\n          getDistanceFromPointer(x, y),\n          0,\n          diagonal,\n          0.1,\n          1.1\n        );\n        p.push();\n        p.translate(x + size / 2, y + size / 2);\n        p.fill(`rgba(0, 0, 0, ${noiseVal})`);\n        p.ellipse(0, 0, (size * noiseVal) / scaleVal);\n        p.pop();\n      }\n    }\n  };\n\n  p.touchMoved = function() {\n    if (\n      p.mouseX >= 0 &&\n      p.mouseY >= 0 &&\n      p.mouseX <= p.width &&\n      p.mouseY <= p.height\n    ) {\n      return false;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Move pointer or finger over sketch.\" />\n);\n"],"sourceRoot":""}