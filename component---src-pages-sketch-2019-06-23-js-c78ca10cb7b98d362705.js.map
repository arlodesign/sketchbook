{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/23.js","webpack:///./node_modules/amp-is-object/is-object.js","webpack:///./node_modules/coordinate-systems/coordinate-systems.js","webpack:///./node_modules/amp-is-array/is-array.js","webpack:///./node_modules/amp-is-number/is-number.js","webpack:///./node_modules/amp-extend/extend.js"],"names":["sketch","p","colors","colorFunctions","angle","abs","sin","cos","tan","setup","createCanvas","WEBGL","noStroke","Array","from","Set","length","random","draw","C","map","c","frameCount","background","apply","pointLight","reverse","concat","camera","spherical","SIZE","cart","specularMaterial","shininess","i","push","rotateX","TWO_PI","rotateY","torus","pop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_6__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_9__","path","pathname","description","module","exports","obj","type","isArray","require","isNumber","isObject","extend","degPerRadian","Math","PI","Coordinate","config","isRadian","isDegree","_x","_y","_z","_r","_t","_p","pos","defineProperty","this","get","x","set","label","coords","Error","initialType","prototype","cartesian","arguments","options","temp","cartesian2d","cartesian3d","polarToCart2d","polar","cylindrical","sphericalToCart3d","cyl","cartesian2dToPolar","center","cartesian3dToCylindrical","sphericalToCylindrical","pol","sph","cartesian3dToSpherical","cylindricalToSpherical","baseCoord","arrToNumeric","nums","num","TypeError","parseFloat","rt","r","t","xy","y","sqrt","atan2","xyz","z","x2","y2","z2","rtz","sr","sp","rtp","cr","toString","nativeIsArray","call","source","prop"],"mappings":"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","file":"component---src-pages-sketch-2019-06-23-js-c78ca10cb7b98d362705.js","sourcesContent":["import React from \"react\";\nimport { spherical } from \"coordinate-systems\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const SIZE = 10;\n  const SPEED = 0.25;\n\n  let colors = [];\n\n  const colorFunctions = [\n    angle => p.abs(p.sin(angle)) * 240,\n    angle => p.abs(p.cos(angle)) * 240,\n    angle => p.abs(p.tan(angle)) * 240,\n    angle => p.abs(p.sin(-angle)) * 240,\n    angle => p.abs(p.cos(-angle)) * 240,\n    angle => p.abs(p.tan(-angle)) * 240,\n    () => 240,\n    () => 15,\n    () => 128,\n  ];\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n    p.noStroke();\n    while (Array.from(new Set(colors)).length < 3) {\n      colors = [\n        p.random(colorFunctions),\n        p.random(colorFunctions),\n        p.random(colorFunctions),\n      ];\n    }\n  };\n\n  p.draw = function() {\n    const C = colors.map(c => c((p.frameCount / 200) * SPEED));\n\n    p.background(...C);\n\n    p.pointLight(\n      ...C.reverse(),\n      p.cos((p.frameCount / 200) * SPEED),\n      p.sin((p.frameCount / 100) * SPEED),\n      p.sin((p.frameCount / 100) * SPEED)\n    );\n    p.camera(\n      ...spherical([SIZE * SIZE * 2, 0, (p.frameCount / 200) * SPEED]).cart(),\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    );\n\n    p.noStroke();\n\n    p.specularMaterial(...C);\n    p.shininess(5);\n\n    for (let i = 0; i < SIZE * 2; i++) {\n      p.push();\n\n      p.rotateX((p.TWO_PI / SIZE) * i * p.sin((p.frameCount / 100) * SPEED));\n      p.rotateY((p.TWO_PI / SIZE) * i * p.cos((p.frameCount / 200) * SPEED));\n\n      p.torus(SIZE * i, SIZE / 3, 30 * i + 1);\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","module.exports = function isObject(obj) {\n    var type = typeof obj;\n    return !!obj && (type === 'function' || type === 'object');\n};\n","\"use strict\";\nvar isArray = require('amp-is-array');\nvar isNumber = require('amp-is-number');\nvar isObject = require('amp-is-object');\nvar extend = require('amp-extend');\nvar degPerRadian = 180 / Math.PI;\n\n/**\n * @constructor Coordinate\n * @description Defines object which can convert between coordinate systems.\n * It is recommended to use one of the Coodinate.STATIC_CONSTRUCTOR functions\n * to generate your first coordinate before conversions. e.g. Coodinate.spherical(...)\n * @param {Object} config\n * {\n *     label: 'type of initial coordinate',\n *     coords: {\n *         x/y/z/r/t/p: 'k-v pairs'\n *     },\n *     isDegree: Boolean\n * }\n */\nvar Coordinate = function (config) {\n    var isRadian,\n        isDegree,\n        pos = {},\n        _x, _y, _z, _r, _t, _p;\n\n    // Override select setters/getts\n    Object.defineProperty(this, \"isRadian\", {\n        get: function (x) { return isRadian; },\n        set: function (x) {\n            isRadian = !!x;\n            if (isDegree !== !x) { isDegree = !x; } // jshint ignore:line\n        }\n    });\n    Object.defineProperty(this, \"isDegree\", {\n        get: function (x) { return isDegree; },\n        set: function (x) {\n            isDegree = x;\n            if (isRadian !== !x) { isRadian = !x; } // jshint ignore:line\n        }\n    });\n    Object.defineProperty(pos, \"cartesian2d\", {\n        get: function (x) { return [_x, _y]; },\n        set: function (x) { _x = x[0]; _y = x[1]; }\n    });\n    Object.defineProperty(pos, \"cartesian3d\", {\n        get: function (x) { return [_x, _y, _z]; },\n        set: function (x) { _x = x[0]; _y = x[1]; _z = x[2]; }\n    });\n    Object.defineProperty(pos, \"polar\", {\n        get: function (x) { return [_r, _t]; },\n        set: function (x) { _r = x[0]; _t = x[1]; }\n    });\n    Object.defineProperty(pos, \"cylindrical\", {\n        get: function (x) { return [_r, _t, _z]; },\n        set: function (x) { _r = x[0]; _t = x[1]; _z = x[2]; }\n    });\n    Object.defineProperty(pos, \"spherical\", {\n        get: function (x) { return [_r, _t, _p]; },\n        set: function (x) { _r = x[0]; _t = x[1]; _p = x[2]; }\n    });\n\n    // init from config\n    if (config.isDegree && !config.isRadian) {\n        this.isDegree = true;\n    } else {\n        this.isRadian = true;\n    }\n    if (!config.label || !config.coords) {\n        throw new Error(\"no coordinate type defined\");\n    }\n    this.initialType = config.label;\n    this.pos = pos;\n    this.pos[config.label] = config.coords;\n};\n\n\n\n/**\n * @method cartesian\n * Converts current coordinate to cartesian\n * @function cartesian\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.cartesian = function () { return this.cart.apply(this, arguments); };\n/**\n * @method cart\n * Converts current coordinate to cartesian\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.cart = function (options) {\n    var temp;\n    options = options || {};\n    switch (this.initialType) {\n        case 'cartesian2d':\n            return this.pos.cartesian2d;\n        case 'cartesian3d':\n            return this.pos.cartesian3d;\n        case 'polar':\n            this.pos.cartesian2d = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n            return this.pos.cartesian2d;\n        case 'cylindrical':\n            temp = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n            this.pos.cartesian3d = [temp[0], temp[1], this.pos.cylindrical[2]];\n            return this.pos.cartesian3d;\n        case 'spherical':\n            this.pos.cartesian3d = Coordinate.sphericalToCart3d(this.pos.spherical, this.isDegree);\n            return this.pos.cartesian3d;\n        default:\n            throw new Error('cannot convert to/from original/requested types');\n    }\n};\n\n\n\n/**\n * @method cylindrical\n * Converts current coordinate to cylindrical\n * @function cylindrical\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.cylindrical = function () { return this.cyl.apply(this, arguments); };\n/**\n * @method cyl\n * Converts current coordinate to cylindrical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.cyl = function (options) {\n    var temp;\n    options = options || {};\n    switch (this.initialType) {\n        case 'cartesian2d':\n            temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n            this.pos.cylindrical = [temp[0], temp[1], 0];\n            return this.pos.cylindrical;\n        case 'cartesian3d':\n            this.pos.cylindrical = Coordinate.cartesian3dToCylindrical(this.pos.cartesian3d, this.isDegree, options.center);\n            return this.pos.cylindrical;\n        case 'polar':\n            temp = this.pos.polar;\n            return [temp[0], temp[1], 0];\n        case 'cylindrical':\n            return this.pos.cylindrical;\n        case 'spherical':\n            this.pos.cylindrical = Coordinate.sphericalToCylindrical(this.pos.spherical, this.isDegree);\n            return this.pos.cylindrical;\n        default:\n            throw new Error('cannot convert to/from original/requested types');\n    }\n};\n\n/**\n * @method pol\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.pol = function () { return this.polar.apply(this, arguments); };\n/**\n * @method polar\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.polar = function (options) {\n    options = options || {};\n    switch (this.initialType) {\n        case 'cartesian2d':\n            this.pos.polar = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n            return this.pos.polar;\n        case 'polar':\n            return this.pos.polar;\n        default:\n            throw new Error('cannot convert to/from original/requested types');\n    }\n};\n\n\n\n/**\n * @method spherical\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.spherical = function () { return this.sph.apply(this, arguments); };\n/**\n * @method sph\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.sph = function (options) {\n    var temp;\n    options = options || {};\n    switch (this.initialType) {\n        case 'cartesian2d':\n            temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n            this.pos.spherical = [temp[0], temp[1], 0];\n            return this.pos.spherical;\n        case 'cartesian3d':\n            this.pos.spherical = Coordinate.cartesian3dToSpherical(this.pos.cartesian3d, this.isDegree, options.center);\n            return this.pos.spherical;\n        case 'polar':\n            temp = this.pos.polar;\n            return [temp[0], temp[1], 0];\n        case 'cylindrical':\n            this.pos.spherical = Coordinate.cylindricalToSpherical(this.pos.cylindrical, this.isDegree);\n            return this.pos.spherical;\n        case 'spherical':\n            return this.pos.spherical;\n        default:\n            throw new Error('cannot convert to/from original/requested types');\n    }\n};\n\n\n///\n/// Static Constructor Functions\n///\n\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.cartesian = function(x) { return Coordinate.cart(x); };\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.cart = function(options) {\n    var baseCoord;\n    if (isArray(options)) {\n        options = {coords: options};\n    }\n    if (isObject(options) && isArray(options.coords)) {\n        Coordinate.arrToNumeric(options.coords);\n        if (options.coords.length < 2 || options.coords.length > 3) {\n            throw new Error('expected exactly 2 or exactly 3 cartesian options');\n        }\n        baseCoord = {\n            label: 'cartesian2d',\n            options: options.coords\n        };\n        baseCoord = extend(baseCoord, options);\n        if (options.coords.length === 2) {\n            return new Coordinate(baseCoord);\n        }\n        baseCoord.label = 'cartesian3d';\n        return new Coordinate(baseCoord);\n    }\n    throw new Error('expected options w/ array of [x,y,(z?)] coords');\n};\n\n\n\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.cylindrical = function(x) { return Coordinate.cyl(x); };\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.cyl = function(options) {\n    var baseCoord;\n    if (isArray(options)) {\n        options = {coords: options};\n    }\n    if (isObject(options) && isArray(options.coords)) {\n        Coordinate.arrToNumeric(options.coords);\n        if (options.coords.length !== 3) {\n            throw new Error('expected exactly 3 params [r, t, z]');\n        }\n        baseCoord = {\n            label: 'cylindrical',\n            coords: options.coords\n        };\n        baseCoord = extend(baseCoord, options);\n        return new Coordinate(baseCoord);\n    }\n    throw new Error('expected options w/ array of [r, t, z] coords');\n};\n\n\n\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.polar = function(x) { return Coordinate.pol(x); };\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.pol = function(options) {\n    var baseCoord;\n    if (isArray(options)) {\n        options = {coords: options};\n    }\n    if (isObject(options) && isArray(options.coords)) {\n        Coordinate.arrToNumeric(options.coords);\n        if (options.coords.length !== 2) {\n            throw new Error('expected exactly 2 params [r, t]');\n        }\n        baseCoord = {\n            label: 'polar',\n            coords: options.coords\n        };\n        baseCoord = extend(baseCoord, options);\n        return new Coordinate(baseCoord);\n    }\n    throw new Error('expected array of [r, t] options');\n};\n\n\n\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.spherical = function(options) { return Coordinate.sph(options); };\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.sph = function(options) {\n    var baseCoord;\n    if (isArray(options)) {\n        options = {coords: options};\n    }\n    if (isObject(options) && isArray(options.coords)) {\n        Coordinate.arrToNumeric(options.coords);\n        if (options.coords.length !== 3) {\n            throw new Error('expected exactly 3 params [r, t, p]');\n        }\n        baseCoord = {\n            label: 'spherical',\n            coords: options.coords\n        };\n        baseCoord = extend(baseCoord, options);\n        return new Coordinate(baseCoord);\n    }\n    throw new Error('expected options w/ array of [r, t, p] coords');\n};\n\n\n\n/**\n * Mutates an array of number-like looking values to purely numeric array\n * @example\n * [5, '2.4', '0'] => [5, 2.4, 0]\n * @param  {Array} nums\n * @return {undefined}\n */\nCoordinate.arrToNumeric = function(nums) {\n    var num;\n    if (!isArray(nums)) {\n        throw new TypeError(\"expected array of number-like values\");\n    }\n    for (var i = nums.length - 1; i >= 0; i--) {\n        num = nums[i];\n        if (typeof num === 'string') {\n            num = parseFloat(num);\n        }\n        if (!isNumber(num)) {\n            throw new TypeError(num + ' not numeric or numeric-like');\n        }\n    }\n};\n\n\n\n/**\n * Convert polar to 2d cartesian coordinates\n * @param  {Array}   rt        [radis, theta]\n * @param  {Boolean} isDegree specifies units\n * @return {Array}  [x, y]\n */\nCoordinate.polarToCart2d = function(rt, isDegree) {\n    var r, t, x, y;\n    r = rt[0];\n    t = rt[1];\n    if (isDegree) {\n        t = t * (1/degPerRadian);\n    }\n    x = r * Math.cos(t);\n    y = r * Math.sin(t);\n    return [x, y];\n};\n\n\n\n/**\n * Convert cartesian 2d to polar coordinates\n * @param  {Array}  xy\n * @param {Boolean=} isDegree overrides default radian theta assumption\n * @param  {Array=} center [x, y] coords of center of circle.  Defaults to [0, 0],\n * however may be offset.  Note. Such functionality not supported yet for converting\n * polar to cartesian\n * @return {Array}  [radius, theta]\n */\nCoordinate.cartesian2dToPolar = function(xy, isDegree, center) {\n    var x, y, r, t;\n    if (!isArray(xy) && xy.length !== 2) {\n        throw new TypeError('expected [x, y] xy array');\n    }\n    x = xy[0];\n    y = xy[1];\n    if (center && !isArray(center) && center.length !== 2) {\n        throw new TypeError('expected [x, y] center array');\n    }\n    if (center) {\n        x = x - center[0];\n        y = y - center[1];\n    }\n    r = Math.sqrt(x*x + y*y);\n    t = Math.atan2(y, x);\n    if (isDegree) {\n        t = t * degPerRadian;\n    }\n    return [r, t];\n};\n\n\n\n/**\n * Convert 3d cartesian to 3d cylindrical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y] coords of center of circle\n * @return {Array}      [radius, theta, z]\n */\nCoordinate.cartesian3dToCylindrical = function (xyz, isDegree, center) {\n    var x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        rt;\n    rt = Coordinate.cartesian2dToPolar([x, y], isDegree, center);\n    return [rt[0], rt[1], z];\n};\n\n\n\n/**\n * Convert 3d cartesian to 3d spherical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y, z] coords of center of circle\n * @return {Array}      [radius, theta, phi]\n */\nCoordinate.cartesian3dToSpherical = function (xyz, isDegree, center) {\n    if (center && center.length !== 3) {\n        throw new Error('expected center value to have [x, y, z] coords' +\n            'for locating sphere center');\n    }\n    var x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        x2, y2, z2,\n        r, t, p;\n    if (center) {\n        x = x - center[0];\n        y = y - center[1];\n        z = z - center[2];\n    }\n    x2 = x*x; y2 = y*y; z2 = z*z;\n    r = Math.sqrt(x2 + y2 + z2);\n    if (!r) {\n        p = t = 0;\n    } else {\n        t = Math.atan2(y,x);\n        p = Math.atan2(Math.sqrt(x2 + y2), z);\n        if (isDegree) {\n            t = t * degPerRadian;\n            p = p * degPerRadian;\n        }\n    }\n    return [r, t, p];\n};\n\n\n\n/**\n * Convert a cylindrical to a spherical coordinates\n * @param  {Array}   rtz\n * @param  {Boolean} isDegree\n * @return {Array}   [radius, theta, phi]\n */\nCoordinate.cylindricalToSpherical = function(rtz, isDegree) {\n    var r = rtz[0], t = rtz[1], z = rtz[2];\n    var sr, sp; // sphere radius, sphere theta...\n    if (isDegree) {\n        t = t / degPerRadian;\n    }\n    sr = Math.sqrt(r*r + z*z);\n    sp = Math.atan2(r, z);\n    if (isDegree) {\n        sp = sp * degPerRadian;\n        t = t * degPerRadian;\n    }\n    return [sr, t, sp];\n};\n\n\n\n/**\n * Convert spherical to a cartesian coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\nCoordinate.sphericalToCart3d = function (rtp, isDegree) {\n    var r = rtp[0], t = rtp[1], p = rtp[2],\n        x,y,z;\n    if (isDegree) {\n        t = t / degPerRadian;\n        p = p / degPerRadian;\n    }\n    x = r * Math.sin(p) * Math.cos(t);\n    y = r * Math.sin(p) * Math.sin(t);\n    z = r * Math.cos(p);\n    return [x, y, z];\n};\n\n\n\n/**\n * Convert spherical to cylindrical coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\nCoordinate.sphericalToCylindrical = function (rtp, isDegree) {\n    var r = rtp[0], t = rtp[1], p = rtp[2],\n        cr, z;\n    if (isDegree) {\n        t = t / degPerRadian;\n        p = p / degPerRadian;\n    }\n    cr = r * Math.sin(p);\n    z = r * Math.cos(p);\n    if (isDegree) {\n        t = t * degPerRadian;\n        p = p * degPerRadian;\n    }\n    return [cr, t, z];\n};\n\nmodule.exports = Coordinate;\n","var toString = Object.prototype.toString;\nvar nativeIsArray = Array.isArray;\n\n\nmodule.exports = nativeIsArray || function isArray(obj) {\n    return toString.call(obj) === '[object Array]';\n};\n","var toString = Object.prototype.toString;\n\n\nmodule.exports = function isNumber(obj) {\n    return toString.call(obj) === '[object Number]';\n};\n","var isObject = require('amp-is-object');\n\n\nmodule.exports = function(obj) {\n    if (!isObject(obj)) return obj;\n    var source, prop;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n        source = arguments[i];\n        for (prop in source) {\n            obj[prop] = source[prop];\n        }\n    }\n    return obj;\n};\n"],"sourceRoot":""}