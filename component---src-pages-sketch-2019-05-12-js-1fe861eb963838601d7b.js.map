{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/12.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","maxDist","SLICES","random","vertices","setup","createCanvas","Array","from","floor","theta","TWO_PI","r","height","forEach","i","push","vector","polarToCartesian","width","reached","hue","map","sin","filter","x","y","dist","background","colorMode","HSB","strokeWeight","draw","reachedVector","unreachedIndex","reachedVertices","shortestDist","vertex","thisDist","stroke","lerpLine","noStroke","fill","rect","v","length","noLoop","text","pop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"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","file":"component---src-pages-sketch-2019-05-12-js-1fe861eb963838601d7b.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const SLICES = p.random([2, 3, 5]);\n\n  let vertices = [];\n  let maxDist;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n\n    Array.from(Array(p.floor(3000 / SLICES)), () => ({\n      theta: p.random(p.TWO_PI / SLICES),\n      r: p.random(p.height / 2),\n    })).forEach(({ theta, r }) => {\n      for (let i = 0; i < SLICES; i++) {\n        vertices.push({\n          vector: polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            theta + (p.TWO_PI / SLICES) * i,\n            r\n          ),\n          reached: false,\n          hue: p.map(p.sin(theta + (p.TWO_PI / SLICES) * i), -1, 1, 0, 100),\n        });\n      }\n    });\n    vertices = vertices.filter(\n      ({ vector }) =>\n        vector.x > 0 &&\n        vector.x < p.width &&\n        vector.y > 0 &&\n        vector.y < p.height\n    );\n    vertices.push({\n      vector: {\n        x: p.width / 2,\n        y: p.height / 2,\n      },\n      reached: true,\n      hue: 0,\n    });\n\n    maxDist = p.dist(0, 0, p.width, p.height);\n\n    p.background(0);\n    p.colorMode(p.HSB, 100);\n    p.strokeWeight(2);\n  };\n\n  p.draw = function() {\n    const reachedVertices = vertices.filter(({ reached }) => reached);\n\n    let shortestDist = maxDist;\n    let reachedVector;\n    let unreachedIndex;\n\n    vertices.forEach((vertex, i) => {\n      if (!vertex.reached) {\n        reachedVertices.forEach(({ vector, hue }) => {\n          const thisDist = p.dist(\n            vector.x,\n            vector.y,\n            vertex.vector.x,\n            vertex.vector.y\n          );\n          if (thisDist < shortestDist) {\n            shortestDist = thisDist;\n            unreachedIndex = i;\n            reachedVector = vector;\n          }\n        });\n      }\n    });\n\n    p.stroke(vertices[unreachedIndex].hue, 80, 100);\n    lerpLine(\n      p,\n      reachedVector.x,\n      reachedVector.y,\n      vertices[unreachedIndex].vector.x,\n      vertices[unreachedIndex].vector.y,\n      p.map(\n        p.dist(p.width / 2, p.height / 2, reachedVector.x, reachedVector.y),\n        0,\n        maxDist / 2,\n        0.1,\n        0.5\n      ),\n      false\n    );\n\n    vertices[unreachedIndex].reached = true;\n\n    p.push();\n    p.noStroke();\n    p.fill(\"black\");\n    p.rect(0, 0, 100, 20);\n\n    if (vertices.filter(v => v.reached).length === vertices.length) {\n      p.noLoop();\n    } else {\n      p.fill(\"white\");\n      p.text(vertices.length - vertices.filter(v => v.reached).length, 0, 18);\n    }\n\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Be patient.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}