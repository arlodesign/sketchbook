{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/22.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","max","hue","random","lightness","radius","iterations","setup","createCanvas","background","colorMode","HSL","blendMode","HARD_LIGHT","dist","width","height","draw","console","log","pow","angle","TWO_PI","stroke","lerp","line","apply","polarToCartesian","concat","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"wIAIMA,EAAS,SAASC,GACtB,IAGIC,EAHAC,EAAMF,EAAEG,OAAO,EAAG,IAClBC,EAAY,GAGZC,EAAS,EACTC,EAAa,EAEjBN,EAAEO,MAAQ,WACRP,EAAEQ,aAAa,IAAK,KACpBR,EAAES,WAAW,GACbT,EAAEU,UAAUV,EAAEW,IAAK,KACnBX,EAAEY,UAAUZ,EAAEa,YAEdZ,EAAMD,EAAEc,KAAK,EAAG,EAAGd,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,IAG7ChB,EAAEiB,KAAO,WACPC,QAAQC,IAAId,GAAUJ,EAAMD,EAAEoB,IAAId,EAAY,MAC9C,IAAK,IAAIe,EAAQ,EAAGA,EAAQrB,EAAEsB,OAAQD,GAAS,EAAIhB,EACjDL,EAAEG,SAAWE,GAAUJ,EAAMK,GACzBN,EAAEuB,OAAOvB,EAAEwB,KAAKtB,EAAKA,EAAM,GAAIF,EAAEG,UAAW,IAAKC,EAAW,IAC5DJ,EAAEuB,OAAO,EAAG,GAChBvB,EAAEyB,KAAFC,MAAA1B,EACK2B,YACD3B,EAAEe,MAAQ,EACVf,EAAEgB,OAAS,EACXK,EACAhB,EAASL,EAAEG,OAAO,EAAG,GAAKG,IAC1B,GANHsB,OAQID,YACD3B,EAAEe,MAAQ,EACVf,EAAEgB,OAAS,EACXK,EACAhB,EAASL,EAAEG,OAAO,EAAG,GAAKG,IAC1B,OAIND,EACaJ,IACXI,EAAS,EACTC,KACAF,GAAa,GACD,GAAKJ,EAAE6B,YAKVC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcpC,OAAQA,EAAQqC,KAAMJ,EAASK,SAAUC,YAAY,wCCvDrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQvB,EAAOwB,GACxC,OAAOD,EAASE,KAAKC,IAAI1B,GAASwB,GAE9BH,EAAoB,SAACE,EAAQvB,EAAOwB,GACxC,OAAOD,EAASE,KAAKE,IAAI3B,GAASwB,GAa9BF,EAA0B,SAC9BM,EACAC,EACA7B,EACA8B,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKC,IAAI1B,GAAS8B,EAChCI,EAAIL,EAAUJ,KAAKE,IAAI3B,GAAS+B,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB5B,IAzBU,SACvBsB,EACAC,EACA7B,EACAwB,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAAS5B,EAAOwB,GACtCU,EAAIb,EAAkBQ,EAAS7B,EAAOwB,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-04-22-js-a375e285a547fe8f0f1e.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let hue = p.random(0, 66);\n  let lightness = 60;\n  let img;\n  let max;\n  let radius = 1;\n  let iterations = 1;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSL, 100);\n    p.blendMode(p.HARD_LIGHT);\n\n    max = p.dist(0, 0, p.width / 2, p.height / 2);\n  };\n\n  p.draw = function() {\n    console.log(radius / (max * p.pow(iterations, 10)));\n    for (let angle = 0; angle < p.TWO_PI; angle += 1 / radius) {\n      p.random() < radius / (max * iterations)\n        ? p.stroke(p.lerp(hue, hue + 33, p.random()), 100, lightness, 50)\n        : p.stroke(0, 0);\n      p.line(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          angle,\n          radius - p.random(0, 10 / iterations),\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          angle,\n          radius + p.random(0, 20 / iterations),\n          true\n        )\n      );\n    }\n    radius++;\n    if (radius > max) {\n      radius = 1;\n      iterations++;\n      lightness /= 2;\n      lightness < 5 && p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}