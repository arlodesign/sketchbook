{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/25.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","speed1","speed2","speed3","r1","r2","r3","spheres","setup","createCanvas","WEBGL","random","TWO_PI","noStroke","color","setTimeout","draw","background","directionalLight","min","frameCount","cos","sin","camera","SIZE","forEach","s","i","push","specularMaterial","translate","apply","sphere","map","pop","polarToCartesianX","polarToCartesianY","length","shift","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","__webpack_require__","d","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian"],"mappings":"sIAIMA,EAAS,SAASC,GACtB,IAEIC,EACAC,EACAC,EACAC,EAAK,EACLC,EAAK,EACLC,EAAK,EAELC,EAAU,GAEdP,EAAEQ,MAAQ,WACRR,EAAES,aAAa,IAAK,IAAKT,EAAEU,OAC3BT,EAAUD,EAAEW,OAAO,GAAK,IAAOX,EAAEY,OAAUZ,EAAEW,OAAO,EAAE,EAAG,IACzDT,EAAUF,EAAEW,OAAO,GAAK,IAAOX,EAAEY,OAAUZ,EAAEW,OAAO,EAAE,EAAG,IACzDR,EAAUH,EAAEW,OAAO,GAAK,IAAOX,EAAEY,OAAUZ,EAAEW,OAAO,EAAE,EAAG,IACzDX,EAAEa,WACFb,EAAEc,MAAM,KACRC,WAAW,aAAU,OAGvBf,EAAEgB,KAAO,WACPhB,EAAEiB,WAAW,KACbjB,EAAEkB,iBACAlB,EAAEmB,IAAInB,EAAEoB,WAAY,KACpBpB,EAAEmB,IAAInB,EAAEoB,WAAY,KACpBpB,EAAEmB,IAAInB,EAAEoB,WAAY,KACpBpB,EAAEqB,IAAIrB,EAAEoB,WAAa,KACrBpB,EAAEsB,IAAItB,EAAEoB,WAAa,KACrBpB,EAAEsB,IAAItB,EAAEoB,WAAa,KAAO,GAE9BpB,EAAEuB,OACA,IAAAvB,EAAEsB,IAAItB,EAAEoB,WAAF,KACN,IAAApB,EAAEqB,IAAIrB,EAAEoB,WAAF,KACNI,IACA,EACA,EACA,EACA,EACA,EACA,GAEFjB,EAAQkB,QAAQ,SAACC,EAAGC,GAClB3B,EAAE4B,OACF5B,EAAE6B,iBAAiB,KACnB7B,EAAE8B,UAAFC,MAAA/B,EAAe0B,GACf1B,EAAEgC,OAAOhC,EAAEiC,IAAIN,EAAG,EA7CJH,IA6CkB,EAAG,KACnCxB,EAAEkC,QAEJ3B,EAAQqB,KAAK,CACXO,YAAkB,EAAG/B,EAlDZ,KAmDTgC,YAAkB,EAAG/B,EAnDZ,KAoDTL,EAAEoB,WAAa,EACXe,YAAkB,EAAG7B,EArDhB,KAsDL8B,YAAkB,EAAG9B,EAtDhB,OAwDXC,EAAQ8B,OAvDQb,KAuDcjB,EAAQ+B,QACtClC,GAAMH,EACNI,GAAMH,EACNI,GAAMH,IAIKoC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAc7C,OAAQA,EAAQ8C,KAAMJ,EAASK,8CCrE/CC,EAAAC,EAAAT,EAAA,sBAAAJ,IAAAY,EAAAC,EAAAT,EAAA,sBAAAH,IAAAW,EAAAC,EAAAT,EAAA,sBAAAU,IAAA,IAAMd,EAAoB,SAACe,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKhC,IAAI8B,GAASC,GAE9BhB,EAAoB,SAACc,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK/B,IAAI6B,GAASC,GAa9BH,EAA0B,SAC9BK,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUD,KAAKhC,IAAI8B,GAASK,EAChCI,EAAIL,EAAUF,KAAK/B,IAAI6B,GAASM,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAJ,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIxB,EAAkBmB,EAASH,EAAOC,GACtCQ,EAAIxB,EAAkBmB,EAASJ,EAAOC,GAC5C,OAAOM,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-01-25-js-414428c517dec87932be.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { polarToCartesianX, polarToCartesianY } from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SIZE = 200;\n  const BOX_COUNT = SIZE * 10;\n  let speed1;\n  let speed2;\n  let speed3;\n  let r1 = 0;\n  let r2 = 0;\n  let r3 = 0;\n  let variant;\n  let spheres = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n    speed1 = (p.random(0.1, 0.2) / p.TWO_PI) * p.random([-1, 1]);\n    speed2 = (p.random(0.3, 0.4) / p.TWO_PI) * p.random([-1, 1]);\n    speed3 = (p.random(0.5, 0.6) / p.TWO_PI) * p.random([-1, 1]);\n    p.noStroke();\n    p.color(255);\n    setTimeout(() => {}, 45000);\n  };\n\n  p.draw = function() {\n    p.background(255);\n    p.directionalLight(\n      p.min(p.frameCount, 255),\n      p.min(p.frameCount, 255),\n      p.min(p.frameCount, 255),\n      p.cos(p.frameCount / 100),\n      p.sin(p.frameCount / 200),\n      p.sin(p.frameCount / 100) / 2\n    );\n    p.camera(\n      p.sin(p.frameCount / (SIZE * 5)) * (SIZE * 2),\n      p.cos(p.frameCount / (SIZE * 5)) * (SIZE * 2),\n      SIZE * 2,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    );\n    spheres.forEach((s, i) => {\n      p.push();\n      p.specularMaterial(255);\n      p.translate(...s);\n      p.sphere(p.map(i, 0, BOX_COUNT, 0, 10));\n      p.pop();\n    });\n    spheres.push([\n      polarToCartesianX(0, r1, SIZE),\n      polarToCartesianY(0, r2, SIZE),\n      p.frameCount % 2\n        ? polarToCartesianX(0, r3, SIZE)\n        : polarToCartesianY(0, r3, SIZE),\n    ]);\n    spheres.length > BOX_COUNT && spheres.shift();\n    r1 += speed1;\n    r2 += speed2;\n    r3 += speed3;\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}