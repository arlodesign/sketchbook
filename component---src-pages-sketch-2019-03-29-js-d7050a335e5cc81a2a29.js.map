{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/29.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","focus","minDist","SPEED","random","SPEED_A","TWO_PI","SPEED_B","angleA","angleB","PI","setup","createCanvas","background","createVector","randomGaussian","width","height","min","dist","x","y","draw","pointA","map","sin","pointB","polarToCartesian","noise","frameCount","size","a","stroke","point","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"uIAIMA,EAAS,SAASC,GACtB,IAKIC,EAGAC,EAPEC,EAAQH,EAAEI,OAAO,IAAM,IACvBC,EAAUF,EAAQH,EAAEM,OACpBC,EAAmB,GAARJ,EAAeH,EAAEM,OAG9BE,EAAS,EACTC,EAAST,EAAEU,GAGfV,EAAEW,MAAQ,WACRX,EAAEY,aAAa,IAAK,KACpBZ,EAAEa,WAAW,GACbZ,EAAQD,EAAEc,aACRd,EAAEe,eAAef,EAAEgB,MAAQ,EAAGhB,EAAEgB,MAAQ,IACxChB,EAAEe,eAAef,EAAEiB,OAAS,EAAGjB,EAAEiB,OAAS,KAE5Cf,EAAUF,EAAEkB,IACVlB,EAAEmB,KAAKlB,EAAMmB,EAAGnB,EAAMoB,EAAGrB,EAAEgB,MAAOhB,EAAEiB,QACpCjB,EAAEmB,KAAKlB,EAAMmB,EAAGnB,EAAMoB,EAAG,EAAG,GAC5BrB,EAAEmB,KAAKlB,EAAMmB,EAAGnB,EAAMoB,EAAG,EAAGrB,EAAEiB,QAC9BjB,EAAEmB,KAAKlB,EAAMmB,EAAGnB,EAAMoB,EAAGrB,EAAEgB,MAAO,KAItChB,EAAEsB,KAAO,WAkBP,IAjBA,IAAMC,EAAS,CACbvB,EAAEgB,MAAQ,EACVhB,EAAEwB,IAAIxB,EAAEyB,IAAIjB,IAAU,EAAG,EAAc,IAAXR,EAAEiB,OAA0B,IAAXjB,EAAEiB,SAE3CS,EAASC,IAAgB,WAAhB,EACVJ,EADU,QAEbd,EACCT,EAAEgB,MAAQ,EAAKhB,EAAE4B,MAAM,KAAO,KAAO5B,EAAE6B,WAAa,QAEjDC,EAAO9B,EAAEwB,IACbxB,EAAEmB,KAAKO,EAAON,EAAGM,EAAOL,EAAGpB,EAAMmB,EAAGnB,EAAMoB,GAC1C,EACAnB,EACA,EAvCS,IA2CF6B,EAAI,EAAGA,EAAI/B,EAAEM,OAAQyB,GAAK,GAAM/B,EAAEM,OACzCN,EAAEgC,OAAO,IAAKhC,EAAEwB,IAAIM,EAAM,EA5CjB,GA4C0B,GAAI,IAAK,IAC5C9B,EAAEiC,MAAF,MAAAjC,EACK2B,YACDD,EAAON,EACPM,EAAOL,EACPU,EACA/B,EAAEe,eAAe,EAAGe,IACpB,IAMNrB,GAAUF,GADVC,GAAUH,GAGGL,EAAEM,SAAQE,EAAS,GAE5BC,EAAoB,EAAXT,EAAEM,QAAYN,EAAEkC,WAIlB,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcpC,OAAQA,EAAQqC,KAAMD,EAASE,SAAUC,YAAY,O,iCCvErE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKlB,IAAIgB,GAASC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM/B,EAAI2B,EAAUJ,KAAKC,IAAIH,GAASQ,EAChC5B,EAAI2B,EAAUL,KAAKlB,IAAIgB,GAASS,EACtC,OAAOC,EAAU,CAAC/B,EAAGC,GAAK,CAAED,IAAGC,MAIlBM,IAzBU,SACvBoB,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAM/B,EAAImB,EAAkBQ,EAASN,EAAOC,GACtCrB,EAAIwB,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAAC/B,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-29-js-d7050a335e5cc81a2a29.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const BLUR = 50;\n  const SPEED = p.random(0.05, 0.1);\n  const SPEED_A = SPEED / p.TWO_PI;\n  const SPEED_B = (SPEED * 0.1) / p.TWO_PI;\n\n  let focus;\n  let angleA = 0;\n  let angleB = p.PI;\n  let minDist;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    focus = p.createVector(\n      p.randomGaussian(p.width / 2, p.width / 10),\n      p.randomGaussian(p.height / 2, p.height / 10)\n    );\n    minDist = p.min(\n      p.dist(focus.x, focus.y, p.width, p.height),\n      p.dist(focus.x, focus.y, 0, 0),\n      p.dist(focus.x, focus.y, 0, p.height),\n      p.dist(focus.x, focus.y, p.width, 0)\n    );\n  };\n\n  p.draw = function() {\n    const pointA = [\n      p.width / 2,\n      p.map(p.sin(angleA), -1, 1, p.height * 0.25, p.height * 0.75),\n    ];\n    const pointB = polarToCartesian(\n      ...pointA,\n      angleB,\n      (p.width / 2) * p.noise(0.001, 0.002, p.frameCount / 1000)\n    );\n    const size = p.map(\n      p.dist(pointB.x, pointB.y, focus.x, focus.y),\n      0,\n      minDist,\n      1,\n      BLUR\n    );\n\n    for (let a = 0; a < p.TWO_PI; a += 0.1 / p.TWO_PI) {\n      p.stroke(255, p.map(size, 1, BLUR, 10, 0.5, true));\n      p.point(\n        ...polarToCartesian(\n          pointB.x,\n          pointB.y,\n          a,\n          p.randomGaussian(1, size),\n          true\n        )\n      );\n    }\n\n    angleA += SPEED_A;\n    angleB += SPEED_B;\n\n    if (angleA > p.TWO_PI) angleA = 0;\n\n    if (angleB > p.TWO_PI * 2) p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}