{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2020/01/27.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","sketch","p","margin","RENDER","getURLParams","render","HUE","random","setup","pixelDensity","frameRate","createCanvas","background","createLoop","gif","open","noiseRadius","colorMode","HSB","blendMode","HARD_LIGHT","noFill","width","draw","animLoop","theta","noise1D","translate","height","bp","stroke","ease","abs","strokeWeight","i","bezierPoint","tx","bezierTangent","ty","a","atan2","push","rotate","line","pop","frameCount","console","info","DURATION","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-01-27-js-946523414071ddc47524.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport { easeInCubic as ease } from \"~lib/easing\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 30;\n  const RATE = 60;\n  const STEPS = 12;\n  const HUE_OFFSET = 0.2;\n  const HUE = p.random(HUE_OFFSET, 1 - HUE_OFFSET);\n\n  let margin;\n\n  p.setup = function() {\n    p.pixelDensity(RENDER ? 2 : 1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.2,\n    });\n    p.colorMode(p.HSB, 1);\n    p.blendMode(p.HARD_LIGHT);\n    p.noFill();\n\n    margin = p.width / 20;\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n\n    p.translate(p.width / 2, p.height / 2);\n\n    const bp = [\n      ...polarToCartesian(0, 0, theta, p.width / 2 - p.width / 20, true),\n      noise1D(1) * (p.width / 2),\n      noise1D(2) * (p.height / 2 - margin),\n      noise1D(3) * (p.width / 2),\n      noise1D(4) * (p.height / 2 - margin),\n      0,\n      0,\n    ];\n\n    p.stroke(\n      HUE + noise1D(5) * HUE_OFFSET,\n      0.5,\n      1,\n      ease(0.5 - p.abs(p.sin(theta * 4))) + 0.25\n    );\n    p.strokeWeight(2);\n\n    for (let i = 0; i < STEPS; i++) {\n      let t = i / STEPS;\n      let x = p.bezierPoint(bp[0], bp[2], bp[4], bp[6], t);\n      let y = p.bezierPoint(bp[1], bp[3], bp[5], bp[7], t);\n      let tx = p.bezierTangent(bp[0], bp[2], bp[4], bp[6], t);\n      let ty = p.bezierTangent(bp[1], bp[3], bp[5], bp[7], t);\n      let a = p.atan2(ty, tx);\n\n      p.push();\n      p.translate(x, y);\n      p.rotate(a + theta);\n      p.line(-3 * (i + 1), 0, 3 * (i + 1), 0);\n      p.pop();\n    }\n\n    p.frameCount % 100 === 0 &&\n      console.info(`${p.frameCount} / ${DURATION * RATE}`);\n    !RENDER && p.frameCount === DURATION * RATE && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}