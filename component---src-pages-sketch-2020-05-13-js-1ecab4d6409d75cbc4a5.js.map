{"version":3,"sources":["webpack:///./src/pages/sketch/2020/05/13.js"],"names":["sketch","p","mask","RENDER","getURLParams","render","setup","pixelDensity","frameRate","createCanvas","background","createLoop","gif","open","noiseRadius","createGraphics","width","height","noStroke","fill","circle","draw","animLoop","progress","noise2D","canvas","theta","noFill","noSmooth","translate","j","i","ellipse","map","canvasPixels","get","image","frameCount","console","info","floor","DURATION","location","path","pathname","description"],"mappings":"kKAIMA,EAAS,SAAUC,GACvB,IAKIC,EALEC,EAASF,EAAEG,eAAeC,OAOhCJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,GACfN,EAAEO,UAPS,IAQXP,EAAEQ,aAAa,IAAK,KACpBR,EAAES,WAAW,KACbT,EAAEU,WAXa,GAWQ,CACrBC,MAAKT,GAAS,CAAEE,QAAQ,EAAOQ,MAAM,GACrCC,YAAa,MAGfZ,EAAOD,EAAEc,eAAed,EAAEe,MAAOf,EAAEgB,SAC9BC,WACLhB,EAAKiB,KAAK,GACVjB,EAAKkB,OAAOnB,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,EAAa,GAAVhB,EAAEe,QAG3Cf,EAAEoB,KAAO,WAAa,IAAD,EACkBpB,EAAEqB,SAA/BC,EADW,EACXA,SAAUC,EADC,EACDA,QACZC,GAFa,EACQC,MACZzB,EAAEc,eAAed,EAAEe,MAAOf,EAAEgB,SAE3ChB,EAAES,WAAW,KAEbe,EAAOf,WAAW,KAClBe,EAAOE,SACPF,EAAOG,WACPH,EAAOI,UAAU5B,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,GAEzC,IAAK,IAAIa,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,GAhCN,IAgCkBA,IAC1BN,EAAOO,QACLR,EAAQM,EAAG,IAAM7B,EAAEe,MAAQ,IAC3BQ,EAAQM,EAAI,EAAG,IAAM7B,EAAEe,MAAQ,IAC/BS,EAAOR,QACJc,EArCG,KAsCJ9B,EAAEgC,IAAIT,EAAQM,EAAI,EAAG,IAAK,EAAG,EAAG,IAAK,KACvCL,EAAOR,QACJc,EAxCG,KAyCJ9B,EAAEgC,IAAIT,EAAQM,EAAI,EAAG,IAAK,EAAG,EAAG,IAAK,MAK7C,IAAMI,EAAeT,EAAOU,MAC5BD,EAAahC,KAAKA,GAClBD,EAAEmC,MAAMF,EAAc,EAAG,GAEzBjC,EAAEoC,WAAa,KAAQ,GAAKC,QAAQC,KAAQtC,EAAEuC,MAAiB,IAAXjB,GAAxB,KACvBpB,GAA2BsC,MAAjBxC,EAAEoC,YACfC,QAAQC,KAAK,UAKJ,0BAAGG,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc1C,OAAQA,EAAQ2C,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-05-13-js-1ecab4d6409d75cbc4a5.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\n\nconst sketch = function (p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 20;\n  const RATE = 30;\n  const LINES = 200;\n\n  let mask;\n\n  p.setup = function () {\n    p.pixelDensity(1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n\n    mask = p.createGraphics(p.width, p.height);\n    mask.noStroke();\n    mask.fill(0);\n    mask.circle(p.width / 2, p.height / 2, p.width * 0.8);\n  };\n\n  p.draw = function () {\n    const { progress, noise2D, theta } = p.animLoop;\n    const canvas = p.createGraphics(p.width, p.height);\n\n    p.background(255);\n\n    canvas.background(255);\n    canvas.noFill();\n    canvas.noSmooth();\n    canvas.translate(p.width / 2, p.height / 2);\n\n    for (let j = 1; j <= 3; j++) {\n      for (let i = 1; i <= LINES; i++) {\n        canvas.ellipse(\n          noise2D(j, 1) * (p.width / 10),\n          noise2D(j + 1, 2) * (p.width / 10),\n          canvas.height *\n            (i / LINES) *\n            p.map(noise2D(j + 2, 3), -1, 1, 1.5, 1.7),\n          canvas.height *\n            (i / LINES) *\n            p.map(noise2D(j + 3, 4), -1, 1, 1.5, 1.7)\n        );\n      }\n    }\n\n    const canvasPixels = canvas.get();\n    canvasPixels.mask(mask);\n    p.image(canvasPixels, 0, 0);\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (!RENDER && p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}