{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/07.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","w","h","SIZES","gridSize","iterations","grid","Doodad","x","y","size","this","drawFunc","random","drawBackslash","drawSlash","stroke","lerpLine","setup","createCanvas","background","noFill","draw","length","strokeWeight","floor","width","height","xx","push","yy","visited","concat","filter","overlap","Math","max","s","noLoop","SketchPage","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"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","file":"component---src-pages-sketch-2019-05-07-js-4000f7b32238e8ad8a60.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const SIZES = [1, 2, 3, 5, 8];\n\n  let gridSize = 60;\n  let iterations = 3;\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * gridSize;\n      this.y = y * gridSize;\n      this.size = size * gridSize;\n\n      this.drawFunc = p.random() < 0.1 ? this.drawBackslash : this.drawSlash;\n      p.stroke(p.random() < 0.3 ? 255 : 0);\n      this.drawFunc();\n    }\n    drawSlash() {\n      lerpLine(\n        p,\n        this.x,\n        this.y + this.size,\n        this.x + this.size,\n        this.y,\n        p.random()\n      );\n    }\n    drawBackslash() {\n      lerpLine(\n        p,\n        this.x,\n        this.y,\n        this.x + this.size,\n        this.y + this.size,\n        p.random()\n      );\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(128);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    if (grid.length == 0) {\n      p.strokeWeight(gridSize / 3);\n\n      w = p.floor(p.width / gridSize);\n      h = p.floor(p.height / gridSize);\n\n      for (let xx = 0; xx < w; xx++) {\n        grid.push([]);\n        for (let yy = 0; yy < h; yy++) {\n          grid[xx].push({\n            x: xx,\n            y: yy,\n            visited: false,\n          });\n        }\n      }\n    }\n\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      iterations--;\n      if (iterations > 0) {\n        gridSize /= 3;\n        grid = [];\n      } else {\n        p.noLoop();\n      }\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}