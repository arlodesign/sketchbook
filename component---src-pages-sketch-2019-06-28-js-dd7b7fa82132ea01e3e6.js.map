{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/28.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","HUE","random","angle","alpha","setup","createCanvas","colorMode","HSB","background","noFill","strokeWeight","draw","NOISE","noise","frameCount","blendMode","SCREEN","stroke","map","cos","i","lerpLine","apply","width","height","concat","polarToCartesian","TWO_PI","noLoop","min","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","sin","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"iJAKMA,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IAEjBC,EAAQ,EACRC,EAAQ,EAEZJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,KACnBR,EAAES,WAAWR,EAAK,GAAI,GACtBD,EAAEU,SACFV,EAAEW,aAAa,IAGjBX,EAAEY,KAAO,WACP,IAAMC,EAAQb,EAAEc,MAAMd,EAAEe,WAAa,IAAKZ,GAE1CH,EAAEgB,UAAUhB,EAAEiB,QACdjB,EAAEkB,OAAOlB,EAAEmB,IAAInB,EAAEoB,IAAIjB,EAlBR,IAkB0B,EAAG,EAAGF,EAAKA,EAAM,IAAK,GAAI,GAAIG,GAErE,IAAK,IAAIiB,EAAI,EAAGA,EApBH,EAoBeA,IAC1BC,IAAQC,WAAR,GACEvB,EACAA,EAAEwB,MAAQ,EACVxB,EAAEyB,OAAS,GAHbC,OAIKC,YACD3B,EAAEwB,MAAQ,EACVxB,EAAEyB,OAAS,EACXtB,EAASkB,EAAIrB,EAAE4B,OA5BR,EA6BP5B,EAAEyB,OAASZ,GACX,GATJ,CAWEA,GACA,MAIJV,GAAS,MArCI,EAuCDH,EAAE4B,QACZxB,GAAS,MACD,GAAKJ,EAAE6B,SAEfzB,EAAQJ,EAAE8B,IAAI1B,EAAQ,GAAK,IA3ChB,KAgDF2B,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcrC,OAAQA,EAAQsC,KAAMJ,EAASK,SAAUC,YAAY,wCCvDrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQ1C,EAAO2C,GACxC,OAAOD,EAASE,KAAK3B,IAAIjB,GAAS2C,GAE9BH,EAAoB,SAACE,EAAQ1C,EAAO2C,GACxC,OAAOD,EAASE,KAAKC,IAAI7C,GAAS2C,GAa9BF,EAA0B,SAC9BK,EACAC,EACA/C,EACAgD,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUF,KAAK3B,IAAIjB,GAASgD,EAChCI,EAAIL,EAAUH,KAAKC,IAAI7C,GAASiD,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB5B,IAzBU,SACvBsB,EACAC,EACA/C,EACA2C,EACAO,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAAS9C,EAAO2C,GACtCS,EAAIZ,EAAkBO,EAAS/C,EAAO2C,GAC5C,OAAOO,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,wCCflBxB,EAAA,WAAS/B,EAAGwD,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChB7D,EAAEE,SAAW6D,GAAK/D,EAAEgE,MAAMhE,EAAEiE,KAAKT,EAAIE,EAAIK,GAAI/D,EAAEiE,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-06-28-js-dd7b7fa82132ea01e3e6.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const LEAVES = 6;\n  const HUE = p.random(70);\n\n  let angle = 0;\n  let alpha = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.background(HUE, 80, 5);\n    p.noFill();\n    p.strokeWeight(4);\n  };\n\n  p.draw = function() {\n    const NOISE = p.noise(p.frameCount / 100, angle);\n\n    p.blendMode(p.SCREEN);\n    p.stroke(p.map(p.cos(angle / LEAVES), -1, 1, HUE, HUE + 30), 80, 75, alpha);\n\n    for (let i = 0; i < LEAVES; i++) {\n      lerpLine(\n        p,\n        p.width / 2,\n        p.height / 2,\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          angle + (i * p.TWO_PI) / LEAVES,\n          p.height * NOISE,\n          true\n        ),\n        NOISE,\n        false\n      );\n    }\n\n    angle += 0.005;\n\n    if (angle > p.TWO_PI * LEAVES) {\n      alpha -= 0.001;\n      alpha < 0 && p.noLoop();\n    } else {\n      alpha = p.min(alpha + 0.1, 100 / LEAVES);\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}