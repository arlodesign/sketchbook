{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/15.js","webpack:///./src/lib/polarToCartesian.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_1__","_lib_polarToCartesian__WEBPACK_IMPORTED_MODULE_2__","sketch","p","distance","angle","size","axis","strokeColor","setup","createCanvas","background","x","width","y","height","setTimeout","noLoop","draw","noFill","strokeWeight","map","noise","Q","stroke","beginShape","i","TWO_PI","thisAngle","_polarToCartesian","polarToCartesian","vertex","endShape","CLOSE","frameCount","_ref","location","a","createElement","path","pathname","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAIMQ,EAAS,SAASC,GACtB,IAEIC,EAAW,EACXC,EAAQ,EACRC,EAAO,IACPC,EAAO,GACPC,EAAc,IAElBL,EAAEM,MAAQ,WACRN,EAAEO,aAAa,IAAK,KACpBP,EAAEQ,WAAW,GACbJ,EAAO,CACLK,EAAGT,EAAEU,MAAQ,EACbC,EAAGX,EAAEY,OAAS,GAEhBC,WAAW,WACTb,EAAEc,UACD,MAGLd,EAAEe,KAAO,WACPf,EAAEgB,SACFhB,EAAEiB,aACAjB,EAAEkB,IAAIlB,EAAEmB,MAAMjB,EAAQ,EAAGD,EAAW,GAAKE,EAAM,EAAGH,EAAEU,MAvB9C,EAuBwDU,IAEhEpB,EAAEqB,OAAOhB,GACTL,EAAEsB,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAIvB,EAAEwB,OAAQD,GAAKvB,EAAEwB,OA3B7B,EA2ByC,CAC/C,IAAMC,EAAYvB,EAAQqB,EADqBG,EAE9BC,YACfvB,EAAKK,EACLL,EAAKO,EACLc,EACAzB,EAAEmB,MAAMjB,EAAQ,EAAGD,EAAW,GAAKE,GAJ7BM,EAFuCiB,EAEvCjB,EAAGE,EAFoCe,EAEpCf,EAMXX,EAAE4B,OAAOnB,EAAGE,GAEdX,EAAE6B,SAAS7B,EAAE8B,OACb5B,GAAS,IACTD,GAAY,GACZE,GAAQ,GACRC,EAAOuB,YACL3B,EAAEU,MAAQ,EACVV,EAAEY,OAAS,EACXV,EA5CM,EA6CE,EAARD,GAEED,EAAE+B,WAAa,KAAQ,IACzB1B,EAA8B,MAAhBA,EAAsB,EAAI,OAK/BZ,EAAA,iBAAAuC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbtC,EAAAuC,EAAAC,cAACtC,EAAA,EAAD,CAAcE,OAAQA,EAAQqC,KAAMH,EAASI,8CC3D/C9C,EAAA+C,EAAA7C,EAAA,sBAAA8C,IAAAhD,EAAA+C,EAAA7C,EAAA,sBAAA+C,IAAAjD,EAAA+C,EAAA7C,EAAA,sBAAAgD,IAAA,IAAMF,EAAoB,SAACG,EAAQxC,EAAOD,GACxC,OAAOyC,EAASC,KAAKC,IAAI1C,GAASD,GAE9BuC,EAAoB,SAACE,EAAQxC,EAAOD,GACxC,OAAOyC,EAASC,KAAKE,IAAI3C,GAASD,GAa9BwC,EAA0B,SAC9BK,EACAC,EACA7C,EACA8C,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMzC,EAAIqC,EAAUH,KAAKC,IAAI1C,GAAS8C,EAChCrC,EAAIoC,EAAUJ,KAAKE,IAAI3C,GAAS+C,EACtC,OAAOC,EAAU,CAACzC,EAAGE,GAAK,CAAEF,IAAGE,MAIlBgB,IAzBU,SACvBmB,EACAC,EACA7C,EACAD,EACAiD,QACG,IADHA,OAAU,GAEV,IAAMzC,EAAI8B,EAAkBO,EAAS5C,EAAOD,GACtCU,EAAI6B,EAAkBO,EAAS7C,EAAOD,GAC5C,OAAOiD,EAAU,CAACzC,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2019-03-15-js-2453673efeca2c45a03b.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const Q = 4;\n\n  let distance = 0;\n  let angle = 0;\n  let size = 100;\n  let axis = {};\n  let strokeColor = 255;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    axis = {\n      x: p.width / 2,\n      y: p.height / 2,\n    };\n    setTimeout(() => {\n      p.noLoop();\n    }, 60000);\n  };\n\n  p.draw = function() {\n    p.noFill();\n    p.strokeWeight(\n      p.map(p.noise(angle / 5, distance / 5) * size, 0, p.width, Q, Q * 2)\n    );\n    p.stroke(strokeColor);\n    p.beginShape();\n    for (let i = 0; i < p.TWO_PI; i += p.TWO_PI / Q) {\n      const thisAngle = angle + i;\n      const { x, y } = polarToCartesian(\n        axis.x,\n        axis.y,\n        thisAngle,\n        p.noise(angle / 5, distance / 5) * size\n      );\n      p.vertex(x, y);\n    }\n    p.endShape(p.CLOSE);\n    angle += 0.01;\n    distance += 0.1;\n    size += 0.5;\n    axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      angle / Q,\n      distance * (Q / 2)\n    );\n    if (p.frameCount % 100 === 0) {\n      strokeColor = strokeColor === 255 ? 0 : 255;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}