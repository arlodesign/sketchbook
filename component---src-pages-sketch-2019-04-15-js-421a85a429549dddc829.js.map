{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/15.js"],"names":["sketch","p","w","h","SIZES","gridSize","iterations","grid","Doodad","x","y","size","this","drawFunc","random","drawBackslash","drawSlash","line","setup","createCanvas","colorMode","HSB","hue","background","stroke","noFill","draw","length","strokeWeight","floor","width","height","xx","push","yy","visited","concat","filter","overlap","Math","max","s","noLoop","SketchPage"],"mappings":"+iBAIA,IAAMA,EAAS,SAASC,GACtB,IAKIC,EACAC,EANEC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAEvBC,EAAW,GACXC,EAAa,EACbC,EAAO,GAILC,EATmB,WAUvB,WAAYC,EAAGC,EAAGC,GAChBC,KAAKH,EAAIA,EAAIJ,EACbO,KAAKF,EAAIA,EAAIL,EACbO,KAAKD,KAAOA,EAAON,EACnBO,KAAKC,SAAWZ,EAAEa,SAAW,GAAMF,KAAKG,cAAgBH,KAAKI,UAC7DJ,KAAKC,WAfgB,2BAiBvBG,UAAA,WACEf,EAAEgB,KAAKL,KAAKH,EAAGG,KAAKF,EAAIE,KAAKD,KAAMC,KAAKH,EAAIG,KAAKD,KAAMC,KAAKF,IAlBvC,EAoBvBK,cAAA,WACEd,EAAEgB,KAAKL,KAAKH,EAAGG,KAAKF,EAAGE,KAAKH,EAAIG,KAAKD,KAAMC,KAAKF,EAAIE,KAAKD,OArBpC,KAyBzBV,EAAEiB,MAAQ,WACRjB,EAAEkB,aAAa,IAAK,KACpBlB,EAAEmB,UAAUnB,EAAEoB,IAAK,KAEnB,IAAMC,EAAMrB,EAAEa,OAAO,KACrBb,EAAEsB,WAAW,IAAMD,EAAK,GAAI,IAC5BrB,EAAEuB,OAAOF,EAAK,GAAI,IAClBrB,EAAEwB,UAGJxB,EAAEyB,KAAO,WAAY,IAAD,IAClB,GAAmB,GAAfnB,EAAKoB,OAAa,CACpB1B,EAAE2B,aAAavB,EAAW,GAE1BH,EAAID,EAAE4B,MAAM5B,EAAE6B,MAAQzB,GACtBF,EAAIF,EAAE4B,MAAM5B,EAAE8B,OAAS1B,GAEvB,IAAK,IAAI2B,EAAK,EAAGA,EAAK9B,EAAG8B,IAAM,CAC7BzB,EAAK0B,KAAK,IACV,IAAK,IAAIC,EAAK,EAAGA,EAAK/B,EAAG+B,IACvB3B,EAAKyB,GAAIC,KAAK,CACZxB,EAAGuB,EACHtB,EAAGwB,EACHC,SAAS,KAbC,MAmBDlC,EAAEa,QACjB,MAAGsB,OAAH,UAAa7B,IAAM8B,QAAO,qBAAGF,YADvB1B,EAnBU,EAmBVA,EAAGC,EAnBO,EAmBPA,EAINH,EAAKE,GAAGC,GAAGyB,SAAU,WACxB,IACIG,EADA3B,EAAO4B,KAAKC,IAAL,MAAAD,KAAYnC,GAGvB,EAAG,CACDkC,GAAU,EACV,IAAK,IAAIN,EAAKvB,EAAGuB,EAAKrB,EAAOF,EAAGuB,IAC9B,IAAK,IAAIE,EAAKxB,EAAGwB,EAAKvB,EAAOD,EAAGwB,KAC1BzB,EAAIE,EAAOT,GAAKQ,EAAIC,EAAOR,GAAKI,EAAKyB,GAAIE,GAAIC,WAC/CG,GAAU,GAIZA,IACF3B,EAAO4B,KAAKC,IAAL,MAAAD,KAAI,EAAQnC,EAAMiC,QAAO,SAAAI,GAAC,OAAIA,EAAI9B,cAEpC2B,GAET,IAAI9B,EAAOC,EAAGC,EAAGC,GAEjB,IAAK,IAAIqB,EAAKvB,EAAGuB,EAAKrB,EAAOF,EAAGuB,IAC9B,IAAK,IAAIE,EAAKxB,EAAGwB,EAAKvB,EAAOD,EAAGwB,IAC9B3B,EAAKyB,GAAIE,GAAIC,SAAU,EAtBH,IA2BrB,MAAGC,OAAH,UAAa7B,IAAM8B,QAAO,qBAAGF,WAAwBR,WACxDrB,EACiB,GACfD,GAAY,EACZE,EAAO,IAEPN,EAAEyC,YAYKC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ3C,OAAQA","file":"component---src-pages-sketch-2019-04-15-js-421a85a429549dddc829.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\n\nconst sketch = function(p) {\n  const SIZES = [1, 2, 3, 5, 8];\n\n  let gridSize = 60;\n  let iterations = 3;\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * gridSize;\n      this.y = y * gridSize;\n      this.size = size * gridSize;\n      this.drawFunc = p.random() < 0.1 ? this.drawBackslash : this.drawSlash;\n      this.drawFunc();\n    }\n    drawSlash() {\n      p.line(this.x, this.y + this.size, this.x + this.size, this.y);\n    }\n    drawBackslash() {\n      p.line(this.x, this.y, this.x + this.size, this.y + this.size);\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    const hue = p.random(100);\n    p.background(100 - hue, 50, 75);\n    p.stroke(hue, 25, 25);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    if (grid.length == 0) {\n      p.strokeWeight(gridSize / 3);\n\n      w = p.floor(p.width / gridSize);\n      h = p.floor(p.height / gridSize);\n\n      for (let xx = 0; xx < w; xx++) {\n        grid.push([]);\n        for (let yy = 0; yy < h; yy++) {\n          grid[xx].push({\n            x: xx,\n            y: yy,\n            visited: false,\n          });\n        }\n      }\n    }\n\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      iterations--;\n      if (iterations > 0) {\n        gridSize /= 2;\n        grid = [];\n      } else {\n        p.noLoop();\n      }\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}