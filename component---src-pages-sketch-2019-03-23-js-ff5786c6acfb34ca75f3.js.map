{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/23.js","webpack:///./src/lib/polarToCartesian.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_1__","_lib_polarToCartesian__WEBPACK_IMPORTED_MODULE_2__","sketch","p","size","prevPoint","outerAngle","innerAngle","PI","outerSpeed","SPEED","TWO_PI","innerSpeed","hue","random","setup","createCanvas","background","noFill","strokeWeight","colorMode","HSB","width","draw","stroke","map","thisFocalPoint","polarToCartesian","height","thisPoint","apply","concat","noise","frameCount","line","noLoop","_ref","location","a","createElement","path","pathname","description","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAIMQ,EAAS,SAASC,GACtB,IAEIC,EACAC,EACAC,EAAa,EACbC,EAAaJ,EAAEK,GACfC,EAAaC,KAAcP,EAAEQ,OAC7BC,EAPU,EAOWT,EAAEQ,OACvBE,EAAMV,EAAEW,OAAO,KAEnBX,EAAEY,MAAQ,WACRZ,EAAEa,aAAa,IAAK,KACpBb,EAAEc,WAAW,IACbd,EAAEe,SACFf,EAAEgB,aAAa,IACfhB,EAAEiB,UAAUjB,EAAEkB,KACdjB,EAAiB,GAAVD,EAAEmB,OAGXnB,EAAEoB,KAAO,WACPpB,EAAEqB,OAAOX,EAAKV,EAAEsB,IAAInB,EAAY,EAAc,EAAXH,EAAEQ,OAAY,EAAG,KAAM,KAE1D,IAAMe,EAAiBC,YACrBxB,EAAEmB,MAAQ,EACVnB,EAAEyB,OAAS,EACXtB,EACAH,EAAEsB,IAAInB,EAAY,EAAc,EAAXH,EAAEQ,OAAYP,EAAM,IACzC,GAGIyB,EAAYF,IAAgBG,WAAhB,EACbJ,EADaK,OAAA,CAEhBxB,GACCD,EAAaH,EAAEQ,OACZR,EAAEsB,IAAInB,EAAYH,EAAEQ,OAAmB,EAAXR,EAAEQ,OAAYP,EAAM,GAChDD,EAAEsB,IAAInB,EAAY,EAAGH,EAAEQ,OAAQ,EAAGP,IACpCD,EAAE6B,MAAM,IAAM,IAAM7B,EAAE8B,WAAa,MACrC,KAEE5B,GACFF,EAAE+B,KAAFJ,MAAA3B,EAAU0B,EAATE,OAAuB1B,IAE1BA,EAAYwB,EAEZtB,GAAcK,GADdN,GAAcG,GAEc,EAAXN,EAAEQ,QAAYR,EAAEgC,WAItBvC,EAAA,iBAAAwC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbvC,EAAAwC,EAAAC,cAACvC,EAAA,EAAD,CAAcE,OAAQA,EAAQsC,KAAMH,EAASI,SAAUC,YAAY,wCCvDrEhD,EAAAiD,EAAA/C,EAAA,sBAAAgD,IAAAlD,EAAAiD,EAAA/C,EAAA,sBAAAiD,IAAAnD,EAAAiD,EAAA/C,EAAA,sBAAAkD,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKE,IAAIJ,GAASC,GAa9BH,EAA0B,SAC9BO,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKC,IAAIH,GAASO,EAChCI,EAAIL,EAAUJ,KAAKE,IAAIJ,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBhC,IAzBU,SACvB0B,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASL,EAAOC,GACtCU,EAAId,EAAkBS,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-23-js-ff5786c6acfb34ca75f3.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SPEED = 1;\n\n  let size;\n  let prevPoint;\n  let outerAngle = 0;\n  let innerAngle = p.PI;\n  let outerSpeed = SPEED / 250 / p.TWO_PI;\n  let innerSpeed = SPEED / p.TWO_PI;\n  let hue = p.random(100);\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(64);\n    p.noFill();\n    p.strokeWeight(0.5);\n    p.colorMode(p.HSB);\n    size = p.width * 0.4;\n  };\n\n  p.draw = function() {\n    p.stroke(hue, p.map(outerAngle, 0, p.TWO_PI * 2, 0, 100), 100);\n\n    const thisFocalPoint = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      outerAngle,\n      p.map(outerAngle, 0, p.TWO_PI * 2, size, 0),\n      true\n    );\n\n    const thisPoint = polarToCartesian(\n      ...thisFocalPoint,\n      innerAngle,\n      (outerAngle > p.TWO_PI\n        ? p.map(outerAngle, p.TWO_PI, p.TWO_PI * 2, size, 0)\n        : p.map(outerAngle, 0, p.TWO_PI, 0, size)) *\n        p.noise(0.01, 0.02, p.frameCount / 2000),\n      true\n    );\n    if (prevPoint) {\n      p.line(...thisPoint, ...prevPoint);\n    }\n    prevPoint = thisPoint;\n    outerAngle += outerSpeed;\n    innerAngle += innerSpeed;\n    if (outerAngle > p.TWO_PI * 2) p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}