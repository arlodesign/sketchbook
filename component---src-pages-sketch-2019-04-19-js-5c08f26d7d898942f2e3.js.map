{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/19.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","t","setup","createCanvas","background","stroke","noFill","draw","translate","width","map","cos","frameCount","height","beginShape","i","TWO_PI","prevVertex","polarToCartesian","noise","curveVertex","endShape","PI","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","y","sin","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"2jBAKA,IAAMA,EAAS,SAASC,GACtB,IAAIC,EAAI,EAGRD,EAAEE,MAAQ,WACRF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,WAAW,GACbJ,EAAEK,OAAO,IAAK,IACdL,EAAEM,UAGJN,EAAEO,KAAO,WACPP,EAAEQ,UACAR,EAAES,MAAQ,EACVT,EAAEU,IAAIV,EAAEW,IAAIX,EAAEY,WAAa,MAAQ,EAAG,EAAG,EAAGZ,EAAEa,SAEhDb,EAAEc,aAIF,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAEgB,OAAQD,GAAK,IAAM,CACvC,IAAIE,EAAaC,YACf,EACA,EACAH,EAAId,EACJD,EAAEU,IAAIV,EAAEmB,MAAMJ,EAAGd,GAAI,EAAG,EAAG,EAAGD,EAAES,QAChC,GAEFT,EAAEoB,YAAF,MAAApB,EAAC,EAAgBiB,IAEnBjB,EAAEqB,WACFpB,GAAK,KACLD,EAAEY,WAAa,IAAOZ,EAAEsB,IAAMtB,EAAEuB,WAUrBC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQzB,OAAQA,O,kCC3CpB,sCAiBM0B,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKtB,IAAIiB,GAASC,EAChCK,EAAIP,EAAUM,KAAKE,IAAIP,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE,MAIlBhB,IAzBU,SACvBQ,EACAC,EACAC,EACAQ,EACAL,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACK,EAAQT,EAAOQ,GACxC,OAAOC,EAASJ,KAAKtB,IAAIiB,GAASQ,EAYxBE,CAAkBZ,EAASE,EAAOQ,GACtCF,EAXkB,SAACG,EAAQT,EAAOQ,GACxC,OAAOC,EAASJ,KAAKE,IAAIP,GAASQ,EAUxBG,CAAkBZ,EAASC,EAAOQ,GAC5C,OAAOL,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2019-04-19-js-5c08f26d7d898942f2e3.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let t = 0;\n  let prevVertex;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.stroke(255, 10);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    p.translate(\n      p.width / 2,\n      p.map(p.cos(p.frameCount / 1000), -1, 1, 0, p.height)\n    );\n    p.beginShape();\n    if (prevVertex) {\n      p.vertex(...prevVertex);\n    }\n    for (let i = 0; i < p.TWO_PI; i += 0.01) {\n      let prevVertex = polarToCartesian(\n        0,\n        0,\n        i + t,\n        p.map(p.noise(i, t), 0, 1, 0, p.width),\n        true\n      );\n      p.curveVertex(...prevVertex);\n    }\n    p.endShape();\n    t += 0.001;\n    p.frameCount / 1000 > p.PI && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}