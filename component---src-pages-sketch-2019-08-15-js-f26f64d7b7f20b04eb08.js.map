{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/15.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","setup","frameRate","pixelDensity","createCanvas","background","noFill","strokeWeight","createLoop","gif","render","open","noiseRadius","draw","animLoop","noise1D","theta","stroke","map","sin","cos","tan","x1","width","y1","height","x2","y2","handle","polarToCartesian","bezier","DURATION","frameCount","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","y","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"0kBAMA,IAAMA,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACRD,EAAEE,UAAU,IAERN,GACFI,EAAEG,aAAa,GAGjBH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,WAAW,KACbL,EAAEM,SACFN,EAAEO,aAAa,IAEfP,EAAEQ,WAfW,GAeU,CACrBC,MAAKb,GAAS,CAAEc,QAAQ,EAAOC,MAAM,GACrCC,YAAa,OAIjBZ,EAAEa,KAAO,WAAY,IAAD,EACSb,EAAEc,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MAEjBhB,EAAEiB,OACAjB,EAAEkB,IAAIH,EAAQf,EAAEmB,IAAIH,KAAU,EAAG,EAAG,EAAG,KACvChB,EAAEkB,IAAIH,EAAQf,EAAEoB,IAAIJ,KAAU,EAAG,EAAG,IAAK,GACzChB,EAAEkB,IAAIH,EAAQf,EAAEqB,IAAIL,KAAU,EAAG,EAAG,EAAG,KACvC,IAEF,IAAMM,EAAKtB,EAAEkB,IAAIH,EAAQf,EAAEmB,IAAIH,KAAU,EAAG,EAAGhB,EAAEuB,MAAQ,EAAGvB,EAAEuB,OACxDC,EAAKxB,EAAEkB,IAAIH,EAAQf,EAAEoB,IAAIJ,KAAU,EAAG,EAAGhB,EAAEyB,OAAS,EAAGzB,EAAEyB,QACzDC,EAAK1B,EAAEkB,IAAIH,EAAQf,EAAEoB,IAAIJ,KAAU,EAAG,EAAGhB,EAAEuB,MAAOvB,EAAEuB,MAAQ,GAC5DI,EAAK3B,EAAEkB,IAAIH,EAAQf,EAAEmB,IAAIH,KAAU,EAAG,EAAGhB,EAAEyB,OAAQzB,EAAEyB,OAAS,GAC9DG,EAASC,YACb7B,EAAEuB,MAAQ,EACVvB,EAAEyB,OAAS,EACXT,EACAhB,EAAEuB,MAAQ,GACV,GAEFvB,EAAE8B,OAAF,MAAA9B,EAAC,CAAQsB,EAAIE,GAAZ,SAAmBI,GAAnB,EAA8BA,GAA9B,CAAsCF,EAAIC,KAC3C3B,EAAE8B,OACA9B,EAAEuB,MAAQD,EACVtB,EAAEyB,OAASD,EACXxB,EAAEuB,MAAQK,EAAO,GACjB5B,EAAEyB,OAASG,EAAO,GAClB5B,EAAEuB,MAAQK,EAAO,GACjB5B,EAAEyB,OAASG,EAAO,GAClB5B,EAAEuB,MAAQG,EACV1B,EAAEyB,OAASE,IAGZ/B,GAA2BmC,OAAjB/B,EAAEgC,YAAgChC,EAAEiC,WAUpCC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQnC,OAAQA,O,kCClEpB,sCAiBMoC,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKvB,IAAIkB,GAASC,EAChCK,EAAIP,EAAUM,KAAKxB,IAAImB,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE,MAIlBf,IAzBU,SACvBO,EACAC,EACAC,EACAO,EACAJ,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACI,EAAQR,EAAOO,GACxC,OAAOC,EAASH,KAAKvB,IAAIkB,GAASO,EAYxBE,CAAkBX,EAASE,EAAOO,GACtCD,EAXkB,SAACE,EAAQR,EAAOO,GACxC,OAAOC,EAASH,KAAKxB,IAAImB,GAASO,EAUxBG,CAAkBX,EAASC,EAAOO,GAC5C,OAAOJ,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2019-08-15-js-f26f64d7b7f20b04eb08.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 60;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.noFill();\n    p.strokeWeight(10);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.01,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n\n    p.stroke(\n      p.map(noise1D(p.sin(theta)), -1, 1, 0, 255),\n      p.map(noise1D(p.cos(theta)), -1, 1, 255, 0),\n      p.map(noise1D(p.tan(theta)), -1, 1, 0, 255),\n      16\n    );\n    const x1 = p.map(noise1D(p.sin(theta)), -1, 1, p.width / 4, p.width);\n    const y1 = p.map(noise1D(p.cos(theta)), -1, 1, p.height / 4, p.height);\n    const x2 = p.map(noise1D(p.cos(theta)), -1, 1, p.width, p.width / 4);\n    const y2 = p.map(noise1D(p.sin(theta)), -1, 1, p.height, p.height / 4);\n    const handle = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      theta,\n      p.width / 3,\n      true\n    );\n    p.bezier(x1, y1, ...handle, ...handle, x2, y2);\n    p.bezier(\n      p.width - x1,\n      p.height - y1,\n      p.width - handle[0],\n      p.height - handle[1],\n      p.width - handle[0],\n      p.height - handle[1],\n      p.width - x2,\n      p.height - y2\n    );\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}