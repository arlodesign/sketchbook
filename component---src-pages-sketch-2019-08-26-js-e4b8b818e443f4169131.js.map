{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/08/26.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","setup","frameRate","createCanvas","background","colorMode","HSL","blendMode","HARD_LIGHT","createLoop","noiseRadius","draw","animLoop","noise1D","theta","axis","width","height","map","a","TWO_PI","stroke","line","DURATION","frameCount","noLoop","SketchPage"],"mappings":"6FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,6gBCTjC,IAGMO,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACRD,EAAEE,UAAU,IAEZF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,WAAW,KACbJ,EAAEK,UAAUL,EAAEM,IAAK,GACnBN,EAAEO,UAAUP,EAAEQ,YAEdR,EAAES,WAZW,IAYU,CACrBC,YAAa,KAIjBV,EAAEW,KAAO,WAUP,IAVmB,IAAD,EACSX,EAAEY,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MACXC,EAAOrB,YACXM,EAAEgB,MAAQ,EACVhB,EAAEiB,OAAS,EACXH,EACAd,EAAEkB,IAAIL,EAAQ,MAAQ,EAAG,EAAGb,EAAEgB,MAAQ,EAAG,IACzC,GAGOG,EAAI,EAAGA,EAAInB,EAAEoB,OAAQD,GAAKnB,EAAEoB,OA1B3B,EA2BRpB,EAAEqB,OACAR,EAAQM,EAAI,KAAO,EACnBN,EAAQM,EAAI,KAAO,EACnBN,EAAQ,KAAQ,EAChB,KAEFb,EAAEsB,KAAF,MAAAtB,EAAC,EACIe,GADJ,SAEIrB,IAAgB,WAAhB,IACEqB,GADF,QAEDD,EAAQK,EACRnB,EAAEkB,IAAIL,EAAQM,EAAI,MAAO,EAAG,EAAGnB,EAAEgB,MAAQ,EAAGhB,EAAEgB,MAAQ,IACtD,QAIWO,OAAjBvB,EAAEwB,YAAgCxB,EAAEyB,WAUzBC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ3B,OAAQA","file":"component---src-pages-sketch-2019-08-26-js-e4b8b818e443f4169131.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst DURATION = 120;\nconst LINES = 5;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.frameRate(60);\n\n    p.createCanvas(660, 840);\n    p.background(128);\n    p.colorMode(p.HSL, 2);\n    p.blendMode(p.HARD_LIGHT);\n\n    p.createLoop(DURATION, {\n      noiseRadius: 2,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n    const axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      theta,\n      p.map(noise1D(0.01), -1, 1, p.width / 2, 0),\n      true\n    );\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / LINES) {\n      p.stroke(\n        noise1D(a / 200) + 1,\n        noise1D(a / 300) + 1,\n        noise1D(0.05) + 1,\n        0.25\n      );\n      p.line(\n        ...axis,\n        ...polarToCartesian(\n          ...axis,\n          theta + a,\n          p.map(noise1D(a / 100), -1, 1, p.width / 2, p.width / 5),\n          true\n        )\n      );\n    }\n    p.frameCount === DURATION * 60 && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}