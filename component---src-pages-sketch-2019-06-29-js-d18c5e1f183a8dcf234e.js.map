{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/29.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["noise","OpenSimplexNoise","Date","now","sketch","p","hue","random","a","i","setup","createCanvas","background","colorMode","HSB","blendMode","OVERLAY","strokeWeight","draw","translate","width","height","stroke","noiseVal","map","noise4D","cos","TWO_PI","frameCount","sin","lerpLine","apply","concat","polarToCartesian","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"mKAMMA,EAAQ,IAAIC,IAAiBC,KAAKC,OAElCC,EAAS,SAASC,GACtB,IAEIC,EAAMD,EAAEE,OAAO,GAAI,KACnBC,EAAI,EACJC,EAAI,EAERJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,WAAW,IACbP,EAAEQ,UAAUR,EAAES,IAAK,KACnBT,EAAEU,UAAUV,EAAEW,SACdX,EAAEY,aAAa,KAGjBZ,EAAEa,KAAO,WACPb,EAAEc,UAAUd,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,GACpChB,EAAEiB,OAAOhB,EAAK,IAAK,IAAK,IAExB,IAAMiB,EAAWlB,EAAEmB,IACjBxB,EAAMyB,SACHhB,EAAI,IAAO,IACXA,EAAI,IAAO,GACZJ,EAAEqB,IAAIrB,EAAEsB,QAAUtB,EAAEuB,WAtBZ,MAuBRvB,EAAEwB,IAAIxB,EAAEsB,QAAUtB,EAAEuB,WAvBZ,QAyBT,EACD,EACA,EACA,IAGFE,IAAQC,WAAR,GACE1B,EACA,EACA,GAHF2B,OAIKC,YAAiB,EAAG,EAAGzB,EAAGH,EAAEgB,OAASE,EAAW,IAAI,GAJzD,CAKEA,GACA,MAGFf,GAAKH,EAAEsB,OAxCK,KAyCJtB,EAAEsB,SACRlB,GAAK,IACLD,EAAI,GACJF,GAAO,IACG,GAAGD,EAAE6B,YAKNC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcpC,OAAQA,EAAQqC,KAAMJ,EAASK,SAAUC,YAAY,wCC5DrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK1B,IAAIwB,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKvB,IAAIqB,GAASC,GAa9BH,EAA0B,SAC9BK,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUD,KAAK1B,IAAIwB,GAASK,EAChCI,EAAIL,EAAUF,KAAKvB,IAAIqB,GAASM,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB1B,IAzBU,SACvBoB,EACAC,EACAJ,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASH,EAAOC,GACtCQ,EAAIZ,EAAkBO,EAASJ,EAAOC,GAC5C,OAAOM,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,wCCflBxB,EAAA,WAAS9B,EAAGuD,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChB5D,EAAEE,SAAW4D,GAAK9D,EAAE+D,MAAM/D,EAAEgE,KAAKT,EAAIE,EAAIK,GAAI9D,EAAEgE,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-06-29-js-d18c5e1f183a8dcf234e.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport OpenSimplexNoise from \"open-simplex-noise\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst noise = new OpenSimplexNoise(Date.now());\n\nconst sketch = function(p) {\n  const STEPS = 1000;\n\n  let hue = p.random(67, 100);\n  let a = 0;\n  let i = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(64);\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.OVERLAY);\n    p.strokeWeight(10);\n  };\n\n  p.draw = function() {\n    p.translate(p.width / 2, p.height / 2);\n    p.stroke(hue, 100, 100, 20);\n\n    const noiseVal = p.map(\n      noise.noise4D(\n        (i + 0.1) / 10,\n        (i + 0.2) / 10,\n        p.cos(p.TWO_PI * (p.frameCount / STEPS)),\n        p.sin(p.TWO_PI * (p.frameCount / STEPS))\n      ),\n      -1,\n      1,\n      0,\n      0.1\n    );\n\n    lerpLine(\n      p,\n      0,\n      0,\n      ...polarToCartesian(0, 0, a, p.height * noiseVal * 10, true),\n      noiseVal,\n      false\n    );\n\n    a += p.TWO_PI / STEPS;\n    if (a > p.TWO_PI) {\n      i += 1000;\n      a = 0;\n      hue -= 33;\n      if (hue < 0) p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}