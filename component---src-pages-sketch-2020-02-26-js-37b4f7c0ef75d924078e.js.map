{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2020/02/26.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","sketch","p","RENDER","getURLParams","render","HUE","random","HUES","shuffle","particles","Particle","this","dir","createVector","vel","pos","move","animLoop","noise2D","progress","noiseValX","radius","noiseValY","prevPos","theta","copy","mult","add","draw","line","setup","pixelDensity","frameRate","createCanvas","colorMode","HSL","background","createLoop","gif","open","Array","length","fill","map","_","i","TWO_PI","width","alpha","ease","translate","height","rotate","forEach","particleSet","strokeWeight","stroke","particle","frameCount","console","info","floor","DURATION","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-02-26-js-37b4f7c0ef75d924078e.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport { easeInQuad as ease } from \"~lib/easing\";\nimport { polarToCartesianEllipse } from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 120;\n  const RATE = 30;\n  const NOISE_SCALE = 1000;\n  const MAX_SPEED = 5;\n  const HUE = p.random(1 / 3);\n  const HUES = p.shuffle([HUE, HUE + 1 / 3, HUE + 2 / 3]);\n  const PARTICLE_COUNT = 300;\n\n  let particles = [];\n\n  class Particle {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n      this.dir = p.createVector(0, 0);\n      this.vel = p.createVector(0, 0);\n      this.pos = p.createVector(x, y);\n    }\n    move() {\n      const { noise2D, progress } = p.animLoop;\n\n      const noiseValX = noise2D(\n        this.x / NOISE_SCALE,\n        this.pos.x / (NOISE_SCALE / 2),\n        {\n          radius: MAX_SPEED * progress,\n        }\n      );\n      const noiseValY = noise2D(\n        this.y / NOISE_SCALE,\n        this.pos.y / (NOISE_SCALE / 2),\n        {\n          radius: MAX_SPEED * progress,\n        }\n      );\n\n      this.prevPos = { x: this.pos.x, y: this.pos.y };\n      this.dir.x = p.sin(p.animLoop.theta) * noiseValX;\n      this.dir.y = p.cos(p.animLoop.theta) * noiseValY;\n      this.vel = this.dir.copy();\n      this.vel.mult(MAX_SPEED * progress);\n      this.pos.add(this.vel);\n    }\n    draw() {\n      this.move();\n      p.line(this.prevPos.x, this.prevPos.y, this.pos.x, this.pos.y);\n    }\n  }\n\n  p.setup = function() {\n    p.pixelDensity(2);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 1);\n    p.background(p.random(HUES), 0.2, 0.8);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n    });\n\n    particles = Array(HUES.length)\n      .fill()\n      .map(() =>\n        Array(PARTICLE_COUNT)\n          .fill()\n          .map(\n            (_, i) =>\n              new Particle(\n                ...polarToCartesianEllipse(\n                  0,\n                  0,\n                  p.random(\n                    (p.TWO_PI / PARTICLE_COUNT) * i,\n                    (p.TWO_PI / PARTICLE_COUNT) * (i + 1)\n                  ),\n                  p.random(p.width / 5, p.width / 10),\n                  p.random(p.width / 10, p.width / 20),\n                  true\n                )\n              )\n          )\n      );\n  };\n\n  p.draw = function() {\n    const { progress, theta } = p.animLoop;\n    const alpha = ease(-1 * progress * progress + 1 * progress);\n\n    p.translate(p.width / 2, p.height / 2);\n    p.rotate(theta);\n\n    particles.forEach((particleSet, i) => {\n      p.strokeWeight((i + 1) / 2);\n      p.stroke(HUES[i], 1, i / 3, alpha);\n      particleSet.forEach(particle => particle.draw());\n    });\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (!RENDER && p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}