{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2019/10/09.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","RENDER","process","DEV","sketch","p","ringSize","HUE","random","setup","pixelDensity","frameRate","createCanvas","background","colorMode","HSB","strokeCap","SQUARE","createLoop","gif","render","open","dist","width","height","draw","animLoop","theta","noise1D","translate","rotate","QUARTER_PI","r","lerpVal","map","pointA","TWO_PI","pointB","stroke","lerpColor","color","ease","strokeWeight","line","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-10-09-js-9985629fc62830d233a5.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { easeInOutQuint as ease } from \"~lib/easing\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst RINGS = 10;\n\nconst sketch = function(p) {\n  const HUE = p.random(50);\n  let ringSize;\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.colorMode(p.HSB, 100);\n    p.strokeCap(p.SQUARE);\n    p.createLoop(60, {\n      gif: RENDER ? { render: false, open: true } : false,\n    });\n\n    ringSize = p.dist(0, 0, p.width / 2, p.height / 2) / RINGS;\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n    p.translate(p.width / 2, p.height / 2);\n    p.rotate(p.QUARTER_PI);\n    for (let r = 0; r < RINGS; r++) {\n      const element = RINGS;\n      const lerpVal = p.map(p.sin(theta * (r + 1)), -1, 1, 1, 0);\n      const start = p.TWO_PI * (r / RINGS);\n      const pointA = polarToCartesian(\n        0,\n        0,\n        theta * (r % 2 ? 1 : -1),\n        ringSize * r,\n        true\n      );\n      const pointB = polarToCartesian(\n        0,\n        0,\n        theta * (r % 2 ? 1 : -1),\n        ringSize * (r + 1),\n        true\n      );\n\n      p.stroke(\n        p.lerpColor(\n          p.color(HUE, 100, 25),\n          p.color(HUE + 50, 25, 100),\n          ease(lerpVal)\n        )\n      );\n      p.strokeWeight(p.map(r, 0, RINGS, 1, 7));\n      p.line(...pointA, ...pointB);\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}