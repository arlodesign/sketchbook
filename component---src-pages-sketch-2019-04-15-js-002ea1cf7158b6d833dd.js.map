{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/15.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/addNoise.js"],"names":["sketch","p","w","h","SIZES","gridSize","iterations","grid","Doodad","x","y","size","this","drawFunc","random","drawBackslash","drawSlash","_proto","prototype","line","setup","createCanvas","colorMode","HSB","hue","background","stroke","noFill","draw","_ref","_ref3","length","strokeWeight","floor","width","height","xx","push","yy","visited","_p$random","concat","apply","filter","_ref2","overlap","Math","max","s","_ref4","noLoop","__webpack_exports__","_ref5","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","cos","sin","centerX","centerY","radiusX","radiusY","asArray","polarToCartesian","addNoise","intensity","PTS","console","log","i","fill","noStroke","ellipse","randomGaussian","pixelDensity","pop"],"mappings":"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","file":"component---src-pages-sketch-2019-04-15-js-002ea1cf7158b6d833dd.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport addNoise from \"~lib/addNoise\";\n\nconst sketch = function(p) {\n  const SIZES = [1, 2, 3, 5, 8];\n\n  let gridSize = 60;\n  let iterations = 3;\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * gridSize;\n      this.y = y * gridSize;\n      this.size = size * gridSize;\n      // this.drawFunc = p.random([\n      //   this.drawSlash,\n      //   this.drawSlash,\n      //   this.drawBackslash,\n      // ]);\n      this.drawFunc = p.random() < 0.1 ? this.drawBackslash : this.drawSlash;\n      this.drawFunc();\n    }\n    drawSlash() {\n      p.line(this.x, this.y + this.size, this.x + this.size, this.y);\n    }\n    drawBackslash() {\n      p.line(this.x, this.y, this.x + this.size, this.y + this.size);\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    const hue = p.random(100);\n    p.background(100 - hue, 50, 75);\n    p.stroke(hue, 25, 25);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    if (grid.length == 0) {\n      p.strokeWeight(gridSize / 3);\n\n      w = p.floor(p.width / gridSize);\n      h = p.floor(p.height / gridSize);\n\n      for (let xx = 0; xx < w; xx++) {\n        grid.push([]);\n        for (let yy = 0; yy < h; yy++) {\n          grid[xx].push({\n            x: xx,\n            y: yy,\n            visited: false,\n          });\n        }\n      }\n    }\n\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      iterations--;\n      if (iterations > 0) {\n        gridSize /= 2;\n        grid = [];\n      } else {\n        p.noLoop();\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  console.log(PTS);\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n"],"sourceRoot":""}