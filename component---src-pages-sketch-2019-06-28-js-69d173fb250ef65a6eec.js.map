{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/28.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","HUE","random","angle","alpha","setup","createCanvas","colorMode","HSB","background","noFill","strokeWeight","draw","NOISE","noise","frameCount","blendMode","SCREEN","stroke","map","cos","i","lerpLine","width","height","polarToCartesian","TWO_PI","noLoop","min","SketchPage","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","Math","y","sin","distance","center","polarToCartesianX","polarToCartesianY","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"ykBAMA,IAAMA,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IAEjBC,EAAQ,EACRC,EAAQ,EAEZJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,KACnBR,EAAES,WAAWR,EAAK,GAAI,GACtBD,EAAEU,SACFV,EAAEW,aAAa,IAGjBX,EAAEY,KAAO,WACP,IAAMC,EAAQb,EAAEc,MAAMd,EAAEe,WAAa,IAAKZ,GAE1CH,EAAEgB,UAAUhB,EAAEiB,QACdjB,EAAEkB,OAAOlB,EAAEmB,IAAInB,EAAEoB,IAAIjB,EAlBR,IAkB0B,EAAG,EAAGF,EAAKA,EAAM,IAAK,GAAI,GAAIG,GAErE,IAAK,IAAIiB,EAAI,EAAGA,EApBH,EAoBeA,IAC1BC,IAAQ,WAAR,GACEtB,EACAA,EAAEuB,MAAQ,EACVvB,EAAEwB,OAAS,GAHb,SAIKC,YACDzB,EAAEuB,MAAQ,EACVvB,EAAEwB,OAAS,EACXrB,EAASkB,EAAIrB,EAAE0B,OA5BR,EA6BP1B,EAAEwB,OAASX,GACX,IATJ,CAWEA,GACA,MAIJV,GAAS,MArCI,EAuCDH,EAAE0B,QACZtB,GAAS,MACD,GAAKJ,EAAE2B,SAEfvB,EAAQJ,EAAE4B,IAAIxB,EAAQ,GAAK,IA3ChB,KAsDFyB,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ9B,OAAQA,O,kCCzDpB,sCAiBM+B,EAA0B,SAC9BC,EACAC,EACA7B,EACA8B,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUM,KAAKjB,IAAIjB,GAAS8B,EAChCK,EAAIN,EAAUK,KAAKE,IAAIpC,GAAS+B,EACtC,OAAOC,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE,MAIlBb,IAzBU,SACvBM,EACAC,EACA7B,EACAqC,EACAL,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACK,EAAQtC,EAAOqC,GACxC,OAAOC,EAASJ,KAAKjB,IAAIjB,GAASqC,EAYxBE,CAAkBX,EAAS5B,EAAOqC,GACtCF,EAXkB,SAACG,EAAQtC,EAAOqC,GACxC,OAAOC,EAASJ,KAAKE,IAAIpC,GAASqC,EAUxBG,CAAkBX,EAAS7B,EAAOqC,GAC5C,OAAOL,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE,O,oCCflB,aAAStC,EAAG4C,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChBjD,EAAEE,SAAWiD,GAAKnD,EAAEoD,MAAMpD,EAAEqD,KAAKT,EAAIE,EAAIK,GAAInD,EAAEqD,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-06-28-js-69d173fb250ef65a6eec.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const LEAVES = 6;\n  const HUE = p.random(70);\n\n  let angle = 0;\n  let alpha = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.background(HUE, 80, 5);\n    p.noFill();\n    p.strokeWeight(4);\n  };\n\n  p.draw = function() {\n    const NOISE = p.noise(p.frameCount / 100, angle);\n\n    p.blendMode(p.SCREEN);\n    p.stroke(p.map(p.cos(angle / LEAVES), -1, 1, HUE, HUE + 30), 80, 75, alpha);\n\n    for (let i = 0; i < LEAVES; i++) {\n      lerpLine(\n        p,\n        p.width / 2,\n        p.height / 2,\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          angle + (i * p.TWO_PI) / LEAVES,\n          p.height * NOISE,\n          true\n        ),\n        NOISE,\n        false\n      );\n    }\n\n    angle += 0.005;\n\n    if (angle > p.TWO_PI * LEAVES) {\n      alpha -= 0.001;\n      alpha < 0 && p.noLoop();\n    } else {\n      alpha = p.min(alpha + 0.1, 100 / LEAVES);\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}