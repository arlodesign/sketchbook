{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/08/26.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","setup","frameRate","createCanvas","background","colorMode","HSL","blendMode","HARD_LIGHT","createLoop","noiseRadius","draw","animLoop","noise1D","theta","axis","width","height","map","a","TWO_PI","stroke","line","DURATION","frameCount","noLoop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,i6BCnBjC,IAGME,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACRD,EAAEE,UAAU,IAEZF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,WAAW,KACbJ,EAAEK,UAAUL,EAAEM,IAAK,GACnBN,EAAEO,UAAUP,EAAEQ,YAEdR,EAAES,WAZW,IAYU,CACrBC,YAAa,KAIjBV,EAAEW,KAAO,WAUP,IAVmB,IAAD,EACSX,EAAEY,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MACXC,EAAOjB,YACXE,EAAEgB,MAAQ,EACVhB,EAAEiB,OAAS,EACXH,EACAd,EAAEkB,IAAIL,EAAQ,MAAQ,EAAG,EAAGb,EAAEgB,MAAQ,EAAG,IACzC,GAGOG,EAAI,EAAGA,EAAInB,EAAEoB,OAAQD,GAAKnB,EAAEoB,OA1B3B,EA2BRpB,EAAEqB,OACAR,EAAQM,EAAI,KAAO,EACnBN,EAAQM,EAAI,KAAO,EACnBN,EAAQ,KAAQ,EAChB,KAEFb,EAAEsB,KAAF,MAAAtB,EAAC,EACIe,GADJ,SAEIjB,IAAgB,WAAhB,IACEiB,GADF,QAEDD,EAAQK,EACRnB,EAAEkB,IAAIL,EAAQM,EAAI,MAAO,EAAG,EAAGnB,EAAEgB,MAAQ,EAAGhB,EAAEgB,MAAQ,IACtD,QAIWO,OAAjBvB,EAAEwB,YAAgCxB,EAAEyB,WAIzB,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc3B,OAAQA,EAAQ4B,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-08-26-js-05e61595a612f62c9c97.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst DURATION = 120;\nconst LINES = 5;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.frameRate(60);\n\n    p.createCanvas(660, 840);\n    p.background(128);\n    p.colorMode(p.HSL, 2);\n    p.blendMode(p.HARD_LIGHT);\n\n    p.createLoop(DURATION, {\n      noiseRadius: 2,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n    const axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      theta,\n      p.map(noise1D(0.01), -1, 1, p.width / 2, 0),\n      true\n    );\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / LINES) {\n      p.stroke(\n        noise1D(a / 200) + 1,\n        noise1D(a / 300) + 1,\n        noise1D(0.05) + 1,\n        0.25\n      );\n      p.line(\n        ...axis,\n        ...polarToCartesian(\n          ...axis,\n          theta + a,\n          p.map(noise1D(a / 100), -1, 1, p.width / 2, p.width / 5),\n          true\n        )\n      );\n    }\n    p.frameCount === DURATION * 60 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}