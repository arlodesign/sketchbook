{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2020/01/17.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","sketch","p","RENDER","getURLParams","render","setup","pixelDensity","frameRate","createCanvas","WEBGL","noStroke","createLoop","gif","open","noiseRadius","draw","animLoop","theta","noise1D","background","specularMaterial","pointLight","width","ease","abs","TWO_PI","height","push","translate","dist","box","pop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-01-17-js-f75e4106e3ea55e01b17.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport { easeInOutQuart as ease } from \"~lib/easing\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 60;\n  const RATE = 60;\n  const GRID = 30;\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840, p.WEBGL);\n    p.noStroke();\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 2,\n    });\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n\n    p.background(0);\n    p.specularMaterial(128);\n    p.pointLight(\n      255,\n      255,\n      0,\n      ...polarToCartesian(0, 0, theta, p.width / 2, true),\n      p.width * ease(p.abs(noise1D(5)))\n    );\n    p.pointLight(\n      0,\n      255,\n      255,\n      ...polarToCartesian(0, 0, theta + p.TWO_PI / 3, p.width / 2, true),\n      p.width * ease(p.abs(noise1D(7)))\n    );\n    p.pointLight(\n      255,\n      0,\n      255,\n      ...polarToCartesian(0, 0, theta + (p.TWO_PI / 3) * 2, p.width / 2, true),\n      p.width * ease(p.abs(noise1D(9)))\n    );\n    for (let x = -p.width / 2; x <= p.width / 2; x += GRID) {\n      for (let y = -p.height / 2; y <= p.height / 2; y += GRID) {\n        p.push();\n        p.translate(\n          x,\n          y,\n          p.cos(\n            theta +\n              p.dist(\n                x,\n                y,\n                ...polarToCartesian(0, 0, -theta, p.height * 10, true)\n              )\n          ) *\n            (GRID / 2)\n        );\n        p.box(GRID);\n        p.pop();\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}