{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/31.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js","webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/addNoise.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_1__","_lib_polarToCartesian__WEBPACK_IMPORTED_MODULE_2__","sketch","p","setup","createCanvas","colorMode","HSB","draw","background","i","HUE","map","j","outerEllipsePoint","polarToCartesianEllipse","width","height","TWO_PI","frameCount","innerEllipsePoint","sin","distMap","dist","apply","concat","strokeWeight","stroke","line","_ref","location","a","createElement","path","pathname","description","$export","P","fill","toObject","toAbsoluteIndex","toLength","module","exports","value","O","this","length","aLen","arguments","index","undefined","end","endPos","d","polarToCartesianX","polarToCartesianY","center","angle","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","addNoise","intensity","PTS","console","log","push","noStroke","ellipse","randomGaussian","pixelDensity","pop"],"mappings":"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","file":"component---src-pages-sketch-2019-03-31-js-52af51a85b329986f06e.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian, {\n  polarToCartesianEllipse,\n} from \"~lib/polarToCartesian\";\nimport addNoise from \"~lib/addNoise\";\n\nconst sketch = function(p) {\n  const OUTER_POINTS = 3;\n  const INNER_POINTS = 50;\n\n  let maxDist;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    // p.blendMode(p.HARD_LIGHT);\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    for (let i = 0; i < OUTER_POINTS; i++) {\n      const HUE = p.map(i, 0, OUTER_POINTS, 0, 100);\n      for (let j = 0; j < INNER_POINTS; j++) {\n        const outerEllipsePoint = polarToCartesianEllipse(\n          p.width / 2,\n          p.height / 2,\n          (p.TWO_PI / OUTER_POINTS) * i + p.frameCount / 500,\n          p.width * 1.5,\n          p.height * 1.5,\n          true\n        );\n        const innerEllipsePoint = polarToCartesianEllipse(\n          p.width / 2,\n          p.height / 2,\n          (p.TWO_PI / INNER_POINTS) * j + p.frameCount / 75,\n          p.map(p.sin(p.frameCount / 1000), -1, 1, 0, 1) * (p.width / 2) - 40,\n          p.height / 10,\n          true\n        );\n        const distMap = p.map(\n          innerEllipsePoint[1],\n          p.height / 2 - p.height / 10,\n          p.height / 2 + p.height / 10,\n          0.2,\n          1\n        );\n        const distVal = p.dist(...outerEllipsePoint, ...innerEllipsePoint);\n        p.strokeWeight(3 * distMap);\n        p.stroke(HUE, 75, 100 * distMap, 100 * distMap);\n        p.line(...outerEllipsePoint, ...innerEllipsePoint);\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  console.log(PTS);\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n"],"sourceRoot":""}