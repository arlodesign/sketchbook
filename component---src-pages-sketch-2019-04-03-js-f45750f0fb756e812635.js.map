{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/03.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","SPEED_TOP","TWO_PI","SPEED_RIGHT","SPEED_BOTTOM","SPEED_LEFT","SPEED_HANDLE","aTop","aRight","PI","aBottom","aLeft","aHandle","setup","createCanvas","background","noFill","strokeWeight","colorMode","HSB","blendMode","SOFT_LIGHT","draw","beginShape","stroke","map","cos","vertex","width","quadraticVertex","polarToCartesian","height","HALF_PI","noise","frameCount","sin","endShape","CLOSE","noLoop","fill","noStroke","BLEND","rect","MARGIN","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-04-03-js-f45750f0fb756e812635.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const MARGIN = 20;\n  const HUE = p.random(100);\n\n  const SPEED_TOP = p.random(0.03, 0.07) / p.TWO_PI;\n  const SPEED_RIGHT = p.random(0.03, 0.07) / p.TWO_PI;\n  const SPEED_BOTTOM = p.random(0.03, 0.07) / p.TWO_PI;\n  const SPEED_LEFT = p.random(0.03, 0.07) / p.TWO_PI;\n  const SPEED_HANDLE = p.random(0.01, 0.03) / p.TWO_PI;\n\n  let aTop = 0;\n  let aRight = p.PI;\n  let aBottom = 0;\n  let aLeft = p.PI;\n  let aHandle = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(64);\n    p.noFill();\n    p.strokeWeight(5);\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.SOFT_LIGHT);\n  };\n\n  p.draw = function() {\n    p.beginShape();\n\n    p.stroke(\n      HUE,\n      p.map(p.cos(aHandle), -1, 1, 0, 100, true),\n      p.map(p.cos(aHandle), -1, 1, 100, 0, true),\n      10\n    );\n\n    p.vertex(p.map(p.cos(aTop), -1, 1, MARGIN, p.width - MARGIN), MARGIN, true);\n    p.quadraticVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        aHandle - p.HALF_PI,\n        p.height *\n          p.noise(SPEED_TOP / 10, SPEED_BOTTOM / 10, p.frameCount / 1000),\n        true\n      ),\n      p.width - MARGIN,\n      p.map(p.sin(aRight), -1, 1, MARGIN, p.height - MARGIN, true)\n    );\n    p.quadraticVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        aHandle,\n        p.height *\n          p.noise(SPEED_TOP / 10, SPEED_BOTTOM / 10, p.frameCount / 1000),\n        true\n      ),\n      p.map(p.cos(aBottom), -1, 1, MARGIN, p.width - MARGIN, true),\n      p.height - MARGIN\n    );\n    p.quadraticVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        aHandle + p.HALF_PI,\n        p.height *\n          p.noise(SPEED_TOP / 10, SPEED_BOTTOM / 10, p.frameCount / 1000),\n        true\n      ),\n      MARGIN,\n      p.map(p.sin(aLeft), -1, 1, MARGIN, p.height - MARGIN, true)\n    );\n    p.quadraticVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        aHandle + p.PI,\n        p.height *\n          p.noise(SPEED_TOP / 10, SPEED_BOTTOM / 10, p.frameCount / 1000),\n        true\n      ),\n      p.map(p.cos(aTop), -1, 1, MARGIN, p.width - MARGIN, true),\n      MARGIN\n    );\n\n    p.endShape(p.CLOSE);\n\n    aTop += SPEED_TOP;\n    aRight += SPEED_RIGHT;\n    aBottom += SPEED_BOTTOM;\n    aLeft += SPEED_LEFT;\n    aHandle += SPEED_HANDLE;\n\n    if (aHandle > p.TWO_PI * 2) {\n      p.noLoop();\n      p.fill(HUE, 10, 10);\n      p.noStroke();\n      p.blendMode(p.BLEND);\n      p.rect(0, 0, p.width, MARGIN * 2);\n      p.rect(0, p.height - MARGIN * 2, p.width, MARGIN * 2);\n      p.rect(0, 0, MARGIN * 2, p.height);\n      p.rect(p.width - MARGIN * 2, 0, MARGIN * 2, p.height);\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Refresh page for a different variation\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}