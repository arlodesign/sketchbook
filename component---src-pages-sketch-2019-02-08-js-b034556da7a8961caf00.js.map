{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/02/08.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","img","axis","shapes","Shape","colorFunctions","abs","tan","PI","this","cf","Array","from","Set","_cf","length","random","points","fill","map","_","Point","_clr","color","frameCount","draw","blendMode","DIFFERENCE","ADD","noStroke","beginShape","vertex","location","forEach","i","move","endShape","CLOSE","_angle","TWO_PI","_dist","_speed","_getLocation","preload","loadImage","withPrefix","setup","createCanvas","background","createVector","width","keys","setTimeout","noLoop","shape","DARKEST","image","height","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-02-08-js-b034556da7a8961caf00.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { withPrefix } from \"gatsby\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SHAPES_COUNT = 3;\n  const POINTS_PER_SHAPE = 4;\n  let img;\n  let axis;\n  let shapes = [];\n\n  class Shape {\n    constructor() {\n      const colorFunctions = [\n        angle => p.abs(p.sin(angle)) * 240,\n        angle => p.abs(p.cos(angle)) * 240,\n        angle => p.abs(p.tan(angle)) * 240,\n        angle => p.abs(p.sin(angle + p.PI)) * 240,\n        angle => p.abs(p.cos(angle + p.PI)) * 240,\n        angle => p.abs(p.tan(angle + p.PI)) * 240,\n        angle => p.abs(p.sin(-angle)) * 240,\n        angle => p.abs(p.cos(-angle)) * 240,\n        angle => p.abs(p.tan(-angle)) * 240,\n        angle => p.abs(p.sin(-angle + p.PI)) * 240,\n        angle => p.abs(p.cos(-angle + p.PI)) * 240,\n        angle => p.abs(p.tan(-angle + p.PI)) * 240,\n      ];\n      this.cf = [];\n      while (Array.from(new Set(this._cf)).length < 3) {\n        this._cf = [\n          p.random(colorFunctions),\n          p.random(colorFunctions),\n          p.random(colorFunctions),\n        ];\n      }\n      this.points = Array(POINTS_PER_SHAPE)\n        .fill()\n        .map(_ => new Point());\n    }\n    _clr() {\n      return p.color(\n        this._cf[0](p.frameCount),\n        this._cf[1](p.frameCount),\n        this._cf[2](p.frameCount)\n      );\n    }\n    draw() {\n      p.blendMode(p.frameCount % 3 ? p.DIFFERENCE : p.ADD);\n      p.noStroke();\n      p.fill(this._clr());\n      p.beginShape();\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      this.points.forEach(({ location }, i) => {\n        if (i === 0) return;\n        p.vertex(location.x, location.y);\n        this.points[i].move();\n      });\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      p.endShape(p.CLOSE);\n    }\n  }\n\n  class Point {\n    constructor() {\n      this._angle = p.random(p.TWO_PI);\n      this._dist = p.random(200, 350);\n      this._speed = p.random([-0.05, 0.05]);\n      this.location = this._getLocation();\n    }\n\n    _getLocation() {\n      return polarToCartesian(axis.x, axis.y, this._angle, this._dist);\n    }\n\n    move() {\n      this._angle += this._speed;\n      this.location = this._getLocation();\n    }\n  }\n\n  p.preload = function() {\n    img = p.loadImage(withPrefix(\"/assets/susan.png\"));\n  };\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    axis = p.createVector(p.width / 2, 350);\n    shapes = [...Array(SHAPES_COUNT).keys()].map(_ => new Shape());\n    setTimeout(() => {\n      p.noLoop();\n    }, 20000);\n  };\n\n  p.draw = function() {\n    shapes.forEach((shape, i) => shape.draw());\n    p.blendMode(p.DARKEST);\n    p.image(img, 0, 0, p.width, p.height);\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n"],"sourceRoot":""}