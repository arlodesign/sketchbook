{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/18.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","hue","t","setup","createCanvas","background","colorMode","HSB","noFill","draw","translate","width","height","map","sin","frameCount","stroke","beginShape","i","HALF_PI","curveVertex","polarToCartesian","noise","endShape","PI","TWO_PI","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"2jBAKA,IAAMA,EAAS,SAASC,GACtB,IAAIC,EAAM,EACNC,EAAI,EAERF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,WAAW,GACbL,EAAEM,UAAUN,EAAEO,IAAK,KACnBP,EAAEQ,UAGJR,EAAES,KAAO,WACPT,EAAEU,UAAUV,EAAEW,MAAQ,EAAGX,EAAEY,OAAS,GACpCX,EAAMD,EAAEa,IAAIb,EAAEc,IAAId,EAAEe,WAAa,MAAO,EAAG,EAAG,EAAG,KACjDf,EAAEgB,OAAOf,EAAK,GAAI,IAAK,IACvBD,EAAEiB,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAEmB,QAASD,GAAK,IAClClB,EAAEoB,YAAF,MAAApB,EAAC,EACIqB,YACD,EACA,EACAH,EAAIhB,EACJF,EAAEa,IAAIb,EAAEsB,MAAMJ,EAAGhB,GAAI,EAAG,EAAG,EAAGF,EAAEW,QAChC,KAINX,EAAEuB,WACFvB,EAAEiB,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAEmB,QAASD,GAAK,IAClClB,EAAEoB,YAAF,MAAApB,EAAC,EACIqB,YACD,EACA,EACAH,EAAIhB,EAAIF,EAAEwB,GACVxB,EAAEa,IAAIb,EAAEsB,MAAMJ,EAAGhB,GAAI,EAAG,EAAG,EAAGF,EAAEW,MAAQ,IACxC,KAINX,EAAEuB,YACFrB,GAAK,MACDF,EAAEyB,QAAUzB,EAAE0B,WAUPC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ5B,OAAQA,O,kCCrDpB,sCAiBM6B,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKtB,IAAIiB,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBjB,IAzBU,SACvBQ,EACAC,EACAC,EACAQ,EACAL,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACK,EAAQT,EAAOQ,GACxC,OAAOC,EAASJ,KAAKC,IAAIN,GAASQ,EAYxBE,CAAkBZ,EAASE,EAAOQ,GACtCD,EAXkB,SAACE,EAAQT,EAAOQ,GACxC,OAAOC,EAASJ,KAAKtB,IAAIiB,GAASQ,EAUxBG,CAAkBZ,EAASC,EAAOQ,GAC5C,OAAOL,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG","file":"component---src-pages-sketch-2019-04-18-js-4793d25873b48a4b7df8.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let hue = 0;\n  let t = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSB, 100);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    p.translate(p.width / 2, p.height / 2);\n    hue = p.map(p.sin(p.frameCount / 500), -1, 1, 0, 100);\n    p.stroke(hue, 50, 100, 10);\n    p.beginShape();\n    for (let i = 0; i < p.HALF_PI; i += 0.01) {\n      p.curveVertex(\n        ...polarToCartesian(\n          0,\n          0,\n          i + t,\n          p.map(p.noise(i, t), 0, 1, 0, p.width),\n          true\n        )\n      );\n    }\n    p.endShape();\n    p.beginShape();\n    for (let i = 0; i < p.HALF_PI; i += 0.01) {\n      p.curveVertex(\n        ...polarToCartesian(\n          0,\n          0,\n          i + t + p.PI,\n          p.map(p.noise(i, t), 0, 1, 0, p.width / 2),\n          true\n        )\n      );\n    }\n    p.endShape();\n    t += 0.001;\n    t > p.TWO_PI && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}