{"version":3,"sources":["webpack:///./src/lib/lerpLine.js","webpack:///./src/pages/sketch/2019/05/06.js"],"names":["p","x1","y1","x2","y2","rate","showFirstDot","noisy","l","random","point","lerp","line","sketch","scalar","x","y","setup","createCanvas","background","noFill","stroke","width","height","draw","moveX","moveY","strokeWeight","noise","lerpLine","noLoop","location","path","pathname","description"],"mappings":"+FAYe,aACbA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,QADA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAEJF,EAAO,EACT,IAAK,IAAIG,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,KACXC,GAASP,EAAES,SAAWD,IAAOD,IAChCP,EAAEU,MAAMV,EAAEW,KAAKV,EAAIE,EAAIK,GAAIR,EAAEW,KAAKT,EAAIE,EAAII,SAI9CR,EAAEY,KAAKX,EAAIC,EAAIC,EAAIC,K,kCC9BvB,yDAIMS,EAAS,SAASb,GACtB,IAAIc,EACAC,EACAC,EACAb,EACAC,EAEJJ,EAAEiB,MAAQ,WACRjB,EAAEkB,aAAa,IAAK,KACpBlB,EAAEmB,WAAW,SACbnB,EAAEoB,SACFpB,EAAEqB,OAAO,GACTP,EAASd,EAAES,OAAO,GAAI,IACtBM,EAAIZ,EAAKH,EAAEsB,MAAQ,EACnBN,EAAIZ,EAAKJ,EAAEuB,OAAS,GAGtBvB,EAAEwB,KAAO,WACP,IAAMC,EAAQzB,EAAES,OAAO,EAAEK,EAAQA,IAC3BY,EAAQ1B,EAAES,OAAO,EAAEK,EAAQA,IACjCd,EAAE2B,aAAab,EAASd,EAAE4B,MAAMb,EAAGC,IAEnCA,EAAIZ,EAAKsB,GADTX,EAAIZ,EAAKsB,GAED,GAAKT,EAAI,GAAKD,EAAIf,EAAEsB,OAASN,EAAIhB,EAAEuB,QACzCM,YAAS7B,EAAGG,EAAIC,EAAIW,EAAGC,EAAGhB,EAAES,UAC5BoB,YACE7B,EACAA,EAAEsB,MAAQnB,EACVH,EAAEuB,OAASnB,EACXJ,EAAEsB,MAAQP,EACVf,EAAEuB,OAASP,EACXhB,EAAES,WAGJT,EAAE8B,SAEJ3B,EAAKY,EACLX,EAAKY,IAIM,0BAAGe,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACElB,OAAQA,EACRmB,KAAMD,EAASE,SACfC,YAAY","file":"component---src-pages-sketch-2019-05-06-js-2a799e4176bdd902f17b.js","sourcesContent":["/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  if (rate > 0) {\n    for (let l = 0; l < 1; l += rate) {\n      if (l === 0 && !showFirstDot) continue;\n      if ((noisy && p.random() > l) || !noisy) {\n        p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n      }\n    }\n  } else {\n    p.line(x1, y1, x2, y2);\n  }\n}\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  let scalar;\n  let x;\n  let y;\n  let x2;\n  let y2;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(\"white\");\n    p.noFill();\n    p.stroke(0);\n    scalar = p.random(10, 20);\n    x = x2 = p.width / 2;\n    y = y2 = p.height / 2;\n  };\n\n  p.draw = function() {\n    const moveX = p.random([-scalar, scalar]);\n    const moveY = p.random([-scalar, scalar]);\n    p.strokeWeight(scalar * p.noise(x, y));\n    x = x2 + moveX;\n    y = y2 + moveY;\n    if (x > 0 && y > 0 && x < p.width && y < p.height) {\n      lerpLine(p, x2, y2, x, y, p.random());\n      lerpLine(\n        p,\n        p.width - x2,\n        p.height - y2,\n        p.width - x,\n        p.height - y,\n        p.random()\n      );\n    } else {\n      p.noLoop();\n    }\n    x2 = x;\n    y2 = y;\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Reload page for a different variation.\"\n  />\n);\n"],"sourceRoot":""}