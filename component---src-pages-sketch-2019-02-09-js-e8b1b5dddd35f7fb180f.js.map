{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/09.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","gridSize","manualControl","drawTheThings","clr","sizeFunction","x","y","alt","fill","width","height","size","rect","ellipse","setup","createCanvas","noStroke","rectMode","CENTER","blendMode","SOFT_LIGHT","draw","background","distX","mouseX","polarToCartesianX","frameCount","distY","mouseY","polarToCartesianY","color","map","dist","mouseClicked","touchMoved","location","path","pathname","description","center","angle","distance","Math","cos","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","polarToCartesian"],"mappings":"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","file":"component---src-pages-sketch-2019-02-09-js-e8b1b5dddd35f7fb180f.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { polarToCartesianX, polarToCartesianY } from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let gridSize;\n  let manualControl = false;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    gridSize = 60;\n    p.noStroke();\n    p.rectMode(p.CENTER);\n    p.blendMode(p.SOFT_LIGHT);\n  };\n\n  function drawTheThings(clr, sizeFunction) {\n    let x = gridSize + gridSize / 2;\n    let y = gridSize + gridSize / 2;\n    let alt = true;\n    p.fill(clr);\n    while (x < p.width - gridSize) {\n      while (y < p.height - gridSize) {\n        const size = sizeFunction(x, y);\n        alt && p.rect(x, y, size, size);\n        !alt && p.ellipse(x, y, size / 2);\n        y += gridSize;\n        alt = !alt;\n      }\n      x += gridSize;\n      y = gridSize + gridSize / 2;\n      alt = !alt;\n    }\n  }\n\n  p.draw = function() {\n    p.background(127);\n    let distX = manualControl\n      ? p.mouseX\n      : polarToCartesianX(p.width / 2, p.frameCount / 10, p.width / 2);\n    let distY = manualControl\n      ? p.mouseY\n      : polarToCartesianY(p.height / 2, p.frameCount / 10, p.width / 2);\n    drawTheThings(p.color(206, 86, 50), (x, y) =>\n      p.map(\n        p.dist(x, y, distX, distY),\n        0,\n        p.dist(0, 0, p.width, p.height),\n        gridSize * 1.5,\n        gridSize / 2\n      )\n    );\n    drawTheThings(p.color(36, 156, 164), (x, y) =>\n      p.map(\n        p.dist(x, y, distX, distY),\n        0,\n        p.dist(0, 0, p.width, p.height),\n        gridSize / 1.5,\n        gridSize * 2\n      )\n    );\n    drawTheThings(p.color(245, 230, 187), (x, y) =>\n      p.map(\n        p.dist(x, y, distX, distY),\n        0,\n        p.dist(0, 0, p.width, p.height),\n        gridSize / 3.5,\n        gridSize\n      )\n    );\n  };\n\n  p.mouseClicked = function() {\n    manualControl = !manualControl;\n  };\n\n  p.touchMoved = function() {\n    if (\n      p.mouseX >= 0 &&\n      p.mouseY >= 0 &&\n      p.mouseX <= p.width &&\n      p.mouseY <= p.height\n    ) {\n      return false;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Click or tap to toggle user control of the sketch.\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}