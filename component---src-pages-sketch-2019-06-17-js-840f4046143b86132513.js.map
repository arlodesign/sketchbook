{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/17.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","initShape","shapes","setup","pixelDensity","createCanvas","Array","from","a","random","TWO_PI","d","sort","b","noFill","draw","background","_loop","i","shape","stroke","map","length","beginShape","curveVertex","apply","polarToCartesian","width","height","forEach","pt","endShape","unshift","_ref","constrain","noise","frameCount","pop","__webpack_exports__","_ref2","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_5__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-06-17-js-840f4046143b86132513.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GAP = 6;\n\n  let initShape = [];\n  let shapes = [];\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.createCanvas(660, 840);\n\n    initShape = Array.from(Array(100), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(10),\n    }));\n\n    initShape.sort((a, b) => a.a - b.a);\n    shapes = [initShape];\n\n    p.noFill();\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    for (let i = shapes.length - 1; i >= 0; i--) {\n      const shape = shapes[i];\n\n      p.stroke(255, p.map(i, 0, shapes.length, 255, 0));\n      p.beginShape();\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          shape[shape.length - 3].a,\n          shape[shape.length - 3].d + i * GAP,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          shape[shape.length - 2].a,\n          shape[shape.length - 2].d + i * GAP,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          shape[shape.length - 1].a,\n          shape[shape.length - 1].d + i * GAP,\n          true\n        )\n      );\n      shape.forEach(pt =>\n        p.curveVertex(\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            pt.a,\n            pt.d + i * GAP,\n            true\n          )\n        )\n      );\n      p.endShape();\n    }\n    shapes.unshift(\n      initShape.map(({ a, d }) => ({\n        a: p.constrain(\n          a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9),\n          0,\n          p.TWO_PI\n        ),\n        d: d * p.noise(d, p.frameCount / 500) * 10,\n      }))\n    );\n    if (shapes.length > p.height / (GAP * 2)) {\n      shapes.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}