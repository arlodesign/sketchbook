{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/10.js","webpack:///./src/lib/lerpLine.js"],"names":["noise","OpenSimplexNoise","Date","now","sketch","p","setup","createCanvas","noStroke","rectMode","CENTER","draw","background","yPoints","x","width","y","noiseVal","map","noise4D","frameCount","cos","TWO_PI","sin","l","push","lerp","height","forEach","col","i","thisY","size","rect","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","x1","y1","x2","y2","rate","showFirstDot","Error","random","point"],"mappings":"iJAKMA,UAAQ,IAAIC,IAAiBC,KAAKC,QAElCC,EAAS,SAASC,GAItBA,EAAEC,MAAQ,WACRD,EAAEE,aAAa,IAAK,KACpBF,EAAEG,WACFH,EAAEI,SAASJ,EAAEK,SAGfL,EAAEM,KAAO,WACPN,EAAEO,WAAW,GAGb,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIT,EAAEU,MAAOD,GAbb,GAa6B,CAc3C,IAbA,IAAIE,EAAI,GACFC,EAAWZ,EAAEa,IACjBlB,EAAMmB,QACJd,EAAEe,WAAa,IACff,EAAEe,WAAa,IACff,EAAEgB,IAAIhB,EAAEiB,QAAUR,EAAIT,EAAEU,QACxBV,EAAEkB,IAAIlB,EAAEiB,QAAUR,EAAIT,EAAEU,UAEzB,EACD,EACA,EACA,IAEOS,EAAI,EAAGA,EAAI,EAAGA,GAAKP,EAC1BD,EAAES,KAAKpB,EAAEqB,KAAK,EAAGrB,EAAEsB,OAAS,EAAGH,IAEjCX,EAAQY,KAAKT,GAGfH,EAAQe,QAAQ,SAACC,EAAKC,GACpBD,EAAID,QAAQ,SAAAZ,GACV,IAAIe,EAAQf,EAAIX,EAAEsB,OAAS,EACvBK,EAAO3B,EAAEa,IAAIF,EAAG,EAAGX,EAAEsB,OAAS,EAAG,EAAG,GAExCtB,EAAE4B,KAtCU,GAsCLH,EAAeC,EAAOC,EAAMA,GACnC3B,EAAE4B,KAvCU,GAuCLH,EAAezB,EAAEsB,OAASI,EAAOC,EAAMA,SAMvCE,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcnC,OAAQA,EAAQoC,KAAMJ,EAASK,SAAUC,YAAY,wCCtDtDR,EAAA,WAAS7B,EAAGsC,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIzB,EAAI,EAAGA,EAAI,EAAGA,GAAKuB,GAChB,IAANvB,GAAYwB,IAChB3C,EAAE6C,SAAW1B,GAAKnB,EAAE8C,MAAM9C,EAAEqB,KAAKiB,EAAIE,EAAIrB,GAAInB,EAAEqB,KAAKkB,EAAIE,EAAItB","file":"component---src-pages-sketch-2019-06-10-js-da2bfe4df4aeb4a41b46.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport OpenSimplexNoise from \"open-simplex-noise\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst noise = new OpenSimplexNoise(Date.now());\n\nconst sketch = function(p) {\n  const GRID_SIZE = 15;\n  let max = 0.1;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.rectMode(p.CENTER);\n  };\n\n  p.draw = function() {\n    p.background(0);\n    let yPoints = [];\n\n    for (let x = 0; x < p.width; x += GRID_SIZE) {\n      let y = [];\n      const noiseVal = p.map(\n        noise.noise4D(\n          p.frameCount / 100,\n          p.frameCount / 200,\n          p.cos(p.TWO_PI * (x / p.width)),\n          p.sin(p.TWO_PI * (x / p.width))\n        ),\n        -1,\n        1,\n        0,\n        0.1\n      );\n      for (let l = 0; l < 1; l += noiseVal) {\n        y.push(p.lerp(0, p.height / 2, l));\n      }\n      yPoints.push(y);\n    }\n\n    yPoints.forEach((col, i) => {\n      col.forEach(y => {\n        let thisY = y + p.height / 2;\n        let size = p.map(y, 0, p.height / 2, 5, 0);\n\n        p.rect(i * GRID_SIZE, thisY, size, size);\n        p.rect(i * GRID_SIZE, p.height - thisY, size, size);\n      });\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}