{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/24.js","webpack:///./node_modules/amp-is-object/is-object.js","webpack:///./node_modules/coordinate-systems/coordinate-systems.js","webpack:///./node_modules/amp-is-array/is-array.js","webpack:///./node_modules/amp-is-number/is-number.js","webpack:///./node_modules/amp-extend/extend.js"],"names":["sketch","p","setup","createCanvas","WEBGL","noStroke","draw","background","pointLight","min","frameCount","camera","spherical","cart","specularMaterial","i","SIZE","push","rotateX","TWO_PI","cos","rotateY","sin","translate","WEIGHT","box","pop","location","path","pathname","description","module","exports","obj","type","isArray","isNumber","isObject","extend","degPerRadian","Math","PI","Coordinate","config","isRadian","isDegree","_x","_y","_z","_r","_t","_p","pos","Object","defineProperty","this","get","x","set","label","coords","Error","initialType","prototype","cartesian","apply","arguments","options","temp","cartesian2d","cartesian3d","polarToCart2d","polar","cylindrical","sphericalToCart3d","cyl","cartesian2dToPolar","center","cartesian3dToCylindrical","sphericalToCylindrical","pol","sph","cartesian3dToSpherical","cylindricalToSpherical","baseCoord","arrToNumeric","length","nums","num","TypeError","parseFloat","rt","r","t","xy","y","sqrt","atan2","xyz","z","x2","y2","z2","rtz","sr","sp","rtp","cr","toString","nativeIsArray","Array","call","source","prop"],"mappings":"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","file":"component---src-pages-sketch-2019-06-24-js-a40ccb10045ca2c5f1bc.js","sourcesContent":["import React from \"react\";\nimport { spherical } from \"coordinate-systems\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const SPEED = 0.075;\n  const WEIGHT = 2;\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    p.pointLight(\n      p.min(p.frameCount, 255),\n      p.min(p.frameCount, 255),\n      p.min(p.frameCount, 255),\n      1,\n      0,\n      0\n    );\n\n    p.camera(...spherical([150, 0, 0]).cart(), 0, 0, 0, 0, 1, 0);\n\n    p.specularMaterial(255, 255, 255);\n\n    for (let i = 1; i < 20; i++) {\n      const SIZE = i * WEIGHT * 2;\n      p.push();\n      p.rotateX(\n        ((p.TWO_PI * 2) / WEIGHT) * i * p.cos((p.frameCount / 400) * SPEED)\n      );\n      p.rotateY(\n        ((p.TWO_PI * 2) / WEIGHT) * i * p.sin((p.frameCount / 200) * SPEED)\n      );\n      p.push();\n      p.translate(0, -(SIZE / 2) + WEIGHT / 2, 0);\n      p.box(SIZE, WEIGHT, WEIGHT);\n      p.pop();\n      p.push();\n      p.translate(0, SIZE / 2 - WEIGHT / 2, 0);\n      p.box(SIZE, WEIGHT, WEIGHT);\n      p.pop();\n      p.push();\n      p.translate(-(SIZE / 2) + WEIGHT / 2, 0, 0);\n      p.box(WEIGHT, SIZE, WEIGHT);\n      p.pop();\n      p.push();\n      p.translate(SIZE / 2 - WEIGHT / 2, 0, 0);\n      p.box(WEIGHT, SIZE, WEIGHT);\n      p.pop();\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","module.exports = function isObject(obj) {\n  var type = typeof obj;\n  return !!obj && (type === 'function' || type === 'object');\n};","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nvar isArray = require('amp-is-array');\n\nvar isNumber = require('amp-is-number');\n\nvar isObject = require('amp-is-object');\n\nvar extend = require('amp-extend');\n\nvar degPerRadian = 180 / Math.PI;\n/**\n * @constructor Coordinate\n * @description Defines object which can convert between coordinate systems.\n * It is recommended to use one of the Coodinate.STATIC_CONSTRUCTOR functions\n * to generate your first coordinate before conversions. e.g. Coodinate.spherical(...)\n * @param {Object} config\n * {\n *     label: 'type of initial coordinate',\n *     coords: {\n *         x/y/z/r/t/p: 'k-v pairs'\n *     },\n *     isDegree: Boolean\n * }\n */\n\nvar Coordinate = function Coordinate(config) {\n  var isRadian,\n      isDegree,\n      pos = {},\n      _x,\n      _y,\n      _z,\n      _r,\n      _t,\n      _p; // Override select setters/getts\n\n\n  Object.defineProperty(this, \"isRadian\", {\n    get: function get(x) {\n      return isRadian;\n    },\n    set: function set(x) {\n      isRadian = !!x;\n\n      if (isDegree !== !x) {\n        isDegree = !x;\n      } // jshint ignore:line\n\n    }\n  });\n  Object.defineProperty(this, \"isDegree\", {\n    get: function get(x) {\n      return isDegree;\n    },\n    set: function set(x) {\n      isDegree = x;\n\n      if (isRadian !== !x) {\n        isRadian = !x;\n      } // jshint ignore:line\n\n    }\n  });\n  Object.defineProperty(pos, \"cartesian2d\", {\n    get: function get(x) {\n      return [_x, _y];\n    },\n    set: function set(x) {\n      _x = x[0];\n      _y = x[1];\n    }\n  });\n  Object.defineProperty(pos, \"cartesian3d\", {\n    get: function get(x) {\n      return [_x, _y, _z];\n    },\n    set: function set(x) {\n      _x = x[0];\n      _y = x[1];\n      _z = x[2];\n    }\n  });\n  Object.defineProperty(pos, \"polar\", {\n    get: function get(x) {\n      return [_r, _t];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n    }\n  });\n  Object.defineProperty(pos, \"cylindrical\", {\n    get: function get(x) {\n      return [_r, _t, _z];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n      _z = x[2];\n    }\n  });\n  Object.defineProperty(pos, \"spherical\", {\n    get: function get(x) {\n      return [_r, _t, _p];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n      _p = x[2];\n    }\n  }); // init from config\n\n  if (config.isDegree && !config.isRadian) {\n    this.isDegree = true;\n  } else {\n    this.isRadian = true;\n  }\n\n  if (!config.label || !config.coords) {\n    throw new Error(\"no coordinate type defined\");\n  }\n\n  this.initialType = config.label;\n  this.pos = pos;\n  this.pos[config.label] = config.coords;\n};\n/**\n * @method cartesian\n * Converts current coordinate to cartesian\n * @function cartesian\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cartesian = function () {\n  return this.cart.apply(this, arguments);\n};\n/**\n * @method cart\n * Converts current coordinate to cartesian\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cart = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      return this.pos.cartesian2d;\n\n    case 'cartesian3d':\n      return this.pos.cartesian3d;\n\n    case 'polar':\n      this.pos.cartesian2d = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n      return this.pos.cartesian2d;\n\n    case 'cylindrical':\n      temp = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n      this.pos.cartesian3d = [temp[0], temp[1], this.pos.cylindrical[2]];\n      return this.pos.cartesian3d;\n\n    case 'spherical':\n      this.pos.cartesian3d = Coordinate.sphericalToCart3d(this.pos.spherical, this.isDegree);\n      return this.pos.cartesian3d;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method cylindrical\n * Converts current coordinate to cylindrical\n * @function cylindrical\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cylindrical = function () {\n  return this.cyl.apply(this, arguments);\n};\n/**\n * @method cyl\n * Converts current coordinate to cylindrical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cyl = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      this.pos.cylindrical = [temp[0], temp[1], 0];\n      return this.pos.cylindrical;\n\n    case 'cartesian3d':\n      this.pos.cylindrical = Coordinate.cartesian3dToCylindrical(this.pos.cartesian3d, this.isDegree, options.center);\n      return this.pos.cylindrical;\n\n    case 'polar':\n      temp = this.pos.polar;\n      return [temp[0], temp[1], 0];\n\n    case 'cylindrical':\n      return this.pos.cylindrical;\n\n    case 'spherical':\n      this.pos.cylindrical = Coordinate.sphericalToCylindrical(this.pos.spherical, this.isDegree);\n      return this.pos.cylindrical;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method pol\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.pol = function () {\n  return this.polar.apply(this, arguments);\n};\n/**\n * @method polar\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.polar = function (options) {\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      this.pos.polar = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      return this.pos.polar;\n\n    case 'polar':\n      return this.pos.polar;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method spherical\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.spherical = function () {\n  return this.sph.apply(this, arguments);\n};\n/**\n * @method sph\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.sph = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      this.pos.spherical = [temp[0], temp[1], 0];\n      return this.pos.spherical;\n\n    case 'cartesian3d':\n      this.pos.spherical = Coordinate.cartesian3dToSpherical(this.pos.cartesian3d, this.isDegree, options.center);\n      return this.pos.spherical;\n\n    case 'polar':\n      temp = this.pos.polar;\n      return [temp[0], temp[1], 0];\n\n    case 'cylindrical':\n      this.pos.spherical = Coordinate.cylindricalToSpherical(this.pos.cylindrical, this.isDegree);\n      return this.pos.spherical;\n\n    case 'spherical':\n      return this.pos.spherical;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n}; ///\n/// Static Constructor Functions\n///\n\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cartesian = function (x) {\n  return Coordinate.cart(x);\n};\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cart = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length < 2 || options.coords.length > 3) {\n      throw new Error('expected exactly 2 or exactly 3 cartesian options');\n    }\n\n    baseCoord = {\n      label: 'cartesian2d',\n      options: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n\n    if (options.coords.length === 2) {\n      return new Coordinate(baseCoord);\n    }\n\n    baseCoord.label = 'cartesian3d';\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [x,y,(z?)] coords');\n};\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cylindrical = function (x) {\n  return Coordinate.cyl(x);\n};\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cyl = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 3) {\n      throw new Error('expected exactly 3 params [r, t, z]');\n    }\n\n    baseCoord = {\n      label: 'cylindrical',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [r, t, z] coords');\n};\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.polar = function (x) {\n  return Coordinate.pol(x);\n};\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.pol = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 2) {\n      throw new Error('expected exactly 2 params [r, t]');\n    }\n\n    baseCoord = {\n      label: 'polar',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected array of [r, t] options');\n};\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.spherical = function (options) {\n  return Coordinate.sph(options);\n};\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.sph = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 3) {\n      throw new Error('expected exactly 3 params [r, t, p]');\n    }\n\n    baseCoord = {\n      label: 'spherical',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [r, t, p] coords');\n};\n/**\n * Mutates an array of number-like looking values to purely numeric array\n * @example\n * [5, '2.4', '0'] => [5, 2.4, 0]\n * @param  {Array} nums\n * @return {undefined}\n */\n\n\nCoordinate.arrToNumeric = function (nums) {\n  var num;\n\n  if (!isArray(nums)) {\n    throw new TypeError(\"expected array of number-like values\");\n  }\n\n  for (var i = nums.length - 1; i >= 0; i--) {\n    num = nums[i];\n\n    if (typeof num === 'string') {\n      num = parseFloat(num);\n    }\n\n    if (!isNumber(num)) {\n      throw new TypeError(num + ' not numeric or numeric-like');\n    }\n  }\n};\n/**\n * Convert polar to 2d cartesian coordinates\n * @param  {Array}   rt        [radis, theta]\n * @param  {Boolean} isDegree specifies units\n * @return {Array}  [x, y]\n */\n\n\nCoordinate.polarToCart2d = function (rt, isDegree) {\n  var r, t, x, y;\n  r = rt[0];\n  t = rt[1];\n\n  if (isDegree) {\n    t = t * (1 / degPerRadian);\n  }\n\n  x = r * Math.cos(t);\n  y = r * Math.sin(t);\n  return [x, y];\n};\n/**\n * Convert cartesian 2d to polar coordinates\n * @param  {Array}  xy\n * @param {Boolean=} isDegree overrides default radian theta assumption\n * @param  {Array=} center [x, y] coords of center of circle.  Defaults to [0, 0],\n * however may be offset.  Note. Such functionality not supported yet for converting\n * polar to cartesian\n * @return {Array}  [radius, theta]\n */\n\n\nCoordinate.cartesian2dToPolar = function (xy, isDegree, center) {\n  var x, y, r, t;\n\n  if (!isArray(xy) && xy.length !== 2) {\n    throw new TypeError('expected [x, y] xy array');\n  }\n\n  x = xy[0];\n  y = xy[1];\n\n  if (center && !isArray(center) && center.length !== 2) {\n    throw new TypeError('expected [x, y] center array');\n  }\n\n  if (center) {\n    x = x - center[0];\n    y = y - center[1];\n  }\n\n  r = Math.sqrt(x * x + y * y);\n  t = Math.atan2(y, x);\n\n  if (isDegree) {\n    t = t * degPerRadian;\n  }\n\n  return [r, t];\n};\n/**\n * Convert 3d cartesian to 3d cylindrical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y] coords of center of circle\n * @return {Array}      [radius, theta, z]\n */\n\n\nCoordinate.cartesian3dToCylindrical = function (xyz, isDegree, center) {\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      rt;\n  rt = Coordinate.cartesian2dToPolar([x, y], isDegree, center);\n  return [rt[0], rt[1], z];\n};\n/**\n * Convert 3d cartesian to 3d spherical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y, z] coords of center of circle\n * @return {Array}      [radius, theta, phi]\n */\n\n\nCoordinate.cartesian3dToSpherical = function (xyz, isDegree, center) {\n  if (center && center.length !== 3) {\n    throw new Error('expected center value to have [x, y, z] coords' + 'for locating sphere center');\n  }\n\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      x2,\n      y2,\n      z2,\n      r,\n      t,\n      p;\n\n  if (center) {\n    x = x - center[0];\n    y = y - center[1];\n    z = z - center[2];\n  }\n\n  x2 = x * x;\n  y2 = y * y;\n  z2 = z * z;\n  r = Math.sqrt(x2 + y2 + z2);\n\n  if (!r) {\n    p = t = 0;\n  } else {\n    t = Math.atan2(y, x);\n    p = Math.atan2(Math.sqrt(x2 + y2), z);\n\n    if (isDegree) {\n      t = t * degPerRadian;\n      p = p * degPerRadian;\n    }\n  }\n\n  return [r, t, p];\n};\n/**\n * Convert a cylindrical to a spherical coordinates\n * @param  {Array}   rtz\n * @param  {Boolean} isDegree\n * @return {Array}   [radius, theta, phi]\n */\n\n\nCoordinate.cylindricalToSpherical = function (rtz, isDegree) {\n  var r = rtz[0],\n      t = rtz[1],\n      z = rtz[2];\n  var sr, sp; // sphere radius, sphere theta...\n\n  if (isDegree) {\n    t = t / degPerRadian;\n  }\n\n  sr = Math.sqrt(r * r + z * z);\n  sp = Math.atan2(r, z);\n\n  if (isDegree) {\n    sp = sp * degPerRadian;\n    t = t * degPerRadian;\n  }\n\n  return [sr, t, sp];\n};\n/**\n * Convert spherical to a cartesian coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\n\n\nCoordinate.sphericalToCart3d = function (rtp, isDegree) {\n  var r = rtp[0],\n      t = rtp[1],\n      p = rtp[2],\n      x,\n      y,\n      z;\n\n  if (isDegree) {\n    t = t / degPerRadian;\n    p = p / degPerRadian;\n  }\n\n  x = r * Math.sin(p) * Math.cos(t);\n  y = r * Math.sin(p) * Math.sin(t);\n  z = r * Math.cos(p);\n  return [x, y, z];\n};\n/**\n * Convert spherical to cylindrical coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\n\n\nCoordinate.sphericalToCylindrical = function (rtp, isDegree) {\n  var r = rtp[0],\n      t = rtp[1],\n      p = rtp[2],\n      cr,\n      z;\n\n  if (isDegree) {\n    t = t / degPerRadian;\n    p = p / degPerRadian;\n  }\n\n  cr = r * Math.sin(p);\n  z = r * Math.cos(p);\n\n  if (isDegree) {\n    t = t * degPerRadian;\n    p = p * degPerRadian;\n  }\n\n  return [cr, t, z];\n};\n\nmodule.exports = Coordinate;","require(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nvar toString = Object.prototype.toString;\nvar nativeIsArray = Array.isArray;\n\nmodule.exports = nativeIsArray || function isArray(obj) {\n  return toString.call(obj) === '[object Array]';\n};","require(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nvar toString = Object.prototype.toString;\n\nmodule.exports = function isNumber(obj) {\n  return toString.call(obj) === '[object Number]';\n};","var isObject = require('amp-is-object');\n\nmodule.exports = function (obj) {\n  if (!isObject(obj)) return obj;\n  var source, prop;\n\n  for (var i = 1, length = arguments.length; i < length; i++) {\n    source = arguments[i];\n\n    for (prop in source) {\n      obj[prop] = source[prop];\n    }\n  }\n\n  return obj;\n};"],"sourceRoot":""}