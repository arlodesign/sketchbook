{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/13.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","setup","pixelDensity","frameRate","createCanvas","strokeWeight","createLoop","gif","render","open","noiseRadius","draw","prevPoint","blendMode","BLEND","background","MULTIPLY","a","TWO_PI","push","stroke","floor","map","cos","translate","width","height","rotate","animLoop","theta","newPoint","polarToCartesian","sin","line","apply","concat","pop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"wIAKMA,UAASC,GAAYC,MAAO,GAE5BC,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACJL,IACFI,EAAEE,aAAa,GACfF,EAAEG,UAAU,KAGdH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,aAAa,IAEfL,EAAEM,WAAW,GAAI,CACfC,MAAKX,GAAS,CAAEY,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBV,EAAEW,KAAO,WAKP,IAAIC,EAJJZ,EAAEa,UAAUb,EAAEc,OACdd,EAAEe,WAAW,KACbf,EAAEa,UAAUb,EAAEgB,UAId,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAEkB,OAAQD,GAAKjB,EAAEkB,OAAS,IAAM,CAClDlB,EAAEmB,OACFnB,EAAEoB,OACA,CAAC,UAAW,SAAU,QACpBpB,EAAEqB,MAAMrB,EAAEsB,IAAItB,EAAEuB,IAAIN,IAAK,EAAG,EAAG,EAAG,kBAGtCjB,EAAEwB,UAAUxB,EAAEyB,MAAQ,EAAGzB,EAAE0B,OAAS,GACpC1B,EAAE2B,OAAOV,EAAIjB,EAAEsB,IAAItB,EAAEuB,IAAIvB,EAAE4B,SAASC,QAAS,EAAG,EAAG,EAAG,IACtD,IAAIC,EAAWC,YACb,EACA,EACAd,EACAjB,EAAEyB,MAAQzB,EAAEuB,IAAIvB,EAAEsB,IAAItB,EAAEgC,IAAIhC,EAAE4B,SAASC,QAAS,EAAG,EAAG,EAAG,IAAMZ,IAC/D,GAEEL,GACFZ,EAAEiC,KAAFC,MAAAlC,EAAUY,EAATuB,OAAuBL,IAE1B9B,EAAEoC,MACFxB,EAAYkB,KAKHO,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAc3C,OAAQA,EAAQ4C,KAAMJ,EAASK,SAAUC,YAAY,wCCxDrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK/B,IAAI6B,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKtB,IAAIoB,GAASC,GAa9BH,EAA0B,SAC9BK,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUD,KAAK/B,IAAI6B,GAASK,EAChCI,EAAIL,EAAUF,KAAKtB,IAAIoB,GAASM,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB9B,IAzBU,SACvBwB,EACAC,EACAJ,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASH,EAAOC,GACtCQ,EAAIZ,EAAkBO,EAASJ,EAAOC,GAC5C,OAAOM,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-07-13-js-5648f946abf1652e9532.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && true;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(15);\n    }\n\n    p.createCanvas(660, 660);\n    p.strokeWeight(20);\n\n    p.createLoop(40, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.MULTIPLY);\n\n    let prevPoint;\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 1000) {\n      p.push();\n      p.stroke(\n        [\"magenta\", \"yellow\", \"cyan\"][\n          p.floor(p.map(p.cos(a), -1, 1, 0, 2.99999999999))\n        ]\n      );\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(a * p.map(p.cos(p.animLoop.theta), -1, 1, 1, 3));\n      let newPoint = polarToCartesian(\n        0,\n        0,\n        a,\n        p.width * p.cos(p.map(p.sin(p.animLoop.theta), -1, 1, 1, 10) * a),\n        true\n      );\n      if (prevPoint) {\n        p.line(...prevPoint, ...newPoint);\n      }\n      p.pop();\n      prevPoint = newPoint;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}