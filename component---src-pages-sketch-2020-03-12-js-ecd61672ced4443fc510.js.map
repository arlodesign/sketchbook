{"version":3,"sources":["webpack:///./src/pages/sketch/2020/03/12.js"],"names":["sketch","p","RENDER","getURLParams","render","COLORS","setup","pixelDensity","frameRate","createCanvas","background","noStroke","noSmooth","createLoop","gif","open","noiseRadius","draw","animLoop","progress","theta","noise1D","noise","x","floor","width","clr","frameCount","length","noiseA","noiseB","y","height","clrObj","color","setAlpha","fill","push","blendMode","BLEND","MULTIPLY","translate","rotate","rect","pop","console","info","DURATION","noLoop","location","path","pathname","description"],"mappings":"gKAIMA,EAAS,SAASC,GACtB,IAAMC,EAASD,EAAEE,eAAeC,OAG1BC,EAAS,CAAC,OAAQ,UAAW,SAAU,SAE7CJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,GACfN,EAAEO,UALS,IAMXP,EAAEQ,aAAa,IAAK,KACpBR,EAAES,WAAW,KACbT,EAAEU,WACFV,EAAEW,WACFX,EAAEY,WAXa,GAWQ,CACrBC,MAAKZ,GAAS,CAAEE,QAAQ,EAAOW,MAAM,GACrCC,YAAa,MAIjBf,EAAEgB,KAAO,WAAY,IAAD,EAC0BhB,EAAEiB,SAAtCC,EADU,EACVA,SAAUC,EADA,EACAA,MAAcC,GADd,EACOC,MADP,EACcD,SAE1BE,EAAItB,EAAEuB,MAAMvB,EAAEwB,MAAQN,GACtBO,EAAMrB,EAAOJ,EAAE0B,WAAatB,EAAOuB,QACnCC,EAASR,EAASpB,EAAE0B,WAAatB,EAAOuB,OAAUF,EAAIE,OAAS,GAC/DE,EAAST,EAAQK,EAAIE,OAAU3B,EAAE0B,WAAatB,EAAOuB,OAAU,GAC/DG,EAAI9B,EAAE+B,SAAWH,EAAS,GAAK,GAC/BI,EAAShC,EAAEiC,MAAMR,GACvBO,EAAOE,SAAS,KAEhBlC,EAAEmC,KAAKH,GACPhC,EAAEoC,OACFpC,EAAEqC,UAAkB,UAARZ,EAAkBzB,EAAEsC,MAAQtC,EAAEuC,UAC1CvC,EAAEwC,UAAUlB,EAAGQ,GACf9B,EAAEyC,OAAgB,GAARtB,GACVnB,EAAE0C,KAAK,EAAG,EAAG,GAAI1C,EAAE+B,OAASD,KAAOD,EAAS,GAAK,IACjD7B,EAAE2C,MAEF3C,EAAE0B,WAAa,KAAQ,GAAKkB,QAAQC,KAAQ7C,EAAEuB,MAAiB,IAAXL,GAAxB,KACvBjB,GAA2B6C,OAAjB9C,EAAE0B,aACfkB,QAAQC,KAAK,QACb7C,EAAE+C,YAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcjD,OAAQA,EAAQkD,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-03-12-js-ecd61672ced4443fc510.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 60;\n  const RATE = 60;\n  const COLORS = [\"cyan\", \"magenta\", \"yellow\", \"white\"];\n\n  p.setup = function() {\n    p.pixelDensity(2);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.background(128);\n    p.noStroke();\n    p.noSmooth();\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.7,\n    });\n  };\n\n  p.draw = function() {\n    const { progress, theta, noise, noise1D } = p.animLoop;\n\n    const x = p.floor(p.width * progress);\n    const clr = COLORS[p.frameCount % COLORS.length];\n    const noiseA = noise1D((p.frameCount % COLORS.length) + clr.length + 1);\n    const noiseB = noise1D(clr.length - (p.frameCount % COLORS.length) + 1);\n    const y = p.height * ((noiseA + 1) / 2);\n    const clrObj = p.color(clr);\n    clrObj.setAlpha(128);\n\n    p.fill(clrObj);\n    p.push();\n    p.blendMode(clr === \"white\" ? p.BLEND : p.MULTIPLY);\n    p.translate(x, y);\n    p.rotate(-theta * 2);\n    p.rect(0, 0, 1, (p.height - y) * ((noiseB + 1) / 2));\n    p.pop();\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (!RENDER && p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}