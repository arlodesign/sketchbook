{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/04.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","count","margin","HUE","random","COLORS","Array","from","length","_","i","setup","frameRate","createLoop","FRAMES","createCanvas","width","strokeWeight","rectMode","RADIUS","colorMode","HSB","draw","blendMode","BLEND","background","noFill","HARD_LIGHT","a","map","frameCount","TWO_PI","d","sin","centerPoints","polarToCartesian","height","_loop","r","lerp","br","forEach","cp","j","stroke","x","y","square","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_4__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"qJAKMA,EAAS,SAASC,GACtB,IAKIC,EACAC,EAJEC,EAAMH,EAAEI,OAAO,IACfC,EAASC,MAAMC,KAAK,CAAEC,OAFhB,GAE+B,SAACC,EAAGC,GAAJ,OAAUP,EAAO,GAAaO,IAKzEV,EAAEW,MAAQ,WACRX,EAAEY,UAAU,IAERZ,EAAEa,YACJb,EAAEa,WAAWC,IAEfd,EAAEe,aAAa,IAAK,KACpBd,EAAQD,EAAEgB,MAAQ,GAClBd,EAASF,EAAEgB,OAAS,EAAI,GACxBhB,EAAEiB,aAAa,GACfjB,EAAEkB,SAASlB,EAAEmB,QACbnB,EAAEoB,UAAUpB,EAAEqB,IAAK,MAGrBrB,EAAEsB,KAAO,WACPtB,EAAEuB,UAAUvB,EAAEwB,OACdxB,EAAEyB,WAAW,GAEbzB,EAAE0B,SACF1B,EAAEuB,UAAUvB,EAAE2B,YAcd,IAZA,IAAMC,EAAI5B,EAAE6B,IAAI7B,EAAE8B,WA7BL,IA6B0B,EA7B1B,IA6BqC,EAAG9B,EAAE+B,QACjDC,EAAIhC,EAAE6B,IAAI7B,EAAEiC,IAAQ,EAAJL,IAAS,EAAG,EAAG,EAAG5B,EAAEgB,MAAQ,EAAa,EAATd,GAElDgC,EAAe5B,MAAMC,KAAK,CAAEC,OAAQH,EAAOG,QAAU,SAACC,EAAGC,GAAJ,OACvDyB,YACEnC,EAAEgB,MAAQ,EACVhB,EAAEoC,OAAS,EACXR,EAAI5B,EAAE+B,QAAUrB,EAAIL,EAAOG,QAC3BwB,KAfcK,EAAA,SAmBT3B,GACP,IAAM4B,EAAItC,EAAEuC,KAAK,GAAIvC,EAAEgB,MAAQ,EAAId,EAAQQ,GACrC8B,EAAKxC,EAAE6B,IAAI7B,EAAEiC,IAAQ,EAAJL,IAAS,EAAG,EAAG,EAAGU,GAEzCJ,EAAaO,QAAQ,SAACC,EAAIC,GACxB3C,EAAE4C,OAAOvC,EAAOsC,GAAI,GAAI,KACxB,IAAME,EAAI7C,EAAEuC,KAAKG,EAAGG,EAAG7C,EAAEgB,MAAQ,EAAGN,GAC9BoC,EAAI9C,EAAEuC,KAAKG,EAAGI,EAAG9C,EAAEoC,OAAS,EAAG1B,GACrCV,EAAE+C,OAAOF,EAAGC,EAAGR,EAAGE,MARb9B,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAIT,EAAOoC,EAA9B3B,KAcEsC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAActD,OAAQA,EAAQuD,KAAMJ,EAASK,SAAUC,YAAY,wCC9DrEC,EAAAzB,EAAAgB,EAAA,sBAAAU,IAAAD,EAAAzB,EAAAgB,EAAA,sBAAAW,IAAAF,EAAAzB,EAAAgB,EAAA,sBAAAY,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK/B,IAAI6B,GAASC,GAa9BH,EAA0B,SAC9BM,EACAC,EACAL,EACAM,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMzB,EAAIqB,EAAUF,KAAKC,IAAIH,GAASM,EAChCtB,EAAIqB,EAAUH,KAAK/B,IAAI6B,GAASO,EACtC,OAAOC,EAAU,CAACzB,EAAGC,GAAK,CAAED,IAAGC,MAIlBX,IAzBU,SACvB+B,EACAC,EACAL,EACAC,EACAO,QACG,IADHA,OAAU,GAEV,IAAMzB,EAAIa,EAAkBQ,EAASJ,EAAOC,GACtCjB,EAAIa,EAAkBQ,EAASL,EAAOC,GAC5C,OAAOO,EAAU,CAACzB,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-07-04-js-b7af3177f2c970891fdc.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n// import \"p5.createloop\";\n\nconst sketch = function(p) {\n  const FRAMES = 600;\n  const QTY = 4;\n  const HUE = p.random(100 / QTY);\n  const COLORS = Array.from({ length: QTY }, (_, i) => HUE + (100 / QTY) * i);\n\n  let count;\n  let margin;\n\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (p.createLoop) {\n      p.createLoop(FRAMES / 30);\n    }\n    p.createCanvas(660, 840);\n    count = p.width / 50;\n    margin = p.width * (1 / 8);\n    p.strokeWeight(2);\n    p.rectMode(p.RADIUS);\n    p.colorMode(p.HSB, 100);\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0);\n\n    p.noFill();\n    p.blendMode(p.HARD_LIGHT);\n\n    const a = p.map(p.frameCount % FRAMES, 0, FRAMES, 0, p.TWO_PI);\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width / 2 - margin * 2);\n\n    let centerPoints = Array.from({ length: COLORS.length }, (_, i) =>\n      polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        a + p.TWO_PI * (i / COLORS.length),\n        d\n      )\n    );\n\n    for (let i = 0; i < 1; i += 1 / count) {\n      const r = p.lerp(10, p.width / 2 - margin, i);\n      const br = p.map(p.sin(a * 3), -1, 1, 0, r);\n\n      centerPoints.forEach((cp, j) => {\n        p.stroke(COLORS[j], 50, 100);\n        const x = p.lerp(cp.x, p.width / 2, i);\n        const y = p.lerp(cp.y, p.height / 2, i);\n        p.square(x, y, r, br);\n      });\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}