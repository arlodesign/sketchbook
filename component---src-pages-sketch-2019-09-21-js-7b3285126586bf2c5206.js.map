{"version":3,"sources":["webpack:///./src/pages/sketch/2019/09/21.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","circleGap","startAngleSeed","random","TWO_PI","normalizeAngle","a","setup","pixelDensity","createCanvas","noFill","strokeWeight","dist","width","height","createLoop","gif","render","open","noiseRadius","draw","background","rate","animLoop","noise1D","startAngle","i","endAngle","arc","line","polarToCartesian","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"49BAKA,IAAMA,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtB,IAAIC,EACAC,EAAiBF,EAAEG,OAAOH,EAAEI,QAEhC,SAASC,EAAeC,GACtB,KAAOA,EAAIN,EAAEI,QACXE,GAAQN,EAAEI,OAEZ,OAAOE,EAGTN,EAAEO,MAAQ,WACJX,GACFI,EAAEQ,aAAa,GAGjBR,EAAES,aAAa,IAAK,KACpBT,EAAEU,SACFV,EAAEW,aAAa,GAEfV,EAAYD,EAAEY,KAAK,EAAG,EAAGZ,EAAEa,MAAQ,EAAGb,EAAEc,OAAS,GAtBrC,IAwBZd,EAAEe,WAAW,GAAI,CACfC,MAAKpB,GAAS,CAAEqB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBnB,EAAEoB,KAAO,WACPpB,EAAEqB,WAAW,KAMb,IAJA,IAAMC,EAAOtB,EAAEuB,SAASC,QAAQ,IAAO,EAEnCC,EAAavB,EAAiBoB,EAEzBI,EAAI,EAAGA,EArCJ,IAqCiBA,IAAK,CAChC,IAAIC,EAAWF,EAAavB,EAAiBoB,EAC7CtB,EAAE4B,IACA5B,EAAEa,MAAQ,EACVb,EAAEc,OAAS,EACXb,EAAYyB,EAAI,EAChBzB,EAAYyB,EAAI,EAChBrB,EAAeoB,GACfpB,EAAesB,IAEjBF,EAAaE,EACb3B,EAAE6B,KAAF,MAAA7B,EAAC,EACI8B,YACD9B,EAAEa,MAAQ,EACVb,EAAEc,OAAS,EACXa,EACA1B,EAAYyB,GACZ,IANH,SAQII,YACD9B,EAAEa,MAAQ,EACVb,EAAEc,OAAS,EACXa,EACA1B,GAAayB,EAAI,IACjB,SAkBK,0BAAGK,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAchC,OAAQA,EAAQiC,KAAMD,EAASE,SAAUC,YAAY,O,kCCtFrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBpB,IAzBU,SACvBc,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-09-21-js-7b3285126586bf2c5206.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\nconst CIRCLES = 100;\n\nconst sketch = function(p) {\n  let circleGap;\n  let startAngleSeed = p.random(p.TWO_PI);\n\n  function normalizeAngle(a) {\n    while (a > p.TWO_PI) {\n      a = a - p.TWO_PI;\n    }\n    return a;\n  }\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n    p.noFill();\n    p.strokeWeight(2);\n\n    circleGap = p.dist(0, 0, p.width / 2, p.height / 2) / CIRCLES;\n\n    p.createLoop(60, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    p.background(255);\n\n    const rate = p.animLoop.noise1D(0.5) + 1;\n\n    let startAngle = startAngleSeed * rate;\n\n    for (let i = 0; i < CIRCLES; i++) {\n      let endAngle = startAngle + startAngleSeed * rate;\n      p.arc(\n        p.width / 2,\n        p.height / 2,\n        circleGap * i * 2,\n        circleGap * i * 2,\n        normalizeAngle(startAngle),\n        normalizeAngle(endAngle)\n      );\n      startAngle = endAngle;\n      p.line(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          endAngle,\n          circleGap * i,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          endAngle,\n          circleGap * (i + 1),\n          true\n        )\n      );\n    }\n  };\n\n  // p.touchMoved = function() {\n  //  if (\n  //    p.mouseX >= 0 &&\n  //    p.mouseY >= 0 &&\n  //    p.mouseX <= p.width &&\n  //    p.mouseY <= p.height\n  //  ) {\n  //    return false;\n  //  }\n  // };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}