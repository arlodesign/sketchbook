{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/20.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/lib/lineIntersection.js"],"names":["sketch","p","r","M","shuffle","OFFSET","QUARTER_PI","HALF_PI","PI","HUE","random","TWO_PI","SIDE_COUNT","sides","complete","setup","frameRate","createCanvas","colorMode","HSB","background","createLoop","noiseRadius","blendMode","OVERLAY","width","Array","fill","map","_","i","polarToCartesian","height","draw","animLoop","theta","noise1D","thetaA","thetaB","thetaC","thetaD","a","x","y","b","length","lineIntersection","stroke","asin","sin","acos","cos","noFill","bezier","easeInOutQuad","progress","floor","frameCount","console","info","DURATION","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","linear","t","easeInQuad","easeOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","x1","y1","x2","y2","x3","y3","x4","y4","uA","uB"],"mappings":"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","file":"component---src-pages-sketch-2020-01-20-js-28f5d82a282fab42e83d.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lineIntersection from \"~lib/lineIntersection\";\nimport { easeInOutQuad } from \"~lib/easing\";\n\nconst sketch = function(p) {\n  const DURATION = 360;\n  const RATE = 60;\n  const M = p.shuffle([1, 2, 3, 5, 7, 9, 11, 13, 17]);\n  const OFFSET = p.shuffle([p.QUARTER_PI, p.HALF_PI, p.PI]);\n  const HUE = p.random(p.TWO_PI);\n  const SIDE_COUNT = p.random([4, 5, 6, 7, 8]);\n\n  let sides = [];\n  let r;\n  let complete = 0;\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, p.TWO_PI);\n    p.background(p.TWO_PI - HUE, p.QUARTER_PI, p.PI);\n    p.createLoop(DURATION, {\n      noiseRadius: 2,\n    });\n    p.blendMode(p.OVERLAY);\n\n    r = p.width / 2 - p.width / 20;\n\n    sides = Array(SIDE_COUNT)\n      .fill()\n      .map((_, i) => [\n        polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          (p.TWO_PI / SIDE_COUNT) * i,\n          r,\n          true\n        ),\n        polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          (p.TWO_PI / SIDE_COUNT) * (i + 1),\n          r,\n          true\n        ),\n      ]);\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n\n    const thetaA = theta * M[0];\n    const thetaB = theta * M[1] + OFFSET[0];\n    const thetaC = theta * M[2] + OFFSET[1];\n    const thetaD = theta * M[3] + OFFSET[2];\n\n    let a = { x: null, y: null };\n    let b = { x: null, y: null };\n\n    for (let i = 0; i < sides.length; i++) {\n      a =\n        a.x && a.y\n          ? a\n          : lineIntersection(\n              p.width / 2,\n              p.height / 2,\n              ...polarToCartesian(\n                p.width / 2,\n                p.height / 2,\n                thetaA,\n                p.width / 2,\n                true\n              ),\n              ...sides[i][0],\n              ...sides[i][1]\n            );\n\n      b =\n        b.x && b.y\n          ? b\n          : lineIntersection(\n              p.width / 2,\n              p.height / 2,\n              ...polarToCartesian(\n                p.width / 2,\n                p.height / 2,\n                thetaB,\n                p.width / 2,\n                true\n              ),\n              ...sides[i][0],\n              ...sides[i][1]\n            );\n    }\n\n    p.stroke(\n      HUE,\n      p.asin(p.sin(theta * M[4])) + p.PI / 2,\n      p.acos(p.cos(theta * M[5])) + p.PI / 2,\n      p.HALF_PI\n    );\n    p.noFill();\n    p.bezier(\n      a.x,\n      a.y,\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        thetaC,\n        r * 0.8 * easeInOutQuad((noise1D(M[6]) + 1) / 2),\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        thetaD,\n        r * 0.8 * easeInOutQuad((noise1D(M[7]) + 1) / 2),\n        true\n      ),\n      b.x,\n      b.y\n    );\n\n    const progress = p.floor((p.frameCount / (DURATION * RATE)) * 100);\n\n    if (progress > complete) {\n      complete = progress;\n      console.info(`${complete}%`);\n    }\n\n    p.frameCount === DURATION * RATE && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","/**\n *\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n * @param {number} x3\n * @param {number} y3\n * @param {number} x4\n * @param {number} y4\n */\nexport default function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {\n  const uA =\n    ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n  const uB =\n    ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    return { x: x1 + uA * (x2 - x1), y: y1 + uA * (y2 - y1) };\n  }\n  return { x: null, y: null };\n}\n"],"sourceRoot":""}