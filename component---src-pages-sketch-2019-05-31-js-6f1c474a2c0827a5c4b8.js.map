{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/31.js"],"names":["sketch","p","RULES","random","row","this","cells","Array","from","length","WIDTH","draw","y","forEach","c","i","console","log","fill","square","update","newState","str","String","push","setup","createCanvas","background","noStroke","frameCount","noLoop","location","path","pathname","description"],"mappings":"wKAGMA,EAAS,SAASC,GACtB,IAGMC,EAAQ,CACZ,IAAOD,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,KA6BhBC,EAAM,IAzCa,WAgBvB,aACEC,KAAKC,MAAQC,MAAMC,KAAK,CAAEC,OAAQC,KAAqB,kBACrDT,EAAEE,OAAO,CAAC,EAAG,OAEfE,KAAKC,MAAMD,KAAKC,MAAMG,OAAS,GAAK,EApBf,2BAsBvBE,KAAA,SAAKC,GAAI,IAAD,OACNP,KAAKC,MAAMO,SAAQ,SAACC,EAAGC,GACrBC,QAAQC,IAAIH,EArBA,GAqBGC,EAAe,EAAKH,GACnCX,EAAEiB,KAAKJ,EAAI,EAAI,KACfb,EAAEkB,OAvBU,GAuBHJ,EAvBG,GAuBYH,EAvBZ,QAHO,EA6BvBQ,OAAA,WAAU,IAAD,OACHC,EAAW,GACfhB,KAAKC,MAAMO,SAAQ,SAACC,EAAGC,GACrB,IAAIO,EAAY,IAANP,EAAU,IAAMQ,OAAO,EAAKjB,MAAMS,EAAI,IAChDO,GAAOC,OAAO,EAAKjB,MAAMS,IACzBO,GAAOP,IAAM,EAAKT,MAAMG,OAAS,EAAI,IAAMc,OAAO,EAAKjB,MAAMS,EAAI,IACjEM,EAASG,KAAKtB,EAAMoB,OAEtBjB,KAAKC,MAAQe,GArCQ,MA2CzBpB,EAAEwB,MAAQ,WACRxB,EAAEyB,aA3CU,IACC,KA2CbzB,EAAE0B,WAAW,KACb1B,EAAE2B,YAGJ3B,EAAEU,KAAO,WACPP,EAAIO,KAAKV,EAAE4B,WAAa,GACxBzB,EAAIgB,SAhDY,GAiDhBnB,EAAE4B,WAlDW,KAkDwB5B,EAAE6B,WAI5B,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACE/B,OAAQA,EACRgC,KAAMD,EAASE,SACfC,YAAY","file":"component---src-pages-sketch-2019-05-31-js-6f1c474a2c0827a5c4b8.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const WIDTH = 660;\n  const HEIGHT = 840;\n  const GRID_SIZE = 10;\n  const RULES = {\n    \"111\": p.random([0, 1]),\n    \"110\": p.random([0, 1]),\n    \"101\": p.random([0, 1]),\n    \"100\": p.random([0, 1]),\n    \"011\": p.random([0, 1]),\n    \"010\": p.random([0, 1]),\n    \"001\": p.random([0, 1]),\n    \"000\": p.random([0, 1]),\n  };\n\n  class Row {\n    constructor() {\n      this.cells = Array.from({ length: WIDTH / GRID_SIZE }, () =>\n        p.random([0, 1])\n      );\n      this.cells[this.cells.length - 1] = 1;\n    }\n    draw(y) {\n      this.cells.forEach((c, i) => {\n        console.log(c, i * GRID_SIZE, this.y);\n        p.fill(c ? 0 : 255);\n        p.square(i * GRID_SIZE, y * GRID_SIZE, GRID_SIZE);\n      });\n    }\n    update() {\n      let newState = [];\n      this.cells.forEach((c, i) => {\n        let str = i === 0 ? \"1\" : String(this.cells[i - 1]);\n        str += String(this.cells[i]);\n        str += i === this.cells.length - 1 ? \"1\" : String(this.cells[i + 1]);\n        newState.push(RULES[str]);\n      });\n      this.cells = newState;\n    }\n  }\n\n  const row = new Row();\n\n  p.setup = function() {\n    p.createCanvas(WIDTH, HEIGHT);\n    p.background(255);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    row.draw(p.frameCount - 1);\n    row.update();\n    p.frameCount * GRID_SIZE > HEIGHT && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Randomly generated cellular automata. Some of these will look, well, bad. Just keep refreshing the page until you see something you like.\"\n  />\n);\n"],"sourceRoot":""}