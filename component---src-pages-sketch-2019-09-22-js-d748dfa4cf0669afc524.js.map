{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/09/22.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","PHI","sqrt","setup","pixelDensity","createCanvas","createLoop","gif","render","download","options","quality","workers","dither","debug","noiseRadius","draw","animLoop","noise2D","theta","blendMode","BLEND","background","MULTIPLY","translate","width","height","i","rotate","TWO_PI","forEach","c","stroke","strokeWeight","map","bezier","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,kCCxBjC,mEAKME,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtB,IAAMC,GAAOD,EAAEE,KAAK,GAAK,GAAK,EAE9BF,EAAEG,MAAQ,WACJP,GACFI,EAAEI,aAAa,GAGjBJ,EAAEK,aAAa,IAAK,KAEpBL,EAAEM,WAAW,GAAI,CACfC,MAAKX,GACD,CACEY,QAAQ,EACRC,UAAU,EACVC,QAAS,CACPC,QAAS,EACTC,QAAS,GACTC,OAAQ,4BACRC,OAAO,IAIfC,YAAa,MAIjBf,EAAEgB,KAAO,WAAY,IAAD,EACShB,EAAEiB,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MACjBnB,EAAEoB,UAAUpB,EAAEqB,OACdrB,EAAEsB,WAAW,KACbtB,EAAEoB,UAAUpB,EAAEuB,UAEdvB,EAAEwB,UAAUxB,EAAEyB,MAAQ,EAAGzB,EAAE0B,OAAS,GAEpC,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB3B,EAAE4B,OAAO5B,EAAE6B,OAAS,EAAIV,GACxB,CAAC,OAAQ,UAAW,UAAUW,SAAQ,SAACC,EAAGJ,GACxC,IAAIlC,EAAI,EAER,IADAO,EAAEgC,OAAOD,GACFtC,EAAe,EAAXO,EAAE0B,QACX1B,EAAEiC,aAAajC,EAAEkC,IAAIzC,EAAG,EAAGO,EAAE0B,OAAQ,EAAG,IAAI,IAC5C1B,EAAEmC,OAAO1C,GAAIO,EAAE0B,OAAQ,EAAG,EAAG,EAAG,EAAGjC,EAAGO,EAAE0B,QACxC1B,EAAEmC,QAAQ1C,GAAIO,EAAE0B,OAAQ,EAAG,EAAG,EAAG,GAAIjC,EAAGO,EAAE0B,QAC1CjC,GAAKQ,EAAMD,EAAEkC,IAAIhB,EAAQjB,EAAK0B,EAAI,IAAK,EAAG,EAAG,EAAG,QAO3C,0BAAGS,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcrC,OAAQA,EAAQsC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-09-22-js-d748dfa4cf0669afc524.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const PHI = (p.sqrt(5) + 1) / 2;\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n\n    p.createLoop(40, {\n      gif: RENDER\n        ? {\n            render: false,\n            download: true,\n            options: {\n              quality: 1,\n              workers: 10,\n              dither: \"FloydSteinberg-serpentine\",\n              debug: true,\n            },\n          }\n        : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { noise2D, theta } = p.animLoop;\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.MULTIPLY);\n\n    p.translate(p.width / 2, p.height / 2);\n\n    for (let i = 0; i < 3; i++) {\n      p.rotate(p.TWO_PI / 3 - theta);\n      [\"cyan\", \"magenta\", \"yellow\"].forEach((c, i) => {\n        let x = 1;\n        p.stroke(c);\n        while (x < p.height * 2) {\n          p.strokeWeight(p.map(x, 0, p.height, 1, 20, true));\n          p.bezier(x, -p.height, 0, 0, 0, 0, x, p.height);\n          p.bezier(-x, -p.height, 0, 0, 0, 0, -x, p.height);\n          x *= PHI * p.map(noise2D(PHI, i + 1), -1, 1, 1, 4);\n        }\n      });\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}