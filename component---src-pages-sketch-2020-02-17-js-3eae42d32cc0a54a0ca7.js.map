{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es7.object.values.js","webpack:///./src/pages/sketch/2020/02/17.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_object-to-array.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","$export","$values","S","values","it","sketch","w","h","p","cols","rows","gridWidth","gridHeight","RENDER","getURLParams","render","HEX_WIDTH","floor","sqrt","ROTATION","TWO_PI","EASINGS","shuffle","Object","easing","hexagons","prevMod","MASK","createGraphics","HEX_RADIUS","stroke","fill","beginShape","translate","width","height","a","vertex","endShape","Hexagon","this","rotate","random","map","i","dir","turning","canvas","noStroke","draw","turn","theta","animLoop","turnVal","background","push","blendMode","MULTIPLY","forEach","clr","arc","HEX_HEIGHT","PI","pop","img","get","mask","image","setup","pixelDensity","frameRate","min","windowWidth","windowHeight","createCanvas","createLoop","gif","open","noiseRadius","hexX","hexY","hex","location","path","pathname","description","DESCRIPTORS","getKeys","toIObject","isEnum","f","module","exports","isEntries","key","O","keys","length","result","call"],"mappings":"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","file":"component---src-pages-sketch-2020-02-17-js-3eae42d32cc0a54a0ca7.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport * as easing from \"~lib/easing\";\n\nconst sketch = (w, h) =>\n  function(p) {\n    const RENDER = p.getURLParams().render;\n    const DURATION = 30;\n    const RATE = 30;\n    const HEX_RADIUS = 60;\n    const HEX_WIDTH = p.floor(p.sqrt(3) * HEX_RADIUS);\n    const HEX_HEIGHT = HEX_RADIUS * 2;\n    const ROTATION = p.TWO_PI / 3;\n\n    const EASINGS = p.shuffle(Object.values(easing));\n\n    let hexagons = [];\n    let cols;\n    let rows;\n    let gridWidth;\n    let gridHeight;\n    let prevMod = 0;\n\n    const MASK = p.createGraphics(HEX_WIDTH, HEX_HEIGHT);\n    MASK.stroke(0);\n    MASK.fill(0);\n    MASK.beginShape();\n    MASK.translate(MASK.width / 2, MASK.height / 2);\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 6) {\n      MASK.vertex(\n        ...polarToCartesian(0, 0, a + p.TWO_PI / 12, HEX_RADIUS, true)\n      );\n    }\n    MASK.endShape();\n\n    class Hexagon {\n      constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.rotate = p.random(\n          [0, 1, 2, 3, 4, 5].map(i => ROTATION * i + p.TWO_PI / 12)\n        );\n        this.dir = p.random([1, -1]);\n        this.turning = false;\n\n        this.canvas = p.createGraphics(HEX_WIDTH, HEX_HEIGHT);\n        this.canvas.noStroke();\n        this.canvas.fill(0);\n      }\n\n      draw(turn) {\n        const { theta } = p.animLoop;\n\n        if (turn) {\n          this.rotate += ROTATION * this.dir;\n        }\n\n        const turnVal = p.map(theta % ROTATION, 0, ROTATION, 0, 1);\n\n        this.canvas.background(255);\n        this.canvas.push();\n        this.canvas.blendMode(p.MULTIPLY);\n        this.canvas.translate(this.canvas.width / 2, this.canvas.height / 2);\n\n        [\"cyan\", \"magenta\", \"yellow\"].forEach((clr, i) => {\n          this.canvas.push();\n          this.canvas.fill(clr);\n          this.canvas.rotate(\n            p.map(\n              EASINGS[i](turnVal),\n              0,\n              1,\n              this.rotate,\n              this.rotate + ROTATION * this.dir\n            )\n          );\n          this.canvas.arc(0, 0, HEX_HEIGHT * 2, HEX_HEIGHT * 2, 0, p.PI);\n          this.canvas.pop();\n        });\n        this.canvas.pop();\n\n        const img = this.canvas.get();\n        img.mask(MASK);\n\n        p.image(img, this.x - HEX_WIDTH / 2, this.y - HEX_HEIGHT / 2);\n      }\n    }\n\n    p.setup = function() {\n      p.pixelDensity(1);\n      p.frameRate(RATE);\n\n      w = w || p.min(p.windowWidth, 1280);\n      h = h || p.floor(w * (p.windowHeight / p.windowWidth));\n\n      p.createCanvas(w, h);\n      p.createLoop(DURATION, {\n        gif: RENDER ? { render: false, open: true } : false,\n        noiseRadius: 0.5,\n      });\n\n      cols = p.floor((p.width - HEX_WIDTH / 2) / HEX_WIDTH);\n      rows = p.floor((p.width - HEX_HEIGHT / 4) / (HEX_HEIGHT * 0.75));\n      gridWidth = cols * HEX_WIDTH + HEX_WIDTH / 2;\n      gridHeight = rows * (HEX_HEIGHT * 0.75) + HEX_HEIGHT / 4;\n\n      for (let x = 0; x < cols; x++) {\n        for (let y = 0; y < rows; y++) {\n          const hexX =\n            x * HEX_WIDTH +\n            (y % 2 ? HEX_WIDTH : HEX_WIDTH / 2) +\n            (p.width - gridWidth) / 2;\n          const hexY =\n            y * HEX_HEIGHT * 0.75 +\n            HEX_HEIGHT / 2 +\n            (p.height - gridHeight) / 2;\n\n          hexagons.push(new Hexagon(hexX, hexY));\n        }\n      }\n    };\n\n    p.draw = function() {\n      p.background(255);\n      hexagons.forEach(hex => hex.draw(p.animLoop.theta % ROTATION <= prevMod));\n      prevMod = p.animLoop.theta % ROTATION;\n    };\n  };\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch(660, 840)}\n    path={location.pathname}\n    description=\"\"\n  />\n);\n\nexport { sketch };\n","var DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n"],"sourceRoot":""}