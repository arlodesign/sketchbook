{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/31.js"],"names":["sketch","p","WIDTH","GRID_SIZE","RULES","111","random","110","101","100","011","010","001","000","row","Row","this","cells","Array","from","length","_proto","prototype","draw","y","_this","forEach","c","i","console","log","fill","square","update","_this2","newState","str","String","push","setup","createCanvas","background","noStroke","frameCount","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_5__","path","pathname","description"],"mappings":"kJAGMA,EAAS,SAASC,GACtB,IAAMC,EAAQ,IAERC,EAAY,GACZC,EAAQ,CACZC,IAAOJ,EAAEK,OAAO,CAAC,EAAG,IACpBC,IAAON,EAAEK,OAAO,CAAC,EAAG,IACpBE,IAAOP,EAAEK,OAAO,CAAC,EAAG,IACpBG,IAAOR,EAAEK,OAAO,CAAC,EAAG,IACpBI,MAAOT,EAAEK,OAAO,CAAC,EAAG,IACpBK,MAAOV,EAAEK,OAAO,CAAC,EAAG,IACpBM,MAAOX,EAAEK,OAAO,CAAC,EAAG,IACpBO,MAAOZ,EAAEK,OAAO,CAAC,EAAG,KA6BhBQ,EAAM,IAzCa,WAgBvB,SAAAC,IACEC,KAAKC,MAAQC,MAAMC,KAAK,CAAEC,OAAQlB,EAAQC,GAAa,kBACrDF,EAAEK,OAAO,CAAC,EAAG,MAEfU,KAAKC,MAAMD,KAAKC,MAAMG,OAAS,GAAK,EApBf,IAAAC,EAAAN,EAAAO,UAAA,OAAAD,EAsBvBE,KAAA,SAAKC,GAAG,IAAAC,EAAAT,KACNA,KAAKC,MAAMS,QAAQ,SAACC,EAAGC,GACrBC,QAAQC,IAAIH,EAAGC,EAAIzB,EAAWsB,EAAKD,GACnCvB,EAAE8B,KAAKJ,EAAI,EAAI,KACf1B,EAAE+B,OAAOJ,EAAIzB,EAAWqB,EAAIrB,EAAWA,MA1BpBkB,EA6BvBY,OAAA,WAAS,IAAAC,EAAAlB,KACHmB,EAAW,GACfnB,KAAKC,MAAMS,QAAQ,SAACC,EAAGC,GACrB,IAAIQ,EAAY,IAANR,EAAU,IAAMS,OAAOH,EAAKjB,MAAMW,EAAI,IAChDQ,GAAOC,OAAOH,EAAKjB,MAAMW,IACzBQ,GAAOR,IAAMM,EAAKjB,MAAMG,OAAS,EAAI,IAAMiB,OAAOH,EAAKjB,MAAMW,EAAI,IACjEO,EAASG,KAAKlC,EAAMgC,MAEtBpB,KAAKC,MAAQkB,GArCQpB,EAAA,IA2CzBd,EAAEsC,MAAQ,WACRtC,EAAEuC,aAAatC,EA1CF,KA2CbD,EAAEwC,WAAW,KACbxC,EAAEyC,YAGJzC,EAAEsB,KAAO,WACPT,EAAIS,KAAKtB,EAAE0C,WAAa,GACxB7B,EAAImB,SACJhC,EAAE0C,WAAaxC,EAlDF,KAkDwBF,EAAE2C,WAI5BC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CACElD,OAAQA,EACRmD,KAAMJ,EAASK,SACfC,YAAY","file":"component---src-pages-sketch-2019-05-31-js-85862a7e144ff048ec59.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const WIDTH = 660;\n  const HEIGHT = 840;\n  const GRID_SIZE = 10;\n  const RULES = {\n    \"111\": p.random([0, 1]),\n    \"110\": p.random([0, 1]),\n    \"101\": p.random([0, 1]),\n    \"100\": p.random([0, 1]),\n    \"011\": p.random([0, 1]),\n    \"010\": p.random([0, 1]),\n    \"001\": p.random([0, 1]),\n    \"000\": p.random([0, 1]),\n  };\n\n  class Row {\n    constructor() {\n      this.cells = Array.from({ length: WIDTH / GRID_SIZE }, () =>\n        p.random([0, 1])\n      );\n      this.cells[this.cells.length - 1] = 1;\n    }\n    draw(y) {\n      this.cells.forEach((c, i) => {\n        console.log(c, i * GRID_SIZE, this.y);\n        p.fill(c ? 0 : 255);\n        p.square(i * GRID_SIZE, y * GRID_SIZE, GRID_SIZE);\n      });\n    }\n    update() {\n      let newState = [];\n      this.cells.forEach((c, i) => {\n        let str = i === 0 ? \"1\" : String(this.cells[i - 1]);\n        str += String(this.cells[i]);\n        str += i === this.cells.length - 1 ? \"1\" : String(this.cells[i + 1]);\n        newState.push(RULES[str]);\n      });\n      this.cells = newState;\n    }\n  }\n\n  const row = new Row();\n\n  p.setup = function() {\n    p.createCanvas(WIDTH, HEIGHT);\n    p.background(255);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    row.draw(p.frameCount - 1);\n    row.update();\n    p.frameCount * GRID_SIZE > HEIGHT && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Randomly generated cellular automata. Some of these will look, well, bad. Just keep refreshing the page until you see something you like.\"\n  />\n);\n"],"sourceRoot":""}