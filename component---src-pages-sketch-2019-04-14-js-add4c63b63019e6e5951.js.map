{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/14.js","webpack:///./src/lib/addNoise.js"],"names":["sketch","p","w","h","GRID_SIZE","SIZES","grid","Doodad","x","y","size","this","random","arc","triangle","push","translate","rotate","HALF_PI","PI","pop","beginShape","vertex","endShape","CLOSE","setup","createCanvas","colorMode","HSB","hue","background","fill","noStroke","floor","width","height","xx","yy","visited","draw","concat","filter","overlap","Math","max","s","length","addNoise","noLoop","location","path","pathname","description","intensity","PTS","console","log","i","ellipse","randomGaussian","pixelDensity"],"mappings":"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","file":"component---src-pages-sketch-2019-04-14-js-add4c63b63019e6e5951.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport addNoise from \"~lib/addNoise\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 60;\n  const SIZES = [1, 2, 3, 5, 8, 13, 21];\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size * GRID_SIZE;\n\n      p.random() < 0.3 ? this.arc() : this.triangle();\n    }\n    arc() {\n      p.push();\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\n      p.arc(\n        -this.size / 2,\n        -this.size / 2,\n        this.size * 2,\n        this.size * 2,\n        0,\n        p.HALF_PI\n      );\n      p.pop();\n    }\n    triangle() {\n      p.push();\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\n      p.beginShape();\n      p.vertex(-this.size / 2, -this.size / 2);\n      p.vertex(this.size / 2, this.size / 2);\n      p.vertex(-this.size / 2, this.size / 2);\n      p.endShape(p.CLOSE);\n      p.pop();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    const hue = p.random(100);\n    p.background(hue, 25, 25);\n    p.fill(100 - hue, 50, 75);\n\n    p.noStroke();\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      addNoise(p, 0.1);\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  console.log(PTS);\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n"],"sourceRoot":""}