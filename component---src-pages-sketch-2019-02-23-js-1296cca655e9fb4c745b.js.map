{"version":3,"sources":["webpack:///./src/lib/alternate.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/02/23.js"],"names":["alternate","frameCount","functionA","functionB","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","axis","hueA","hueB","setup","createCanvas","noFill","background","colorMode","HSB","blendMode","HARD_LIGHT","dist","width","height","random","drawShapes","nfn","beginShape","r","TWO_PI","noise","vertex","endShape","draw","stroke","map","tan","noLoop","location","path","pathname","description"],"mappings":"4FAAe,SAASA,EAAUC,EAAYC,EAAWC,GACnDF,EAAa,GACfC,IACAC,MAEAA,IACAD,KANJ,mC,kCCAA,0GAAME,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,m6BCnBjC,IAAME,EAAS,SAASC,GACtB,IAGIC,EACAhB,EACAiB,EACAC,EAEJH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KAEpBL,EAAEM,SACFN,EAAEO,WAAW,KACbP,EAAEQ,UAAUR,EAAES,IAAK,KACnBT,EAAEU,UAAUV,EAAEW,YACd1B,EAA6C,EAAlCe,EAAEY,KAAK,EAAG,EAAGZ,EAAEa,MAAOb,EAAEc,QACnCZ,EAAOF,EAAEe,OAAO,EAAG,IACnBZ,EAAOH,EAAEe,OAAO,GAAI,KACpBd,EAAO,EAAED,EAAEa,MAAQ,GAAIb,EAAEc,OAAS,IAGpC,IAAME,EAAa,SAAAC,GACjBjB,EAAEkB,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAEoB,OAAQD,GAvBlB,GAuB+B,EAAG,CAAC,IAAD,EAC3BrB,IAAgB,WAAhB,IACZG,GADY,QAEfkB,EAAInB,EAAEqB,MAAMpC,EAAW,IAAMgC,EAAIE,EAAInB,EAAErB,WAAa,MACpDM,EAAWe,EAAEqB,MAAMF,EAAI,IAAMF,EAAIE,EAAInB,EAAErB,WAAa,SAH9CiB,EADoC,EACpCA,EAAGC,EADiC,EACjCA,EAKXG,EAAEsB,OAAO1B,EAAGC,GAEdG,EAAEuB,YAGJvB,EAAEwB,KAAO,WACP9C,YACEsB,EAAErB,YACF,WACEqB,EAAEyB,OACAvB,EACAF,EAAE0B,IAAI1B,EAAE2B,IAAI3B,EAAErB,WAAa,MAAO,EAAG,EAAG,GAAI,IAC5C,GAxCM,IA2CRqC,EAAW9B,KAAKC,QAElB,WACEa,EAAEyB,OACAtB,EACAH,EAAE0B,IAAI1B,EAAE2B,IAAI3B,EAAErB,WAAa,MAAO,EAAG,EAAG,GAAI,IAC5C,GAjDM,IAoDRqC,EAAW9B,KAAKG,SAGpBJ,GAxDY,IA0DGe,EAAEY,KAAF,MAAAZ,EAAC,CAAM,EAAG,GAAT,SAAeC,MAC7BD,EAAE4B,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACE9B,OAAQA,EACR+B,KAAMD,EAASE,SACfC,YAAY","file":"component---src-pages-sketch-2019-02-23-js-1296cca655e9fb4c745b.js","sourcesContent":["export default function alternate(frameCount, functionA, functionB) {\n  if (frameCount % 2) {\n    functionA();\n    functionB();\n  } else {\n    functionB();\n    functionA();\n  }\n}\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport alternate from \"~lib/alternate\";\n\nconst sketch = function(p) {\n  const SPEED = 0.4;\n  const ALPHA = 10;\n\n  let axis;\n  let distance;\n  let hueA;\n  let hueB;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n\n    p.noFill();\n    p.background(240);\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.HARD_LIGHT);\n    distance = p.dist(0, 0, p.width, p.height) * 3;\n    hueA = p.random(0, 49);\n    hueB = p.random(50, 100);\n    axis = [-p.width / 3, -p.height / 3];\n  };\n\n  const drawShapes = nfn => {\n    p.beginShape();\n    for (let r = 0; r < p.TWO_PI; r += SPEED / 3) {\n      const { x, y } = polarToCartesian(\n        ...axis,\n        r * p.noise(distance / 1000, nfn(r + p.frameCount / 1000)),\n        distance * p.noise(r / 1000, nfn(r + p.frameCount / 500))\n      );\n      p.vertex(x, y);\n    }\n    p.endShape();\n  };\n\n  p.draw = function() {\n    alternate(\n      p.frameCount,\n      () => {\n        p.stroke(\n          hueA,\n          p.map(p.tan(p.frameCount / 300), -1, 1, 66, 33),\n          66,\n          ALPHA\n        );\n        drawShapes(Math.cos);\n      },\n      () => {\n        p.stroke(\n          hueB,\n          p.map(p.tan(p.frameCount / 300), -1, 1, 33, 66),\n          66,\n          ALPHA\n        );\n        drawShapes(Math.sin);\n      }\n    );\n    distance -= SPEED;\n\n    if (distance < p.dist(0, 0, ...axis)) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Be patient. Sometimes this one starts drawing off-canvas.\"\n  />\n);\n"],"sourceRoot":""}