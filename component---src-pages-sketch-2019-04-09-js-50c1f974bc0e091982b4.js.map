{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/09.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","radius","HUE","random","angle","setup","createCanvas","colorMode","HSB","noFill","dist","width","height","draw","background","r","TWO_PI","noise","frameCount","push","strokeWeight","stroke","map","cos","translate","rotate","start","polarToCartesian","end","bezier","pop","SketchPage","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","Math","y","sin","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"2jBAKA,IAAMA,EAAS,SAASC,GACtB,IAIIC,EAJEC,EAAMF,EAAEG,OAAO,IAGjBC,EAAQ,EAGZJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,KACnBR,EAAES,SAEFR,EAASD,EAAEU,KAAK,EAAG,EAAGV,EAAEW,MAAQ,EAAGX,EAAEY,OAAS,IAGhDZ,EAAEa,KAAO,WACPb,EAAEc,WAAW,GAEb,IACE,IAAIC,EAAI,EACRA,EAAIf,EAAEgB,OACND,GAAKf,EAAEgB,QAAU,GAAKhB,EAAEiB,MAAM,IAAM,IAAMjB,EAAEkB,WAAa,MACzD,CACAlB,EAAEmB,OACFnB,EAAEoB,aAAa,IACfpB,EAAEqB,OAAOrB,EAAEsB,IAAItB,EAAEuB,IAAIR,IAAK,EAAG,EAAGb,EAAKA,EAAM,IAAK,IAAK,KACrDF,EAAEwB,UAAUxB,EAAEW,MAAQ,EAAGX,EAAEY,OAAS,GACpCZ,EAAEyB,OAAOrB,GAET,IAAMsB,EAAQC,YAAiB,EAAG,EAAGZ,EAAGd,GAAQ,GAC1C2B,EAAM,CAACF,EAAM,IAAKA,EAAM,IAC9B1B,EAAE6B,OAAF,MAAA7B,EAAC,EAAW0B,GAAX,QAAkB,EAAG,EAAG,EAAG,GAAME,IAClC5B,EAAE8B,MAGJ,IACE,IAAIf,EAAI,EACRA,EAAIf,EAAEgB,OACND,GAAKf,EAAEgB,QAAU,GAAKhB,EAAEiB,MAAM,IAAM,IAAMjB,EAAEkB,WAAa,MACzD,CACAlB,EAAEmB,OACFnB,EAAEoB,aAAa,GACfpB,EAAEqB,OAAO,GACTrB,EAAEwB,UAAUxB,EAAEW,MAAQ,EAAGX,EAAEY,OAAS,GACpCZ,EAAEyB,QAAQrB,GAEV,IAAMsB,EAAQC,YAAiB,EAAG,EAAGZ,EAAGd,GAAQ,GAC1C2B,EAAM,CAACF,EAAM,IAAKA,EAAM,IAC9B1B,EAAE6B,OAAF,MAAA7B,EAAC,EACI0B,GADJ,SAEEzB,EAAS,GACTA,EAAS,EACVA,EAAS,EACTA,EAAS,GACN2B,IAEL5B,EAAE8B,MAEJ1B,GAxDY,OAkED2B,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQhC,OAAQA,O,kCCrEpB,sCAiBMiC,EAA0B,SAC9BC,EACAC,EACA9B,EACA+B,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUM,KAAKhB,IAAInB,GAAS+B,EAChCK,EAAIN,EAAUK,KAAKE,IAAIrC,GAASgC,EACtC,OAAOC,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE,MAIlBb,IAzBU,SACvBM,EACAC,EACA9B,EACAsC,EACAL,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACK,EAAQvC,EAAOsC,GACxC,OAAOC,EAASJ,KAAKhB,IAAInB,GAASsC,EAYxBE,CAAkBX,EAAS7B,EAAOsC,GACtCF,EAXkB,SAACG,EAAQvC,EAAOsC,GACxC,OAAOC,EAASJ,KAAKE,IAAIrC,GAASsC,EAUxBG,CAAkBX,EAAS9B,EAAOsC,GAC5C,OAAOL,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2019-04-09-js-50c1f974bc0e091982b4.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const HUE = p.random(50);\n  const SPEED = 0.001;\n\n  let angle = 0;\n  let radius;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.noFill();\n\n    radius = p.dist(0, 0, p.width / 2, p.height / 2);\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    for (\n      let r = 0;\n      r < p.TWO_PI;\n      r += p.TWO_PI / (50 * p.noise(0.08, 0.09, p.frameCount / 3000))\n    ) {\n      p.push();\n      p.strokeWeight(10);\n      p.stroke(p.map(p.cos(r), -1, 1, HUE, HUE + 20), 100, 100);\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(angle);\n\n      const start = polarToCartesian(0, 0, r, radius, true);\n      const end = [start[0], -start[1]];\n      p.bezier(...start, 0, 0, 0, 0, ...end);\n      p.pop();\n    }\n\n    for (\n      let r = 0;\n      r < p.TWO_PI;\n      r += p.TWO_PI / (50 * p.noise(0.06, 0.07, p.frameCount / 1000))\n    ) {\n      p.push();\n      p.strokeWeight(5);\n      p.stroke(0);\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(-angle);\n\n      const start = polarToCartesian(0, 0, r, radius, true);\n      const end = [start[0], -start[1]];\n      p.bezier(\n        ...start,\n        -radius / 2,\n        -radius / 2,\n        radius / 2,\n        radius / 2,\n        ...end\n      );\n      p.pop();\n    }\n    angle += SPEED;\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}