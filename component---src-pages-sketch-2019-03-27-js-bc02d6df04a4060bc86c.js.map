{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/27.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","angle","Circle","x","y","z","size","this","hue","draw","stroke","a","TWO_PI","point","polarToCartesian","randomGaussian","setup","createCanvas","colorMode","HSB","background","blendMode","OVERLAY","noFill","map","sin","width","height","floor","noLoop","location","path","pathname","description","polarToCartesianX","center","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"ijBAIA,IAAMA,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,EAAG,IAEpBC,EAAQ,EAENC,EANmB,WAOvB,WAAYC,EAAGC,EAAGC,EAAGC,GACnBC,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,KAAOA,EACZC,KAAKC,IAAMV,EAAEE,OAAO,CAACD,EAAKA,EAAM,KAZX,mBAevBU,KAAA,WACEX,EAAEY,OAAOH,KAAKC,IAAK,GAAI,KAEvB,IAAK,IAAIG,EAAI,EAAGA,EAAIb,EAAEc,OAAQD,GAAK,IAAOb,EAAEc,OAC1Cd,EAAEe,MAAF,MAAAf,EAAC,EACIgB,YACDhB,EAAEiB,eAAeR,KAAKJ,EAAGI,KAAKF,GAC9BP,EAAEiB,eAAeR,KAAKH,EAAGG,KAAKF,GAC9BM,EACAJ,KAAKD,MACL,MAzBe,KAgCzBR,EAAEkB,MAAQ,WACRlB,EAAEmB,aAAa,IAAK,KACpBnB,EAAEoB,UAAUpB,EAAEqB,IAAK,KACnBrB,EAAEsB,WAAWrB,EAAK,IAAK,IACvBD,EAAEuB,UAAUvB,EAAEwB,SACdxB,EAAEyB,UAGJzB,EAAEW,KAAO,WACG,IAAIP,EACZJ,EAAE0B,IAAI1B,EAAE2B,IAAIxB,IAAS,EAAG,EAAGH,EAAE4B,MAAO,GACpC5B,EAAE0B,IAAI1B,EAAE2B,IAAIxB,IAAS,EAAG,EAAGH,EAAE6B,OAAQ,GACrC7B,EAAE8B,MAAM9B,EAAEE,OAAO,CAAC,EA3CR,GA2CkBF,EAAEE,OA3CpB,OA4CVF,EAAEiB,eA5CQ,GA4CcjB,EAAE4B,MAAQ,IAElCjB,QACFR,GAAS,GAAMH,EAAEc,QACTd,EAAEc,QAAUd,EAAE+B,WAIX,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACEjC,OAAQA,EACRkC,KAAMD,EAASE,SACfC,YAAY,oD,kCC7DhB,0GAAMC,EAAoB,SAACC,EAAQlC,EAAOmC,GACxC,OAAOD,EAASE,KAAKC,IAAIrC,GAASmC,GAE9BG,EAAoB,SAACJ,EAAQlC,EAAOmC,GACxC,OAAOD,EAASE,KAAKZ,IAAIxB,GAASmC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAzC,EACA0C,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM1C,EAAIsC,EAAUJ,KAAKC,IAAIrC,GAAS0C,EAChCvC,EAAIsC,EAAUL,KAAKZ,IAAIxB,GAAS2C,EACtC,OAAOC,EAAU,CAAC1C,EAAGC,GAAK,CAAED,IAAGC,MAIlBU,IAzBU,SACvB2B,EACAC,EACAzC,EACAmC,EACAS,QACG,IADHA,OAAU,GAEV,IAAM1C,EAAI+B,EAAkBO,EAASxC,EAAOmC,GACtChC,EAAImC,EAAkBG,EAASzC,EAAOmC,GAC5C,OAAOS,EAAU,CAAC1C,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-27-js-bc02d6df04a4060bc86c.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const DEPTH = 20;\n  const HUE = p.random(0, 50);\n\n  let angle = 0;\n\n  class Circle {\n    constructor(x, y, z, size) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.size = size;\n      this.hue = p.random([HUE, HUE + 50]);\n    }\n\n    draw() {\n      p.stroke(this.hue, 75, 100);\n\n      for (let a = 0; a < p.TWO_PI; a += 0.01 / p.TWO_PI) {\n        p.point(\n          ...polarToCartesian(\n            p.randomGaussian(this.x, this.z),\n            p.randomGaussian(this.y, this.z),\n            a,\n            this.size,\n            true\n          )\n        );\n      }\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.background(HUE, 100, 75);\n    p.blendMode(p.OVERLAY);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    const c = new Circle(\n      p.map(p.sin(angle), -1, 1, p.width, 0),\n      p.map(p.sin(angle), -1, 1, p.height, 0),\n      p.floor(p.random([1, DEPTH, p.random(DEPTH)])),\n      p.randomGaussian(DEPTH, p.width / 3)\n    );\n    c.draw();\n    angle += 0.2 / p.TWO_PI;\n    angle > p.TWO_PI && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Refresh page for a different color variation.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}