{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/26.js"],"names":["sketch","p","points","drawPixel","x","y","C","sort","a","b","dist","vector","color","getNearestPoint","fill","rect","setup","createCanvas","background","Array","map","createVector","randomGaussian","width","height","i","Object","assign","noStroke","rectMode","CENTER","draw","Y","floor","frameCount","X","xi","yi","addNoise","noLoop","location","path","pathname"],"mappings":"uKAGMA,EAAS,SAASC,GACtB,IACIC,EAAS,GAEb,SAASC,EAAUC,EAAGC,GACpB,IAAMC,EAA4B,EAOpC,SAAyBF,EAAGC,GAM1B,OALAH,EAAOK,MACL,SAACC,EAAGC,GAAJ,OACER,EAAES,KAAKN,EAAGC,EAAGG,EAAEG,OAAOP,EAAGI,EAAEG,OAAON,GAClCJ,EAAES,KAAKN,EAAGC,EAAGI,EAAEE,OAAOP,EAAGK,EAAEE,OAAON,MAE/BH,EAAO,GAAGU,MAbPC,CAAgBT,EAAGC,GAC7BJ,EAAEa,KAAKR,EAAGA,EAAGA,EAAG,OAChBL,EAAEc,KAAKX,EAAGC,EAAG,EAAG,GAChBJ,EAAEa,KAAKR,GACPL,EAAEc,KAAKX,EAAGC,EAAG,EAAG,GAYlBJ,EAAEe,MAAQ,WACRf,EAAEgB,aAAa,IAAK,KACpBhB,EAAEiB,WAAW,KACbhB,EAAS,IAAIiB,MAAM,IAChBL,OACAM,KAAI,iBAAO,CACVT,OAAQV,EAAEoB,aACRpB,EAAEqB,eAAerB,EAAEsB,MAAQ,EAAItB,EAAEsB,MA3B5B,GA2B4C,GACjDtB,EAAEqB,eAAerB,EAAEuB,OAAS,EAAIvB,EAAEuB,OA5B7B,GA4B8C,QAGtDjB,MACC,SAACC,EAAGC,GAAJ,OACER,EAAES,KAAKT,EAAEsB,MAAQ,EAAGtB,EAAEuB,OAAS,EAAGhB,EAAEG,OAAOP,EAAGI,EAAEG,OAAON,GACvDJ,EAAES,KAAKT,EAAEsB,MAAQ,EAAGtB,EAAEuB,OAAS,EAAGf,EAAEE,OAAOP,EAAGK,EAAEE,OAAON,MAE1De,KAAI,SAACnB,EAAGwB,GAAJ,OAAUC,OAAOC,OAAO1B,EAAG,CAAEW,MAAOa,OAC3CxB,EAAE2B,WACF3B,EAAE4B,SAAS5B,EAAE6B,SAGf7B,EAAE8B,KAAO,WACP,IAAMC,EAAI/B,EAAEgC,MAAMhC,EAAEiC,YAAcjC,EAAEsB,MA1CzB,KA2CLY,EAAIlC,EAAEgC,MAAMhC,EAAEiC,WAAcjC,EAAEsB,MA3CzB,GA2CyCS,GACpD,GAAIA,EAAI/B,EAAEuB,OA5CC,GA6CT,IAAK,IAAIY,EAAK,EAAGA,EA7CR,GA6CmBA,IAC1B,IAAK,IAAIC,EAAK,EAAGA,EA9CV,GA8CqBA,IAC1BlC,EAAUgC,EAAKlC,EAAEsB,MA/CZ,GA+C4Ba,EAAIJ,EAAK/B,EAAEuB,OA/CvC,GA+CwDa,QAIjEC,SAAS,IACTrC,EAAEsC,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcxC,OAAQA,EAAQyC,KAAMD,EAASE","file":"component---src-pages-sketch-2019-01-26-js-7e392d6092df36bb8881.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const GRID = 30;\n  let points = [];\n\n  function drawPixel(x, y) {\n    const C = getNearestPoint(x, y) * 4;\n    p.fill(C, C, C, 255 / 2);\n    p.rect(x, y, 2, 2);\n    p.fill(C);\n    p.rect(x, y, 1, 1);\n  }\n\n  function getNearestPoint(x, y) {\n    points.sort(\n      (a, b) =>\n        p.dist(x, y, a.vector.x, a.vector.y) -\n        p.dist(x, y, b.vector.x, b.vector.y)\n    );\n    return points[0].color;\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    points = new Array(64)\n      .fill()\n      .map(() => ({\n        vector: p.createVector(\n          p.randomGaussian(p.width / 2, (p.width / GRID) * 3),\n          p.randomGaussian(p.height / 2, (p.height / GRID) * 3)\n        ),\n      }))\n      .sort(\n        (a, b) =>\n          p.dist(p.width / 2, p.height / 2, a.vector.x, a.vector.y) -\n          p.dist(p.width / 2, p.height / 2, b.vector.x, b.vector.y)\n      )\n      .map((p, i) => Object.assign(p, { color: i }));\n    p.noStroke();\n    p.rectMode(p.CENTER);\n  };\n\n  p.draw = function() {\n    const Y = p.floor(p.frameCount / (p.width / GRID));\n    const X = p.floor(p.frameCount - (p.width / GRID) * Y);\n    if (Y < p.height / GRID) {\n      for (let xi = 0; xi < GRID; xi++) {\n        for (let yi = 0; yi < GRID; yi++) {\n          drawPixel(X + (p.width / GRID) * xi, Y + (p.height / GRID) * yi);\n        }\n      }\n    } else {\n      addNoise(0.2);\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n"],"sourceRoot":""}