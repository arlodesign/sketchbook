{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/05.js","webpack:///./src/lib/lerpLine.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","count","margin","HUE","random","COLORS","Array","from","length","_","i","setup","frameRate","createLoop","gif","render","open","createCanvas","width","strokeWeight","rectMode","RADIUS","colorMode","HSB","draw","blendMode","BLEND","background","noFill","HARD_LIGHT","a","map","frameCount","FRAMERATE","FRAMES","TWO_PI","d","centerPoints","height","lerp","forEach","cp","j","stroke","lerpLine","location","path","pathname","description","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","max","dist","l","point"],"mappings":"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","file":"component---src-pages-sketch-2019-07-05-js-2544bb5559e5daf7ba5a.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n// import \"p5.createloop\";\n\nconst sketch = function(p) {\n  const DURATION = 10;\n  const FRAMERATE = 60;\n  const FRAMES = FRAMERATE * DURATION;\n  const QTY = 7;\n  const HUE = p.random(100 / QTY);\n  const COLORS = Array.from({ length: QTY }, (_, i) => HUE + (100 / QTY) * i);\n\n  let count;\n  let margin;\n\n  p.setup = function() {\n    p.frameRate(FRAMERATE);\n    if (p.createLoop) {\n      p.createLoop(DURATION, {\n        gif: { render: false, open: true },\n      });\n    }\n    p.createCanvas(660, 840);\n    count = p.width / 50;\n    margin = p.width * (1 / 8);\n    p.strokeWeight(3);\n    p.rectMode(p.RADIUS);\n    p.colorMode(p.HSB, 100);\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(10);\n\n    p.noFill();\n    p.blendMode(p.HARD_LIGHT);\n\n    const a = p.map((p.frameCount % FRAMES) / 3, 0, FRAMES / 3, 0, p.TWO_PI);\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width - margin * 2);\n\n    let centerPoints = Array.from({ length: COLORS.length }, (_, i) =>\n      polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        a + p.TWO_PI * (i / COLORS.length),\n        d\n      )\n    );\n\n    for (let i = 0; i < 1; i += 1 / count) {\n      const r = p.lerp(margin, p.width / 2 - margin, i);\n\n      centerPoints.forEach((cp, j) => {\n        p.stroke(COLORS[j], 35, 100);\n        const x = p.lerp(cp.x, p.width / 2, i);\n        const y = p.lerp(cp.y, p.width / 2, i);\n        lerpLine(\n          p,\n          x,\n          y,\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            p.map(p.frameCount % FRAMES, 0, FRAMES, 0, p.TWO_PI),\n            p.width / 2 - margin,\n            true\n          ),\n          0.01\n        );\n      });\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n"],"sourceRoot":""}