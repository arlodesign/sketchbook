{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/04/22.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","max","hue","random","lightness","radius","iterations","setup","createCanvas","background","colorMode","HSL","blendMode","HARD_LIGHT","dist","width","height","draw","TWO_PI","stroke","lerp","line","noLoop","SketchPage"],"mappings":"4FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,igBCVjC,IAAMO,EAAS,SAASC,GACtB,IAEIC,EAFAC,EAAMF,EAAEG,OAAO,EAAG,IAClBC,EAAY,GAEZC,EAAS,EACTC,EAAa,EAEjBN,EAAEO,MAAQ,WACRP,EAAEQ,aAAa,IAAK,KACpBR,EAAES,WAAW,GACbT,EAAEU,UAAUV,EAAEW,IAAK,KACnBX,EAAEY,UAAUZ,EAAEa,YAEdZ,EAAMD,EAAEc,KAAK,EAAG,EAAGd,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,IAG7ChB,EAAEiB,KAAO,WACP,IAAK,IAAIhC,EAAQ,EAAGA,EAAQe,EAAEkB,OAAQjC,GAAS,EAAIoB,EACjDL,EAAEG,SAAWE,GAAUJ,EAAMK,GACzBN,EAAEmB,OAAOnB,EAAEoB,KAAKlB,EAAKA,EAAM,GAAIF,EAAEG,UAAW,IAAKC,EAAW,IAC5DJ,EAAEmB,OAAO,EAAG,GAChBnB,EAAEqB,KAAF,MAAArB,EAAC,EACIN,YACDM,EAAEe,MAAQ,EACVf,EAAEgB,OAAS,EACX/B,EACAoB,EAASL,EAAEG,OAAO,EAAG,GAAKG,IAC1B,IANH,SAQIZ,YACDM,EAAEe,MAAQ,EACVf,EAAEgB,OAAS,EACX/B,EACAoB,EAASL,EAAEG,OAAO,EAAG,GAAKG,IAC1B,QAIND,EACaJ,IACXI,EAAS,EACTC,KACAF,GAAa,GACD,GAAKJ,EAAEsB,YAWVC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQxB,OAAQA","file":"component---src-pages-sketch-2019-04-22-js-d159e4ca9024777bca33.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let hue = p.random(0, 66);\n  let lightness = 60;\n  let max;\n  let radius = 1;\n  let iterations = 1;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSL, 100);\n    p.blendMode(p.HARD_LIGHT);\n\n    max = p.dist(0, 0, p.width / 2, p.height / 2);\n  };\n\n  p.draw = function() {\n    for (let angle = 0; angle < p.TWO_PI; angle += 1 / radius) {\n      p.random() < radius / (max * iterations)\n        ? p.stroke(p.lerp(hue, hue + 33, p.random()), 100, lightness, 50)\n        : p.stroke(0, 0);\n      p.line(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          angle,\n          radius - p.random(0, 10 / iterations),\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          angle,\n          radius + p.random(0, 20 / iterations),\n          true\n        )\n      );\n    }\n    radius++;\n    if (radius > max) {\n      radius = 1;\n      iterations++;\n      lightness /= 2;\n      lightness < 5 && p.noLoop();\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}