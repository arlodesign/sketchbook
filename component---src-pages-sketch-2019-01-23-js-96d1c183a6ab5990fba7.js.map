{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/23.js","webpack:///./src/lib/polarToCartesian.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_1__","_lib_polarToCartesian__WEBPACK_IMPORTED_MODULE_2__","sketch","p","fibers","speed1","speed2","speed3","variant","r1","r2","r3","prevPoints","setup","createCanvas","background","floor","random","TWO_PI","draw","x","y","translate","width","height","rotate","i","AXIS_X","polarToCartesianX","AXIS_Y","polarToCartesianY","length","stroke","frameCount","line","_ref","location","a","createElement","path","pathname","description","d","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","polarToCartesian"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAIMQ,EAAS,SAASC,GACtB,IAAIC,EACAC,EACAC,EACAC,EAKAC,EAHAC,EAAK,EACLC,EAAK,EACLC,EAAK,EAELC,EAAa,GAEjBT,EAAEU,MAAQ,WACRV,EAAEW,aAAa,IAAK,KACpBX,EAAEY,WAAW,KACbX,EAASD,EAAEa,MAAMb,EAAEc,OAAO,EAAG,IAC7BZ,EAASF,EAAEc,OAAO,IAAM,KAAQd,EAAEe,OAClCZ,EAASH,EAAEc,OAAO,EAAG,GAAKd,EAAEe,OAC5BX,EAASJ,EAAEc,OAAO,IAAOd,EAAEe,OACjBf,EAAEc,OAAO,IAAM,KAAQd,EAAEe,OACnCV,EAAUL,EAAEa,MAAMb,EAAEc,OAAO,EAAG,KAGhCd,EAAEgB,KAAO,WAGP,IAAIC,EACAC,EAHJlB,EAAEmB,UAAUnB,EAAEoB,MAAQ,EAAGpB,EAAEqB,OAAS,GACpCrB,EAAEsB,OAAOd,GAGT,IAAK,IAAIe,EAAI,EAAGA,EAAItB,EAAQsB,IAAK,CAC/B,IAAMC,EAASC,YAAkB,EAAGnB,EAAIN,EAAEoB,MAAQf,GAC5CqB,EAASC,YAAkB,EAAGrB,EAAKD,EAASL,EAAEqB,OAAShB,GAC7DY,EAAIQ,YACFD,EACAjB,EAAKF,EAAWL,EAAEe,OAASd,EAAUsB,EACrClB,GAEFa,EAAIS,YAAkBD,EAAQnB,EAAMP,EAAEe,OAASd,EAAUsB,EAAGlB,GACxDI,EAAWmB,SAAW3B,IACxBD,EAAE6B,OAAO7B,EAAE8B,WAAa7B,EAAS,EAAxB,yBACTD,EAAE+B,KAAKd,EAAGC,EAAGT,EAAWc,GAAGN,EAAGR,EAAWc,GAAGL,IAE9CT,EAAWc,GAAK,CACdN,IACAC,KAGJZ,GAAMJ,EACNK,GAAMJ,EACNK,GAAMJ,IAIKX,EAAA,iBAAAuC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbtC,EAAAuC,EAAAC,cAACtC,EAAA,EAAD,CAAcE,OAAQA,EAAQqC,KAAMH,EAASI,SAAUC,YAAY,8ECzDrE/C,EAAAgD,EAAA9C,EAAA,sBAAAgC,IAAAlC,EAAAgD,EAAA9C,EAAA,sBAAAkC,IAAApC,EAAAgD,EAAA9C,EAAA,sBAAA+C,IAAA,IAAMf,EAAoB,SAACgB,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BhB,EAAoB,SAACc,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKE,IAAIJ,GAASC,GAa9BH,EAA0B,SAC9BO,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMlC,EAAI8B,EAAUH,KAAKC,IAAIH,GAASO,EAChC/B,EAAI8B,EAAUJ,KAAKE,IAAIJ,GAASQ,EACtC,OAAOC,EAAU,CAAClC,EAAGC,GAAK,CAAED,IAAGC,MAIlBkC,IAzBU,SACvBL,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMlC,EAAIQ,EAAkBsB,EAASL,EAAOC,GACtCzB,EAAIS,EAAkBqB,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAAClC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-01-23-js-96d1c183a6ab5990fba7.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { polarToCartesianX, polarToCartesianY } from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let fibers;\n  let speed1;\n  let speed2;\n  let speed3;\n  let rCanvas;\n  let r1 = 0;\n  let r2 = 0;\n  let r3 = 0;\n  let variant;\n  let prevPoints = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    fibers = p.floor(p.random(2, 7));\n    speed1 = p.random(0.02, 0.05) / p.TWO_PI;\n    speed2 = p.random(1, 2) / p.TWO_PI;\n    speed3 = p.random(0.1) / p.TWO_PI;\n    rCanvas = p.random(2000, 5000) / p.TWO_PI;\n    variant = p.floor(p.random(4, 7));\n  };\n\n  p.draw = function() {\n    p.translate(p.width / 2, p.height / 2);\n    p.rotate(r3);\n    let x;\n    let y;\n    for (let i = 0; i < fibers; i++) {\n      const AXIS_X = polarToCartesianX(0, r1, p.width / variant);\n      const AXIS_Y = polarToCartesianY(0, r1 * variant, p.height / variant);\n      x = polarToCartesianX(\n        AXIS_X,\n        r2 * variant + (p.TWO_PI / fibers) * i,\n        variant\n      );\n      y = polarToCartesianY(AXIS_Y, r2 + (p.TWO_PI / fibers) * i, variant);\n      if (prevPoints.length === fibers) {\n        p.stroke(p.frameCount % fibers ? 0 : `rgba(255,255,255,0.8)`);\n        p.line(x, y, prevPoints[i].x, prevPoints[i].y);\n      }\n      prevPoints[i] = {\n        x,\n        y,\n      };\n    }\n    r1 += speed1;\n    r2 += speed2;\n    r3 += speed3;\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}