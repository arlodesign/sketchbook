{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/23.js","webpack:///./src/lib/alternate.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","axis","distance","hueA","hueB","setup","createCanvas","noFill","background","colorMode","HSB","blendMode","HARD_LIGHT","dist","width","height","random","drawShapes","nfn","beginShape","r","TWO_PI","_polarToCartesian","polarToCartesian","apply","concat","noise","frameCount","x","y","vertex","endShape","draw","functionA","functionB","stroke","map","tan","Math","cos","sin","noLoop","__webpack_exports__","_ref","location","react_default","a","createElement","sketch_layout","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"wIAKA,IAAMA,EAAS,SAASC,GACtB,IAGIC,EACAC,EACAC,EACAC,EAEJJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KAEpBN,EAAEO,SACFP,EAAEQ,WAAW,KACbR,EAAES,UAAUT,EAAEU,IAAK,KACnBV,EAAEW,UAAUX,EAAEY,YACdV,EAA6C,EAAlCF,EAAEa,KAAK,EAAG,EAAGb,EAAEc,MAAOd,EAAEe,QACnCZ,EAAOH,EAAEgB,OAAO,EAAG,IACnBZ,EAAOJ,EAAEgB,OAAO,GAAI,KACpBf,EAAO,EAAED,EAAEc,MAAQ,GAAId,EAAEe,OAAS,IAGpC,IAAME,EAAa,SAAAC,GACjBlB,EAAEmB,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAEqB,OAAQD,GAvBlB,GAuB+B,EAAG,KAAAE,EAC3BC,IAAgBC,WAAhB,EACZvB,EADYwB,OAAA,CAEfL,EAAIpB,EAAE0B,MAAMxB,EAAW,IAAMgB,EAAIE,EAAIpB,EAAE2B,WAAa,MACpDzB,EAAWF,EAAE0B,MAAMN,EAAI,IAAMF,EAAIE,EAAIpB,EAAE2B,WAAa,SAH9CC,EADoCN,EACpCM,EAAGC,EADiCP,EACjCO,EAKX7B,EAAE8B,OAAOF,EAAGC,GAEd7B,EAAE+B,YAGJ/B,EAAEgC,KAAO,WCxCI,IAAmBL,EAAYM,EAAWC,EAAvBP,ED0C5B3B,EAAE2B,WC1CsCM,ED2CxC,WACEjC,EAAEmC,OACAhC,EACAH,EAAEoC,IAAIpC,EAAEqC,IAAIrC,EAAE2B,WAAa,MAAO,EAAG,EAAG,GAAI,IAC5C,GAxCM,IA2CRV,EAAWqB,KAAKC,MClDiCL,EDoDnD,WACElC,EAAEmC,OACA/B,EACAJ,EAAEoC,IAAIpC,EAAEqC,IAAIrC,EAAE2B,WAAa,MAAO,EAAG,EAAG,GAAI,IAC5C,GAjDM,IAoDRV,EAAWqB,KAAKE,MC1DlBb,EAAa,GACfM,IACAC,MAEAA,IACAD,MDwDA/B,GAxDY,IA0DGF,EAAEa,KAAFW,MAAAxB,EAAC,CAAM,EAAG,GAATyB,OAAexB,KAC7BD,EAAEyC,WAKOC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEjD,OAAQA,EACRkD,KAAML,EAASM,SACfC,YAAY,iGE1EhBC,EAAAC,EAAAX,EAAA,sBAAAY,IAAAF,EAAAC,EAAAX,EAAA,sBAAAa,IAAAH,EAAAC,EAAAX,EAAA,sBAAAc,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOxD,GACxC,OAAOuD,EAASnB,KAAKC,IAAImB,GAASxD,GAE9BqD,EAAoB,SAACE,EAAQC,EAAOxD,GACxC,OAAOuD,EAASnB,KAAKE,IAAIkB,GAASxD,GAa9BsD,EAA0B,SAC9BG,EACAC,EACAF,EACAG,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMnC,EAAI+B,EAAUrB,KAAKC,IAAImB,GAASG,EAChChC,EAAI+B,EAAUtB,KAAKE,IAAIkB,GAASI,EACtC,OAAOC,EAAU,CAACnC,EAAGC,GAAK,CAAED,IAAGC,MAIlBN,IAzBU,SACvBoC,EACAC,EACAF,EACAxD,EACA6D,QACG,IADHA,OAAU,GAEV,IAAMnC,EAAI0B,EAAkBK,EAASD,EAAOxD,GACtC2B,EAAI0B,EAAkBK,EAASF,EAAOxD,GAC5C,OAAO6D,EAAU,CAACnC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-02-23-js-b704c63e4912df6775ac.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport alternate from \"~lib/alternate\";\n\nconst sketch = function(p) {\n  const SPEED = 0.4;\n  const ALPHA = 10;\n\n  let axis;\n  let distance;\n  let hueA;\n  let hueB;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n\n    p.noFill();\n    p.background(240);\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.HARD_LIGHT);\n    distance = p.dist(0, 0, p.width, p.height) * 3;\n    hueA = p.random(0, 49);\n    hueB = p.random(50, 100);\n    axis = [-p.width / 3, -p.height / 3];\n  };\n\n  const drawShapes = nfn => {\n    p.beginShape();\n    for (let r = 0; r < p.TWO_PI; r += SPEED / 3) {\n      const { x, y } = polarToCartesian(\n        ...axis,\n        r * p.noise(distance / 1000, nfn(r + p.frameCount / 1000)),\n        distance * p.noise(r / 1000, nfn(r + p.frameCount / 500))\n      );\n      p.vertex(x, y);\n    }\n    p.endShape();\n  };\n\n  p.draw = function() {\n    alternate(\n      p.frameCount,\n      () => {\n        p.stroke(\n          hueA,\n          p.map(p.tan(p.frameCount / 300), -1, 1, 66, 33),\n          66,\n          ALPHA\n        );\n        drawShapes(Math.cos);\n      },\n      () => {\n        p.stroke(\n          hueB,\n          p.map(p.tan(p.frameCount / 300), -1, 1, 33, 66),\n          66,\n          ALPHA\n        );\n        drawShapes(Math.sin);\n      }\n    );\n    distance -= SPEED;\n\n    if (distance < p.dist(0, 0, ...axis)) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Be patient. Sometimes this one starts drawing off-canvas.\"\n  />\n);\n","export default function alternate(frameCount, functionA, functionB) {\n  if (frameCount % 2) {\n    functionA();\n    functionB();\n  } else {\n    functionB();\n    functionA();\n  }\n}\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}