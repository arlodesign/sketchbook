{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/28.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","HUES","angle","ad","Circle","x","y","z","size","this","hue","draw","stroke","a","TWO_PI","point","polarToCartesian","randomGaussian","setup","createCanvas","colorMode","HSB","background","blendMode","HARD_LIGHT","noFill","width","height","map","tan","floor","noLoop","location","path","pathname","description","polarToCartesianX","center","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"2+CAIA,IAAMA,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,EAAG,IAClBC,EAAO,CAACF,EAAKA,EAAM,GAAIA,EAAM,IAE/BG,EAAQ,EACRC,EAAKL,EAAEE,OALG,GAORI,EARmB,WASvB,WAAYC,EAAGC,EAAGC,EAAGC,GACnBC,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,KAAOA,EACZC,KAAKC,IAAMZ,EAAEE,OAAOC,GAdC,mBAiBvBU,KAAA,WACEb,EAAEc,OAAOH,KAAKC,IAAK,GAAI,IAAK,GAE5B,IAAK,IAAIG,EAAI,EAAGA,EAAIf,EAAEgB,OAAQD,GAAK,KAAQf,EAAEgB,OAC3ChB,EAAEiB,MAAF,MAAAjB,EAAC,EACIkB,YACDlB,EAAEmB,eAAeR,KAAKJ,EAAGI,KAAKF,GAC9BT,EAAEmB,eAAeR,KAAKH,EAAGG,KAAKF,GAC9BM,EACAf,EAAEmB,eAAeR,KAAKD,KAAMC,KAAKD,KAAO,IACxC,MA3Be,KAkCzBV,EAAEoB,MAAQ,WACRpB,EAAEqB,aAAa,IAAK,KACpBrB,EAAEsB,UAAUtB,EAAEuB,IAAK,KACnBvB,EAAEwB,WAAWxB,EAAEE,OAAOC,GAAO,IAAK,IAClCH,EAAEyB,UAAUzB,EAAE0B,YACd1B,EAAE2B,UAGJ3B,EAAEa,KAAO,WACA,EAAOP,EAAP,EACFY,YACDlB,EAAE4B,MAAQ,EACV5B,EAAE6B,OAAS,EACXzB,EACAJ,EAAE8B,IAAI9B,EAAE+B,IAAI3B,EAAQC,IAAM,EAAG,EAAGL,EAAE4B,MAAQ,EAAG,IAC7C,IANG,QAQL5B,EAAEgC,MAAMhC,EAAEE,OAAO,CAAC,EAlDR,EAkDkBF,EAAEE,OAlDpB,MAmDVF,EAAEmB,eAnDQ,EAmDcnB,EAAE4B,MAAF,OAExBf,QACFT,GAAS,EAAIJ,EAAEgB,QACI,EAAXhB,EAAEgB,QAAchB,EAAEiC,WAIf,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACEnC,OAAQA,EACRoC,KAAMD,EAASE,SACfC,YAAY,oD,kCCpEhB,0GAAMC,EAAoB,SAACC,EAAQnC,EAAOoC,GACxC,OAAOD,EAASE,KAAKC,IAAItC,GAASoC,GAE9BG,EAAoB,SAACJ,EAAQnC,EAAOoC,GACxC,OAAOD,EAASE,KAAKG,IAAIxC,GAASoC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACA3C,EACA4C,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM3C,EAAIuC,EAAUL,KAAKC,IAAItC,GAAS4C,EAChCxC,EAAIuC,EAAUN,KAAKG,IAAIxC,GAAS6C,EACtC,OAAOC,EAAU,CAAC3C,EAAGC,GAAK,CAAED,IAAGC,MAIlBU,IAzBU,SACvB4B,EACAC,EACA3C,EACAoC,EACAU,QACG,IADHA,OAAU,GAEV,IAAM3C,EAAI+B,EAAkBQ,EAAS1C,EAAOoC,GACtChC,EAAImC,EAAkBI,EAAS3C,EAAOoC,GAC5C,OAAOU,EAAU,CAAC3C,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-28-js-2dc214c4996070c1bd61.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const DEPTH = 5;\n  const HUE = p.random(0, 33);\n  const HUES = [HUE, HUE + 33, HUE + 66];\n\n  let angle = 0;\n  let ad = p.random(DEPTH);\n\n  class Circle {\n    constructor(x, y, z, size) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.size = size;\n      this.hue = p.random(HUES);\n    }\n\n    draw() {\n      p.stroke(this.hue, 50, 100, 5);\n\n      for (let a = 0; a < p.TWO_PI; a += 0.001 / p.TWO_PI) {\n        p.point(\n          ...polarToCartesian(\n            p.randomGaussian(this.x, this.z),\n            p.randomGaussian(this.y, this.z),\n            a,\n            p.randomGaussian(this.size, this.size / 2),\n            true\n          )\n        );\n      }\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.background(p.random(HUES), 100, 25);\n    p.blendMode(p.HARD_LIGHT);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    const c = new Circle(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        angle,\n        p.map(p.tan(angle / ad), -1, 1, p.width / 5, 0),\n        true\n      ),\n      p.floor(p.random([1, DEPTH, p.random(DEPTH)])),\n      p.randomGaussian(DEPTH, p.width / (DEPTH * 10))\n    );\n    c.draw();\n    angle += 1 / p.TWO_PI;\n    angle > p.TWO_PI * 2 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Refresh page for a different color variation.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}