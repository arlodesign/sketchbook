{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/08/22.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","HUE","random","COLORS","Array","from","length","_","i","setup","pixelDensity","frameRate","createCanvas","strokeWeight","colorMode","HSB","createLoop","gif","render","open","noiseRadius","draw","animLoop","noise2D","theta","blendMode","BLEND","background","noFill","MULTIPLY","push","translate","width","height","forEach","c","QUARTER_PI","burstRadius","map","burstLines","floor","stroke","a","TWO_PI","line","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,i6BCnBjC,IAAME,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IACfC,EAASC,MAAMC,KAAK,CAAEC,OAFhB,IAE+B,SAACC,EAAGC,GAAJ,OAAUP,EAAO,GAAaO,KAEzER,EAAES,MAAQ,WACJb,IACFI,EAAEU,aAAa,GACfV,EAAEW,UAAU,KAGdX,EAAEY,aAAa,IAAK,KACpBZ,EAAEa,aAAa,GACfb,EAAEc,UAAUd,EAAEe,IAAK,KAEnBf,EAAEgB,WAAW,GAAI,CACfC,MAAKrB,GAAS,CAAEsB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBpB,EAAEqB,KAAO,WAAY,IAAD,EACSrB,EAAEsB,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MACjBxB,EAAEyB,UAAUzB,EAAE0B,OACd1B,EAAE2B,WAAW,KAEb3B,EAAE4B,SACF5B,EAAEyB,UAAUzB,EAAE6B,UACd7B,EAAEa,aAAa,GAEfb,EAAE8B,OACF9B,EAAE+B,UAAF,MAAA/B,EAAC,EACIL,YAAiBK,EAAEgC,MAAQ,EAAGhC,EAAEiC,OAAS,EAAGT,EAAOxB,EAAEgC,MAAQ,GAAG,KAGrE7B,EAAO+B,SAAQ,SAACC,EAAG3B,GACjB,IAAM5B,EAASe,YACb,EACA,EACA6B,EAAQxB,EAAEoC,WAAa5B,EACvBe,EAAQvB,EAAEhB,IAAIwC,GAAQhB,IAAMR,EAAEgC,MAAQ,IACtC,GAEIK,EAAcrC,EAAEsC,IACpBf,EAAQvB,EAAEd,IAAIsC,GAAQhB,IACrB,EACD,EACA,EACAR,EAAEgC,MAAQ,GAENO,EAAavC,EAAEwC,MAAMxC,EAAEsC,IAAID,EAAa,EAAGrC,EAAEgC,MAAQ,EAAG,EAAG,MAEjEhC,EAAEyC,OAAON,EAAG,GAAI,KAEhB,IAAK,IAAIO,EAAIlB,EAAOkB,EAAI1C,EAAE2C,OAASnB,EAAOkB,GAAK1C,EAAE2C,OAASJ,EACxDvC,EAAE4C,KAAF,MAAA5C,EAAC,CACC,EACA,GAFD,SAGIL,IAAgB,WAAhB,IACEf,GADF,QAED4C,EAAQkB,EAAI1C,EAAEoC,WAAa5B,EAC3B6B,GACA,aAQG,0BAAGQ,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc9C,OAAQA,EAAQ+C,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-08-22-js-acea29e3fa641d515b27.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const QTY = 5;\n  const HUE = p.random(100 / QTY);\n  const COLORS = Array.from({ length: QTY }, (_, i) => HUE + (100 / QTY) * i);\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.strokeWeight(2);\n    p.colorMode(p.HSB, 100);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { noise2D, theta } = p.animLoop;\n    p.blendMode(p.BLEND);\n    p.background(255);\n\n    p.noFill();\n    p.blendMode(p.MULTIPLY);\n    p.strokeWeight(4);\n\n    p.push();\n    p.translate(\n      ...polarToCartesian(p.width / 2, p.height / 2, theta, p.width / 5, true)\n    );\n\n    COLORS.forEach((c, i) => {\n      const center = polarToCartesian(\n        0,\n        0,\n        theta + p.QUARTER_PI * i,\n        noise2D(p.cos(theta), i) * (p.width / 2),\n        true\n      );\n      const burstRadius = p.map(\n        noise2D(p.sin(theta), i),\n        -1,\n        1,\n        0,\n        p.width / 3\n      );\n      const burstLines = p.floor(p.map(burstRadius, 0, p.width / 3, 2, 100));\n\n      p.stroke(c, 50, 100);\n\n      for (let a = theta; a < p.TWO_PI + theta; a += p.TWO_PI / burstLines) {\n        p.line(\n          0,\n          0,\n          ...polarToCartesian(\n            ...center,\n            theta + a + p.QUARTER_PI * i,\n            burstRadius,\n            true\n          )\n        );\n      }\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}