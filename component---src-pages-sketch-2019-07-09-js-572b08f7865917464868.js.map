{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/09.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","w","h","p","COLORS","shuffle","circles","Circle","this","startA","random","TWO_PI","draw","forEach","c","i","fill","circle","animLoop","theta","length","map","SIZE","noise2D","setup","pixelDensity","frameRate","min","windowWidth","floor","windowHeight","createCanvas","noStroke","createLoop","gif","noiseRadius","push","width","height","r","ai","dist","circleCount","a","blendMode","BLEND","background","MULTIPLY","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-07-09-js-572b08f7865917464868.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = false;\n\nconst sketch = (w, h) =>\n  function(p) {\n    const COLORS = p.shuffle([\"cyan\", \"yellow\", \"magenta\"]);\n    let SIZE = 30;\n\n    let circles = [];\n\n    class Circle {\n      constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.startA = p.random(p.TWO_PI);\n      }\n      draw() {\n        COLORS.forEach((c, i) => {\n          p.fill(c);\n          p.circle(\n            ...polarToCartesian(\n              this.x,\n              this.y,\n              this.startA + p.animLoop.theta + (p.TWO_PI / COLORS.length) * i,\n              SIZE * p.map(p.cos(p.animLoop.theta), -1, 1, 0, 2),\n              true\n            ),\n            p.map(\n              p.cos(p.animLoop.theta),\n              -1,\n              1,\n              SIZE / 3,\n              p.map(p.animLoop.noise2D(this.x, this.y), -1, 1, 1, 3) * SIZE\n            )\n          );\n        });\n      }\n    }\n    p.setup = function() {\n      p.pixelDensity(1);\n      p.frameRate(30);\n\n      w = w || p.min(p.windowWidth, 960);\n      h = h || p.floor(w * (p.windowHeight / p.windowWidth));\n\n      p.createCanvas(w, h);\n\n      p.noStroke();\n      p.createLoop(5, {\n        gif: RENDER ? { render: false, open: true } : false,\n        noiseRadius: 0.2,\n      });\n      circles.push(new Circle(p.width / 2, p.height / 2));\n\n      let r = SIZE;\n      let startA = 0;\n\n      while (r < p.width / 2) {\n        let ai = 0;\n        while (\n          p.dist(\n            ...polarToCartesian(p.width / 2, p.height / 2, 0, r, true),\n            ...polarToCartesian(p.width / 2, p.height / 2, ai, r, true)\n          ) < SIZE\n        ) {\n          ai = ai + 0.001;\n        }\n\n        const circleCount = Math.floor(p.TWO_PI / ai);\n\n        for (\n          let a = startA;\n          a < p.TWO_PI + startA;\n          a += p.TWO_PI / circleCount\n        ) {\n          circles.push(\n            new Circle(\n              ...polarToCartesian(p.width / 2, p.height / 2, a, r, true)\n            )\n          );\n        }\n\n        r += SIZE;\n        startA += ai;\n      }\n    };\n\n    p.draw = function() {\n      p.blendMode(p.BLEND);\n      p.background(255);\n      p.blendMode(p.MULTIPLY);\n      circles.forEach(c => c.draw());\n    };\n  };\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch(660, 840)}\n    path={location.pathname}\n    description=\"\"\n  />\n);\n\nexport { sketch };\n"],"sourceRoot":""}