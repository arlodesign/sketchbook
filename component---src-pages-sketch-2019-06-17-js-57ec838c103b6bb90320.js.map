{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/17.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","initShape","shapes","setup","pixelDensity","createCanvas","Array","from","a","random","TWO_PI","d","sort","b","noFill","draw","background","i","shape","stroke","map","length","beginShape","curveVertex","width","height","forEach","pt","endShape","unshift","constrain","noise","frameCount","pop","SketchPage"],"mappings":"4FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,2gBCVjC,IAAMO,EAAS,SAASC,GACtB,IAEIC,EAAY,GACZC,EAAS,GAEbF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,GACfJ,EAAEK,aAAa,IAAK,MAEpBJ,EAAYK,MAAMC,KAAKD,MAAM,MAAM,iBAAO,CACxCE,EAAGR,EAAES,OAAOT,EAAEU,QACdC,EAAGX,EAAES,OAAO,SAGJG,MAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEA,EAAIK,EAAEL,KACjCN,EAAS,CAACD,GAEVD,EAAEc,UAGJd,EAAEe,KAAO,WACPf,EAAEgB,WAAW,GAEb,IAHkB,eAGTC,GACP,IAAMC,EAAQhB,EAAOe,GAErBjB,EAAEmB,OAAO,IAAKnB,EAAEoB,IAAIH,EAAG,EAAGf,EAAOmB,OAAQ,IAAK,IAC9CrB,EAAEsB,aACFtB,EAAEuB,YAAF,MAAAvB,EAAC,EACIN,YACDM,EAAEwB,MAAQ,EACVxB,EAAEyB,OAAS,EACXP,EAAMA,EAAMG,OAAS,GAAGb,EACxBU,EAAMA,EAAMG,OAAS,GAAGV,EAjCpB,EAiCwBM,GAC5B,KAGJjB,EAAEuB,YAAF,MAAAvB,EAAC,EACIN,YACDM,EAAEwB,MAAQ,EACVxB,EAAEyB,OAAS,EACXP,EAAMA,EAAMG,OAAS,GAAGb,EACxBU,EAAMA,EAAMG,OAAS,GAAGV,EA1CpB,EA0CwBM,GAC5B,KAGJjB,EAAEuB,YAAF,MAAAvB,EAAC,EACIN,YACDM,EAAEwB,MAAQ,EACVxB,EAAEyB,OAAS,EACXP,EAAMA,EAAMG,OAAS,GAAGb,EACxBU,EAAMA,EAAMG,OAAS,GAAGV,EAnDpB,EAmDwBM,GAC5B,KAGJC,EAAMQ,SAAQ,SAAAC,GAAE,OACd3B,EAAEuB,YAAF,MAAAvB,EAAC,EACIN,YACDM,EAAEwB,MAAQ,EACVxB,EAAEyB,OAAS,EACXE,EAAGnB,EACHmB,EAAGhB,EA7DD,EA6DKM,GACP,QAINjB,EAAE4B,YA3CKX,EAAIf,EAAOmB,OAAS,EAAGJ,GAAK,EAAGA,IAAM,EAArCA,GA6CTf,EAAO2B,QACL5B,EAAUmB,KAAI,gBAAGZ,EAAH,EAAGA,EAAGG,EAAN,EAAMA,EAAN,MAAe,CAC3BH,EAAGR,EAAE8B,UACHtB,EAAIR,EAAEoB,IAAIpB,EAAE+B,MAAMvB,EAAGR,EAAEgC,WAAa,KAAM,EAAG,EAAG,GAAK,KACrD,EACAhC,EAAEU,QAEJC,EAAGA,EAAIX,EAAE+B,MAAMpB,EAAGX,EAAEgC,WAAa,KAAO,QAGxC9B,EAAOmB,OAASrB,EAAEyB,OAAF,IAClBvB,EAAO+B,QAWEC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQnC,OAAQA","file":"component---src-pages-sketch-2019-06-17-js-57ec838c103b6bb90320.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GAP = 6;\n\n  let initShape = [];\n  let shapes = [];\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.createCanvas(660, 840);\n\n    initShape = Array.from(Array(100), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(10),\n    }));\n\n    initShape.sort((a, b) => a.a - b.a);\n    shapes = [initShape];\n\n    p.noFill();\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    for (let i = shapes.length - 1; i >= 0; i--) {\n      const shape = shapes[i];\n\n      p.stroke(255, p.map(i, 0, shapes.length, 255, 0));\n      p.beginShape();\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          shape[shape.length - 3].a,\n          shape[shape.length - 3].d + i * GAP,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          shape[shape.length - 2].a,\n          shape[shape.length - 2].d + i * GAP,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          shape[shape.length - 1].a,\n          shape[shape.length - 1].d + i * GAP,\n          true\n        )\n      );\n      shape.forEach(pt =>\n        p.curveVertex(\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            pt.a,\n            pt.d + i * GAP,\n            true\n          )\n        )\n      );\n      p.endShape();\n    }\n    shapes.unshift(\n      initShape.map(({ a, d }) => ({\n        a: p.constrain(\n          a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9),\n          0,\n          p.TWO_PI\n        ),\n        d: d * p.noise(d, p.frameCount / 500) * 10,\n      }))\n    );\n    if (shapes.length > p.height / (GAP * 2)) {\n      shapes.pop();\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}