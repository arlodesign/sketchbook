{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/17.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","radius","HUE","random","rotation","setup","createCanvas","colorMode","HSB","dist","width","height","draw","background","stroke","a","TWO_PI","map","sin","polarToCartesian","cos","frameCount","x","y","thisAngle","noise","aAdd","line","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","Math","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"6jBAKA,IAAMA,EAAS,SAASC,GACtB,IAKIC,EAHEC,EAAMF,EAAEG,OAAO,KAEjBC,EAAW,EAGfJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,KACnBP,EAASD,EAAES,KAAKT,EAAEU,MAAQ,EAAGV,EAAEW,OAAS,EAAG,EAAG,IAGhDX,EAAEY,KAAO,WACPZ,EAAEa,WAAW,GACbb,EAAEc,OAAO,KAET,IAAK,IAAIC,EAAIX,EAAUW,EAAIf,EAAEgB,OAASZ,EAAUW,GAAKf,EAAEgB,OAjBvC,IAiB2D,CACzEhB,EAAEc,OAAOZ,EAAKF,EAAEiB,IAAIjB,EAAEkB,IAAIH,IAAK,EAAG,EAAG,EAAG,KAAM,IAAK,IAUnD,IAXyE,MAExDI,YACfnB,EAAEU,MAAQ,EACVV,EAAEW,OAAS,EACXI,EACAf,EAAEiB,IAAIjB,EAAEoB,IAAIpB,EAAEqB,WAtBP,OAsB4B,EAAG,EAAG,EAAGpB,IAJtCqB,EAFiE,EAEjEA,EAAGC,EAF8D,EAE9DA,EAMLC,EACJT,EAAIf,EAAEiB,IAAIjB,EAAEyB,MAAMV,EAAI,GAAIX,EAAW,IAAK,EAAG,GAAI,GAAK,IAE/CsB,EAAO,EAAGA,EAAO1B,EAAEgB,OAAQU,GAAQ1B,EAAEgB,OAAS,EACrDhB,EAAE2B,KAAF,MAAA3B,EAAC,CACCsB,EACAC,GAFD,SAGIJ,YACDnB,EAAEU,MAAQ,EACVV,EAAEW,OAAS,EACXa,EAAYE,EACZ1B,EAAEiB,IAAIjB,EAAEkB,IAAIlB,EAAEqB,WAnCX,OAmCgC,EAAG,EAAGpB,EAAQ,GAC/CD,EAAEyB,MAAMV,EAAI,GAAIX,EAAW,MAC7B,MAKRA,GAAYJ,EAAEgB,OA1CH,OAoDAY,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ7B,OAAQA,O,kCCvDpB,sCAiBM8B,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMb,EAAIQ,EAAUM,KAAKhB,IAAIY,GAASC,EAChCV,EAAIQ,EAAUK,KAAKlB,IAAIc,GAASE,EACtC,OAAOC,EAAU,CAACb,EAAGC,GAAK,CAAED,IAAGC,MAIlBJ,IAzBU,SACvBW,EACAC,EACAC,EACAK,EACAF,QACG,IADHA,OAAU,GAEV,IAAMb,EAbkB,SAACgB,EAAQN,EAAOK,GACxC,OAAOC,EAASF,KAAKhB,IAAIY,GAASK,EAYxBE,CAAkBT,EAASE,EAAOK,GACtCd,EAXkB,SAACe,EAAQN,EAAOK,GACxC,OAAOC,EAASF,KAAKlB,IAAIc,GAASK,EAUxBG,CAAkBT,EAASC,EAAOK,GAC5C,OAAOF,EAAU,CAACb,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-05-17-js-0ed59145c511039fb5d5.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const PARTICLES = 100;\n  const RATE = 1200;\n  const HUE = p.random(100);\n\n  let rotation = 0;\n  let radius;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    radius = p.dist(p.width / 2, p.height / 2, 0, 0);\n  };\n\n  p.draw = function() {\n    p.background(0);\n    p.stroke(255);\n\n    for (let a = rotation; a < p.TWO_PI + rotation; a += p.TWO_PI / PARTICLES) {\n      p.stroke(HUE, p.map(p.sin(a), -1, 1, 0, 100), 100, 50);\n      const { x, y } = polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        a,\n        p.map(p.cos(p.frameCount / RATE), -1, 1, 0, radius)\n      );\n      const thisAngle =\n        a * p.map(p.noise(a / 40, rotation / 40), 0, 1, -0.3, 0.3);\n\n      for (let aAdd = 0; aAdd < p.TWO_PI; aAdd += p.TWO_PI / 3) {\n        p.line(\n          x,\n          y,\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            thisAngle + aAdd,\n            p.map(p.sin(p.frameCount / RATE), -1, 1, radius, 0) *\n              p.noise(a / 10, rotation / 100),\n            true\n          )\n        );\n      }\n    }\n    rotation += p.TWO_PI / RATE;\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}