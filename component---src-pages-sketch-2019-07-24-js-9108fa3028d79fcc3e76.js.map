{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/24.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","setup","pixelDensity","frameRate","createCanvas","noStroke","colorMode","HSB","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","OVERLAY","push","translate","width","height","size","i","rotate","map","sin","animLoop","theta","TWO_PI","fill","beginShape","vertex","apply","polarToCartesian","noise2D","cos","endShape","CLOSE","pop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-07-24-js-9108fa3028d79fcc3e76.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.colorMode(p.HSB, 1);\n\n    p.createLoop(30, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0.5);\n    p.blendMode(p.OVERLAY);\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n\n    const size = p.width / 2;\n\n    for (let i = 0; i < 1; i += 0.1) {\n      p.push();\n      p.rotate(\n        p.map(p.sin(p.animLoop.theta), -1, 1, -p.TWO_PI, p.TWO_PI) * (i + 0.1)\n      );\n      p.fill(i, 1, 1, 0.5);\n      p.beginShape();\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          0,\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(i * p.cos(p.animLoop.theta), 0),\n              -1,\n              1,\n              0.25,\n              1\n            ),\n          true\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * (2 / 5),\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(\n                i * p.cos(p.animLoop.theta),\n                p.TWO_PI * (2 / 5)\n              ),\n              -1,\n              1,\n              0.5,\n              2\n            ),\n          true\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * (4 / 5),\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(\n                i * p.cos(p.animLoop.theta),\n                p.TWO_PI * (4 / 5)\n              ),\n              -1,\n              1,\n              0.5,\n              3\n            ),\n          true\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * (1 / 5),\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(\n                i * p.cos(p.animLoop.theta),\n                p.TWO_PI * (1 / 5)\n              ),\n              -1,\n              1,\n              0.5,\n              4\n            ),\n          true\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * (3 / 5),\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(\n                i * p.cos(p.animLoop.theta),\n                p.TWO_PI * (3 / 5)\n              ),\n              -1,\n              1,\n              0.5,\n              5\n            ),\n          true\n        )\n      );\n      p.endShape(p.CLOSE);\n      p.pop();\n    }\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}