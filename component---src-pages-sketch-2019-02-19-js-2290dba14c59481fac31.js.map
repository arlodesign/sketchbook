{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/19.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","r","g","b","CF","angle","abs","sin","cos","tan","PI","distance","size","axis","a","getColor","setup","createCanvas","background","x","width","y","height","Array","from","Set","length","random","color","blendMode","DIFFERENCE","draw","i","TWO_PI","thisAngle","polarToCartesian","noFill","strokeWeight","map","stroke","ellipse","noise","noLoop","location","path","pathname","polarToCartesianX","center","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-02-19-js-2290dba14c59481fac31.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const CF = [\n    angle => p.abs(p.sin(angle)) * 240,\n    angle => p.abs(p.cos(angle)) * 240,\n    angle => p.abs(p.tan(angle)) * 240,\n    angle => p.abs(p.sin(angle + p.PI)) * 240,\n    angle => p.abs(p.cos(angle + p.PI)) * 240,\n    angle => p.abs(p.tan(angle + p.PI)) * 240,\n    angle => p.abs(p.sin(-angle)) * 240,\n    angle => p.abs(p.cos(-angle)) * 240,\n    angle => p.abs(p.tan(-angle)) * 240,\n    angle => p.abs(p.sin(-angle + p.PI)) * 240,\n    angle => p.abs(p.cos(-angle + p.PI)) * 240,\n    angle => p.abs(p.tan(-angle + p.PI)) * 240,\n  ];\n  const Q = 2;\n  let distance = 0;\n  let angle = 0;\n  let size = 10;\n  let axis = {};\n  let r;\n  let g;\n  let b;\n  let a = 32;\n  let getColor = () => {};\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(192);\n    axis = {\n      x: p.width / 2,\n      y: p.height / 2,\n    };\n    while (Array.from(new Set([r, g, b])).length < 3) {\n      r = p.random(CF);\n      g = p.random(CF);\n      b = p.random(CF);\n    }\n    getColor = angle => p.color(r(angle), g(angle), b(angle), a);\n    p.blendMode(p.DIFFERENCE);\n  };\n\n  p.draw = function() {\n    for (let i = 0; i < p.TWO_PI; i += p.TWO_PI / Q) {\n      const thisAngle = angle + i;\n      const { x, y } = polarToCartesian(axis.x, axis.y, thisAngle, distance);\n      p.noFill();\n      p.strokeWeight(p.map(distance, 0, p.width, 1, Q));\n      p.stroke(getColor(thisAngle / (Q * 1.5)));\n      p.ellipse(x, y, p.noise(angle / 10, distance / 10) * size);\n    }\n    angle += 0.01;\n    distance += 0.01;\n    size += 0.05;\n    a = size > p.width ? a - 0.1 : a;\n    axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      angle / Q,\n      distance * (Q / 2)\n    );\n    if (a === 0) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}