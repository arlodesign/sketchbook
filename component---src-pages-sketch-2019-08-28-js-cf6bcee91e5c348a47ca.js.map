{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/28.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","wx","wy","HUE","random","setup","frameRate","pixelDensity","createCanvas","WEBGL","colorMode","HSB","floor","width","height","createLoop","gif","render","open","noiseRadius","draw","_p$animLoop","animLoop","noise2D","theta","background","pointLight","x","y","push","specularMaterial","map","translate","GRID","sin","dist","cos","rotateX","HALF_PI","rotateY","rotateZ","box","pop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","polarToCartesian"],"mappings":"+HAKMA,iBAASC,GAAYC,MAAO,GAG5BC,EAAS,SAASC,GACtB,IACIC,EACAC,EAFEC,EAAMH,EAAEI,OAAO,IAIrBJ,EAAEK,MAAQ,WACRL,EAAEM,UAAU,IACZN,EAAEO,aAAa,GACfP,EAAEQ,aAAa,IAAK,IAAKR,EAAES,OAC3BT,EAAEU,UAAUV,EAAEW,IAAK,GAEnBV,EAAKD,EAAEY,MAAMZ,EAAEa,MAbN,IAcTX,EAAKF,EAAEY,MAAMZ,EAAEc,OAdN,IAgBTd,EAAEe,WAAW,GAAI,CACfC,MAAKpB,GAAS,CAAEqB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBnB,EAAEoB,KAAO,WAAW,IAAAC,EACSrB,EAAEsB,SAArBC,EADUF,EACVE,QAASC,EADCH,EACDG,MAEjBxB,EAAEyB,WAAWtB,EAAK,GAAK,IACvBH,EAAE0B,WAAW,EAAG,EAAG,EAAG,EAAG,EAAc,GAAV1B,EAAEa,OAE/B,IAAK,IAAIc,GAAK1B,EAAK,EAAG0B,EAAI1B,EAAI0B,IAC5B,IAAK,IAAIC,GAAK1B,EAAK,EAAG0B,EAAI1B,EAAI0B,IAC5B5B,EAAE6B,OACF7B,EAAE8B,iBACA9B,EAAE+B,IAAIR,EAAQI,EAAGC,IAAK,EAAG,EAAGzB,EAAM,GAAKA,EAAM,IAC7C,GACA,IAEFH,EAAEgC,UApCG,GAqCHL,EAAWM,GArCR,GAsCHL,EAAWK,GACXA,IAAWjC,EAAEkC,IAAIlC,EAAEmC,KAAKR,EAAGC,EAAG5B,EAAEa,MAAQ,EAAG,GAAKW,IAElDxB,EAAEgC,UACA,EACA,EACAC,IAAWjC,EAAEoC,IAAIpC,EAAEmC,KAAKR,EAAGC,EAAG,EAAG5B,EAAEc,OAAS,GAAKU,IAEnDxB,EAAEqC,QAAQrC,EAAEsC,SACZtC,EAAEuC,QAAQf,GACVxB,EAAEwC,SAAShB,GACXxB,EAAEyC,IAjDG,UAkDLzC,EAAE0C,QAMKC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcjD,OAAQA,EAAQkD,KAAMJ,EAASK,SAAUC,YAAY,wCC/DrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKxB,IAAIsB,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK1B,IAAIwB,GAASC,GAa9BH,EAA0B,SAC9BK,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMtC,EAAIkC,EAAUD,KAAKxB,IAAIsB,GAASK,EAChCnC,EAAIkC,EAAUF,KAAK1B,IAAIwB,GAASM,EACtC,OAAOC,EAAU,CAACtC,EAAGC,GAAK,CAAED,IAAGC,MAIlBsC,IAzBU,SACvBL,EACAC,EACAJ,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAMtC,EAAI2B,EAAkBO,EAASH,EAAOC,GACtC/B,EAAI2B,EAAkBO,EAASJ,EAAOC,GAC5C,OAAOM,EAAU,CAACtC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-08-28-js-cf6bcee91e5c348a47ca.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst GRID = 30;\n\nconst sketch = function(p) {\n  const HUE = p.random(0.9);\n  let wx;\n  let wy;\n\n  p.setup = function() {\n    p.frameRate(30);\n    p.pixelDensity(1);\n    p.createCanvas(660, 840, p.WEBGL);\n    p.colorMode(p.HSB, 1);\n\n    wx = p.floor(p.width / GRID);\n    wy = p.floor(p.height / GRID);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { noise2D, theta } = p.animLoop;\n\n    p.background(HUE, 0.5, 0.5);\n    p.pointLight(0, 0, 1, 0, 0, -p.width * 3);\n\n    for (let x = -wx / 2; x < wx; x++) {\n      for (let y = -wy / 2; y < wy; y++) {\n        p.push();\n        p.specularMaterial(\n          p.map(noise2D(x, y), -1, 1, HUE - 0.1, HUE + 0.1),\n          0.5,\n          0.8\n        );\n        p.translate(\n          x * GRID - GRID / 2,\n          y * GRID - GRID / 2,\n          GRID * 5 * p.sin(p.dist(x, y, p.width / 2, 0) + theta)\n        );\n        p.translate(\n          0,\n          0,\n          GRID * 5 * p.cos(p.dist(x, y, 0, p.height / 2) + theta)\n        );\n        p.rotateX(p.HALF_PI);\n        p.rotateY(theta);\n        p.rotateZ(-theta);\n        p.box(GRID, GRID, GRID);\n        p.pop();\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}