{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/02/07.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","shapes","Shape","colorFunctions","max","abs","PI","this","_cf","random","points","Array","fill","map","_","Point","_clr","color","frameCount","draw","beginShape","vertex","location","forEach","i","quadraticVertex","width","height","move","endShape","CLOSE","_angle","TWO_PI","_dist","_speed","_getLocation","setup","createCanvas","noStroke","blendMode","HARD_LIGHT","background","shape","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-02-07-js-59a206eaaba1ea918e51.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let shapes = [];\n\n  class Shape {\n    constructor() {\n      const colorFunctions = [\n        angle => p.max(15, p.abs(p.sin(angle)) * 240),\n        angle => p.max(15, p.abs(p.sin(angle + p.PI)) * 240),\n        angle => p.max(15, p.abs(p.cos(-angle)) * 240),\n        angle => p.max(15, p.abs(p.cos(-angle + p.PI)) * 240),\n      ];\n      this._cf = [\n        p.random(colorFunctions),\n        p.random(colorFunctions),\n        p.random(colorFunctions),\n      ];\n      this.points = new Array(7).fill().map(_ => new Point());\n    }\n    _clr() {\n      return p.color(\n        this._cf[0](p.frameCount / 1000),\n        this._cf[1](p.frameCount / 1000),\n        this._cf[2](p.frameCount / 1000)\n      );\n    }\n    draw() {\n      p.fill(this._clr());\n      p.beginShape();\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      this.points.forEach(({ location }, i) => {\n        if (i === 0) return;\n        p.quadraticVertex(p.width / 2, p.height / 2, location.x, location.y);\n        this.points[i].move();\n      });\n      p.quadraticVertex(\n        p.width / 2,\n        p.height / 2,\n        this.points[0].location.x,\n        this.points[0].location.y\n      );\n      p.endShape(p.CLOSE);\n    }\n  }\n\n  class Point {\n    constructor() {\n      this._angle = p.random(p.TWO_PI);\n      this._dist = p.random(p.height / 3, p.height / 2);\n      this._speed = p.random(-0.01, 0.01);\n      this.location = this._getLocation();\n    }\n\n    _getLocation() {\n      return polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        this._angle,\n        this._dist\n      );\n    }\n\n    move() {\n      this._angle += this._speed;\n      this.location = this._getLocation();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    shapes = new Array(5).fill().map(_ => new Shape());\n    p.noStroke();\n    p.blendMode(p.HARD_LIGHT);\n  };\n\n  p.draw = function() {\n    p.background(0);\n    shapes.forEach((shape, i) => shape.draw());\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n"],"sourceRoot":""}