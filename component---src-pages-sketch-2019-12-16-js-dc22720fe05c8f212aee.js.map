{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js","webpack:///./src/pages/sketch/2019/12/16.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","p","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","max","dist","l","random","point","lerp","sketch","w","h","HUE","HUE_COUNT","floor","HUE_LINES","GRID","SIZES","MARGIN","grid","Doodad","size","this","hue","colors","Array","fill","map","_","i","color","square","push","translate","rotate","PI","noStroke","lerpColor","blendMode","SCREEN","stroke","lerpLine","noise","frameCount","pop","setup","createCanvas","background","colorMode","HSL","width","height","xx","yy","visited","draw","concat","filter","length","overlap","s","line","HARD_LIGHT","circle","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-12-16-js-dc22720fe05c8f212aee.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport lerpLine from \"~lib/lerpLine\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const HUE = p.random();\n  const HUE_COUNT = p.floor(p.random(3, 7));\n  const HUE_LINES = p.floor(p.random(HUE_COUNT));\n\n  const GRID = 15;\n  const SIZES = [1, 2, 3, 7];\n  const MARGIN = GRID * 3.5;\n\n  let grid = [];\n  let w;\n  let h;\n  let y = MARGIN;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID;\n      this.y = y * GRID;\n      this.size = size * GRID;\n\n      const hue = HUE * p.floor(p.random(HUE_COUNT));\n      this.colors = Array(2)\n        .fill()\n        .map((_, i) =>\n          p.color(\n            p.random() < 0.3 ? HUE * p.floor(p.random(HUE_COUNT)) : hue,\n            HUE_COUNT,\n            (HUE_COUNT / 2) * i\n          )\n        );\n\n      this.square();\n    }\n    square() {\n      p.push();\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.PI]));\n      p.translate(-this.size / 2, -this.size / 2);\n\n      p.noStroke();\n      p.fill(p.lerpColor(this.colors[0], this.colors[1], 0.5));\n      p.square(0, 0, this.size);\n\n      p.blendMode(p.SCREEN);\n      for (let y = 0; y <= this.size; y++) {\n        p.stroke(p.lerpColor(this.colors[0], this.colors[1], y / this.size));\n        lerpLine(\n          p,\n          0,\n          y,\n          this.size,\n          y,\n          p.noise(p.frameCount / 100, y) / this.size\n        );\n      }\n\n      p.pop();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSL, HUE_COUNT);\n\n    w = p.floor(p.width / GRID);\n    h = p.floor(p.height / GRID);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    if ([].concat(...grid).filter(({ visited }) => !visited).length) {\n      const { x, y } = p.random(\n        [].concat(...grid).filter(({ visited }) => !visited)\n      );\n\n      if (!grid[x][y].visited) {\n        let size = Math.max(...SIZES);\n        let overlap;\n\n        do {\n          overlap = false;\n          for (let xx = x; xx < size + x; xx++) {\n            for (let yy = y; yy < size + y; yy++) {\n              if (x + size > w || y + size > h || grid[xx][yy].visited) {\n                overlap = true;\n              }\n            }\n          }\n          if (overlap) {\n            size = Math.max(...SIZES.filter(s => s < size));\n          }\n        } while (overlap);\n\n        new Doodad(x, y, size);\n\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            grid[xx][yy].visited = true;\n          }\n        }\n      }\n    } else {\n      p.stroke(\n        HUE_LINES,\n        HUE_COUNT,\n        p.noise(0.03, y / 100) * HUE_COUNT,\n        HUE_COUNT / 2\n      );\n      p.line(MARGIN, y, p.width - MARGIN, y);\n      y++;\n\n      if (y > p.height - MARGIN) {\n        p.noStroke();\n        p.blendMode(p.HARD_LIGHT);\n\n        for (let i = HUE_COUNT; i > 0; i--) {\n          p.fill(i, HUE_COUNT, HUE_COUNT - 1, HUE_COUNT * 0.666);\n          p.circle(\n            p.random(p.width),\n            p.random(p.height),\n            (p.width / HUE_COUNT) * i\n          );\n        }\n        p.noLoop();\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}