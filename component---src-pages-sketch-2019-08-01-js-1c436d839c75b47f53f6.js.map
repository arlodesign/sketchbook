{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/01.js"],"names":["RENDER","process","DEV","sketch","p","SIZES","GRID_SIZE","grid","boxes","Box","x","y","size","this","rotate","random","TWO_PI","HALF_PI","direction","canvasSize","canvas","createGraphics","strokeCap","PROJECT","strokeWeight","prototype","draw","noise","map","animLoop","noise2D","offset","cos","theta","blendMode","BLEND","background","MULTIPLY","push","translate","forEach","c","i","stroke","line","pop","image","setup","pixelDensity","frameRate","createCanvas","w","floor","width","h","height","createLoop","gif","render","open","noiseRadius","visited","_ref","concat","apply","filter","_ref2","length","_ref3","_p$random","_ref4","Math","max","overlap","xx","yy","s","b","__webpack_exports__","_ref5","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-08-01-js-1c436d839c75b47f53f6.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const SIZES = [1, 2, 3, 5, 8];\n  const GRID_SIZE = 60;\n\n  let grid = [];\n  let boxes = [];\n\n  class Box {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size;\n      this.rotate = p.random([p.TWO_PI, p.HALF_PI]);\n      this.direction = p.random([-1, 1]);\n      this.canvasSize = GRID_SIZE * size;\n      this.canvas = p.createGraphics(this.canvasSize, this.canvasSize);\n      this.canvas.strokeCap(p.PROJECT);\n      this.canvas.strokeWeight(2);\n    }\n\n    draw() {\n      const { x, y, size, rotate, direction, canvas, canvasSize } = this;\n      const noise = p.map(p.animLoop.noise2D(x, y), -1, 1, 0, 1);\n      const offset = p.map(p.cos(p.animLoop.theta), -1, 1, 0, p.TWO_PI * noise);\n\n      canvas.blendMode(p.BLEND);\n      canvas.background(255);\n      canvas.blendMode(p.MULTIPLY);\n      canvas.push();\n      canvas.translate(canvasSize / 2, canvasSize / 2);\n\n      [\"cyan\", \"magenta\", \"yellow\"].forEach((c, i) => {\n        canvas.push();\n        canvas.rotate(rotate * direction + offset * ((p.TWO_PI / 3) * (i + 1)));\n        canvas.stroke(c);\n        for (let i = 0; i <= canvasSize; i += canvasSize / size) {\n          canvas.line(0, 0, i, -canvasSize);\n          canvas.line(0, 0, i, canvasSize);\n          canvas.line(0, 0, -i, -canvasSize);\n          canvas.line(0, 0, -i, canvasSize);\n        }\n        canvas.pop();\n      });\n      canvas.pop();\n\n      p.image(canvas, x, y);\n    }\n  }\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    const w = p.floor(p.width / GRID_SIZE);\n    const h = p.floor(p.height / GRID_SIZE);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n\n    for (let x = 0; x < p.width / GRID_SIZE; x++) {\n      grid.push([]);\n      for (let y = 0; y < p.height / GRID_SIZE; y++) {\n        grid[x].push({\n          x,\n          y,\n          visited: false,\n        });\n      }\n    }\n\n    while ([].concat(...grid).filter(({ visited }) => !visited).length) {\n      const { x, y } = p.random(\n        [].concat(...grid).filter(({ visited }) => !visited)\n      );\n\n      if (!grid[x][y].visited) {\n        let size = Math.max(...SIZES);\n        let overlap;\n\n        do {\n          overlap = false;\n          for (let xx = x; xx < size + x; xx++) {\n            for (let yy = y; yy < size + y; yy++) {\n              if (x + size > w || y + size > h || grid[xx][yy].visited) {\n                overlap = true;\n              }\n            }\n          }\n          if (overlap) {\n            size = Math.max(...SIZES.filter(s => s < size));\n          }\n        } while (overlap);\n\n        boxes.push(new Box(x, y, size));\n\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            grid[xx][yy].visited = true;\n          }\n        }\n      }\n    }\n  };\n\n  p.draw = function() {\n    p.background(255);\n\n    boxes.forEach(b => b.draw());\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}