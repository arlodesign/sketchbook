{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/08/09.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","HUE","random","shapes","Shape","blur","this","size","width","canvas","createGraphics","height","hue","strokeWeight","background","draw","animLoop","noise1D","noise2D","theta","push","colorMode","HSB","translate","stroke","map","SHAPE_COUNT","line","pop","DURATION","frameCount","filter","BLUR","image","setup","frameRate","pixelDensity","createCanvas","Array","from","length","_","i","randomGaussian","createLoop","gif","render","open","noiseRadius","blendMode","BLEND","HARD_LIGHT","forEach","s","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-08-09-js-c1ea3cb0c3cf6415c29c.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && true;\nconst DURATION = 60;\nconst SHAPE_COUNT = 30;\nconst COLOR_RANGE = 30;\n\nconst sketch = function(p) {\n  const HUE = p.random(100 - COLOR_RANGE);\n  let shapes = [];\n\n  class Shape {\n    constructor(x, y, blur) {\n      this.x = x;\n      this.y = y;\n      this.size = p.random(p.width / 2);\n      this.blur = blur;\n      this.canvas = p.createGraphics(p.width, p.height);\n      this.hue = p.random(HUE, HUE + COLOR_RANGE);\n      this.strokeWeight = p.random(3);\n\n      this.canvas.background(128);\n    }\n    draw() {\n      const { x, y, size, blur, canvas, hue, strokeWeight } = this;\n      const { noise1D, noise2D, theta } = p.animLoop;\n\n      canvas.push();\n      canvas.colorMode(p.HSB, 100);\n      canvas.translate(x, y);\n      canvas.translate(\n        (p.width / 10) * noise1D(p.cos(theta)),\n        (p.width / 10) * noise1D(p.cos(theta))\n      );\n      canvas.stroke(hue, 70, p.map(blur, 0, SHAPE_COUNT / 2, 50, 100), 1);\n      canvas.strokeWeight(strokeWeight);\n\n      canvas.line(\n        0,\n        0,\n        ...polarToCartesian(\n          0,\n          0,\n          theta,\n          (p.width / 2) * p.map(noise2D(size, p.sin(theta)), -1, 1, 0.5, 1.5),\n          true\n        )\n      );\n      canvas.pop();\n      p.frameCount === DURATION * 30 && canvas.filter(p.BLUR, blur);\n      p.image(canvas, 0, 0);\n    }\n  }\n\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    shapes = Array.from(\n      { length: SHAPE_COUNT },\n      (_, i) =>\n        new Shape(\n          p.randomGaussian(p.width / 2, p.width / 20),\n          p.randomGaussian(p.height / 2, p.height / 20),\n          ((i - SHAPE_COUNT) * (i - SHAPE_COUNT)) / (SHAPE_COUNT * 2)\n        )\n    );\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(HUE, 10, 90);\n    p.blendMode(p.HARD_LIGHT);\n\n    shapes.forEach(s => s.draw());\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}