{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/07.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","verticesArray","Vertex","this","random","TWO_PI","height","speed","set","vertex","width","update","setup","createCanvas","Array","from","colorMode","HSB","strokeJoin","ROUND","strokeWeight","noFill","draw","blendMode","BLEND","background","ADD","forEach","vertices","i","reached","unreached","push","splice","length","record","dist","ui","j","a","b","d","stroke","beginShape","sort","v","endShape","CLOSE","SketchPage"],"mappings":"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","file":"component---src-pages-sketch-2019-06-07-js-f7c4b45dc7c0902d6d39.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let verticesArray = [];\n\n  class Vertex {\n    constructor() {\n      this.angle = p.random(p.TWO_PI);\n      this.distance = p.random(p.height / 2 - 10);\n      this.speed = p.random([-1, 1]) * p.random(0.001, 0.01);\n      this.set();\n    }\n    set() {\n      this.vertex = polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        this.angle,\n        this.distance\n      );\n    }\n    update() {\n      this.angle += this.speed;\n      if (this.angle < 0) {\n        this.angle = p.TWO_PI + this.angle;\n      }\n      if (this.angle > p.TWO_PI) {\n        this.angle = this.angle - p.TWO_PI;\n      }\n      this.set();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    verticesArray = Array.from(Array(10), () =>\n      Array.from(Array(5), () => new Vertex())\n    );\n    p.colorMode(p.HSB, 100);\n    p.strokeJoin(p.ROUND);\n    p.strokeWeight(20);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(10);\n    p.blendMode(p.ADD);\n\n    verticesArray.forEach((vertices, i) => {\n      let reached = [];\n      let unreached = [...vertices];\n\n      reached.push(unreached[0]);\n      unreached.splice(0, 1);\n\n      while (unreached.length > 0) {\n        let record = p.dist(0, 0, p.width, p.height);\n        let ui;\n        for (let i = 0; i < reached.length; i++) {\n          for (let j = 0; j < unreached.length; j++) {\n            const a = reached[i].vertex;\n            const b = unreached[j].vertex;\n            const d = p.dist(a.x, a.y, b.x, b.y);\n            if (d < record) {\n              record = d;\n              ui = j;\n            }\n          }\n        }\n\n        reached.push(unreached[ui]);\n        unreached.splice(ui, 1);\n      }\n\n      p.stroke(i * (100 / verticesArray.length), 100, 100);\n      p.beginShape();\n      vertices\n        .sort((a, b) => a.angle - b.angle)\n        .forEach(v => {\n          p.vertex(v.vertex.x, v.vertex.y);\n          v.update();\n        });\n      p.endShape(p.CLOSE);\n    });\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}