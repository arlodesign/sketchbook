{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/31.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js"],"names":["sketch","p","MULTIPLIERS","floor","random","HUE","setup","frameRate","createCanvas","colorMode","HSL","background","createLoop","noiseRadius","rectMode","CENTER","noStroke","fill","square","width","height","blendMode","SOFT_LIGHT","draw","animLoop","theta","noise","noise1D","progress","polarToCartesian","x","y","translate","stroke","easeInOutQuart","abs","line","constrain","frameCount","console","info","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"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","file":"component---src-pages-sketch-2020-01-31-js-89105f74bed12d4f0abc.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport { easeInOutQuart } from \"~lib/easing\";\n\nconst sketch = function(p) {\n  const DURATION = 240;\n  const RATE = 60;\n  const MULTIPLIERS = [p.floor(p.random(1, 3)), p.floor(p.random(3, 7))];\n  const HUE = p.random(0.1, 0.9);\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 1);\n    p.background(1 - HUE, 1, 0.1);\n    p.createLoop(DURATION, {\n      noiseRadius: 0.8,\n    });\n    p.rectMode(p.CENTER);\n    p.noStroke();\n    p.fill(1 - HUE, 0.5, 0.9);\n    p.square(p.width / 2, p.height / 2, (p.width / 3) * 2);\n    p.fill(1 - HUE, 1, 0.9);\n    p.square(p.width / 2, p.height / 2, (p.width / 5) * 2);\n    p.blendMode(p.SOFT_LIGHT);\n  };\n\n  p.draw = function() {\n    const { theta, noise, noise1D, progress } = p.animLoop;\n    const { x, y } = polarToCartesian(\n      0,\n      0,\n      theta * MULTIPLIERS[0],\n      p.height * noise()\n    );\n\n    p.translate(p.width / 2, p.height / 2);\n    p.stroke(\n      HUE + noise(10) / 10,\n      easeInOutQuart(p.abs(noise1D(MULTIPLIERS[0] / 10))),\n      easeInOutQuart(p.abs(noise1D(MULTIPLIERS[1] / 10))),\n      (-(2 * progress * progress) + 2 * progress) / 2\n    );\n    p.line(\n      p.constrain(x, -p.width / 5, p.width / 5),\n      p.constrain(y, -p.width / 5, p.width / 5),\n      ...polarToCartesian(0, 0, theta * MULTIPLIERS[1], p.width / 3, true)\n    );\n\n    p.frameCount % 100 === 0 &&\n      console.info(`${p.frameCount} / ${DURATION * RATE}`);\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n"],"sourceRoot":""}