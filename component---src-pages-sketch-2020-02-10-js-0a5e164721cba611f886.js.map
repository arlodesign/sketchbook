{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/10.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js","webpack:///./src/lib/easing.js"],"names":["sketch","p","RENDER","getURLParams","render","HUE","random","M","shuffle","floor","setup","frameRate","noSmooth","createCanvas","colorMode","HSB","background","noStroke","blendMode","OVERLAY","createLoop","gif","open","noiseRadius","draw","animLoop","progress","theta","noise","noise1D","noise2D","stroke","easeOutQuad","abs","bezierPoints","push","height","width","polarToCartesian","x","bezierPoint","map","cp","y","a","center","SIZE","ease","lerpLine","polarToCartesianEllipse","TWO_PI","frameCount","console","info","DURATION","noLoop","location","path","pathname","description","polarToCartesianX","angle","distance","Math","cos","polarToCartesianY","sin","centerX","centerY","radiusX","radiusY","asArray","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","max","dist","l","point","lerp","linear","t","easeInQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"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","file":"component---src-pages-sketch-2020-02-10-js-0a5e164721cba611f886.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian, {\n  polarToCartesianEllipse,\n} from \"~lib/polarToCartesian\";\nimport { easeInQuart as ease, easeOutQuad } from \"~lib/easing\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 360;\n  const RATE = 60;\n  const SIZE = 50;\n  const HUE = p.random(p.random(0.7), p.random(0.3, 1));\n  const M = p.shuffle([p.floor(p.random(20, 50)), p.floor(p.random(50, 90))]);\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.noSmooth();\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n    p.background(HUE + 0.5 > 1 ? HUE - 0.5 : HUE + 0.5, 0.5, 0.1);\n    p.noStroke();\n    p.blendMode(p.OVERLAY);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.2,\n    });\n  };\n\n  p.draw = function() {\n    const { progress, theta, noise, noise1D, noise2D } = p.animLoop;\n\n    p.stroke(HUE + noise1D(HUE) * 0.3, easeOutQuad(p.abs(noise())), 1, 0.1);\n\n    let bezierPoints = [];\n    bezierPoints.push([0, (p.height - p.width) / 2]);\n    bezierPoints.push(\n      polarToCartesian(0, (p.height - p.width) / 2, theta * M[0], p.width, true)\n    );\n    bezierPoints.push(\n      polarToCartesian(\n        p.width,\n        (p.height - p.width) / 2 + p.width,\n        -theta * M[1],\n        p.width,\n        true\n      )\n    );\n    bezierPoints.push([p.width, (p.height - p.width) / 2 + p.width]);\n\n    const x = p.bezierPoint(...bezierPoints.map(cp => cp[0]), progress);\n    const y = p.bezierPoint(...bezierPoints.map(cp => cp[1]), progress);\n\n    for (let a = 0; a < 1; a += 0.005) {\n      const center = polarToCartesian(\n        x,\n        y,\n        theta * DURATION,\n        SIZE * 10 * ease(p.abs(noise2D(x, y, { noiseRadius: 10 }))),\n        true\n      );\n\n      lerpLine(\n        p,\n        ...center,\n        ...polarToCartesianEllipse(\n          ...center,\n          p.TWO_PI * a,\n          (SIZE * (noise1D(x) + 1)) / 2,\n          (SIZE * (noise1D(y) + 1)) / 2,\n          true\n        ),\n        p.random(0.05, 0.1),\n        false\n      );\n    }\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (!RENDER && p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n"],"sourceRoot":""}