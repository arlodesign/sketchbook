{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/08.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","img","axis","POINTS_PER_SHAPE","shapes","Shape","colorFunctions","angle","abs","sin","cos","tan","PI","this","cf","Array","from","Set","_cf","length","random","points","fill","map","_","Point","_proto","prototype","_clr","color","frameCount","draw","_this","blendMode","DIFFERENCE","ADD","noStroke","beginShape","vertex","location","x","y","forEach","_ref","i","move","endShape","CLOSE","_angle","TWO_PI","_dist","_speed","_getLocation","_proto2","polarToCartesian","preload","loadImage","withPrefix","setup","createCanvas","background","createVector","width","concat","keys","setTimeout","noLoop","shape","DARKEST","image","height","__webpack_exports__","_ref2","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_7__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_9__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-02-08-js-312c5b1ea3105a557c8a.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { withPrefix } from \"gatsby\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SHAPES_COUNT = 3;\n  const POINTS_PER_SHAPE = 4;\n  let img;\n  let axis;\n  let shapes = [];\n\n  class Shape {\n    constructor() {\n      const colorFunctions = [\n        angle => p.abs(p.sin(angle)) * 240,\n        angle => p.abs(p.cos(angle)) * 240,\n        angle => p.abs(p.tan(angle)) * 240,\n        angle => p.abs(p.sin(angle + p.PI)) * 240,\n        angle => p.abs(p.cos(angle + p.PI)) * 240,\n        angle => p.abs(p.tan(angle + p.PI)) * 240,\n        angle => p.abs(p.sin(-angle)) * 240,\n        angle => p.abs(p.cos(-angle)) * 240,\n        angle => p.abs(p.tan(-angle)) * 240,\n        angle => p.abs(p.sin(-angle + p.PI)) * 240,\n        angle => p.abs(p.cos(-angle + p.PI)) * 240,\n        angle => p.abs(p.tan(-angle + p.PI)) * 240,\n      ];\n      this.cf = [];\n      while (Array.from(new Set(this._cf)).length < 3) {\n        this._cf = [\n          p.random(colorFunctions),\n          p.random(colorFunctions),\n          p.random(colorFunctions),\n        ];\n      }\n      this.points = Array(POINTS_PER_SHAPE)\n        .fill()\n        .map(_ => new Point());\n    }\n    _clr() {\n      return p.color(\n        this._cf[0](p.frameCount),\n        this._cf[1](p.frameCount),\n        this._cf[2](p.frameCount)\n      );\n    }\n    draw() {\n      p.blendMode(p.frameCount % 3 ? p.DIFFERENCE : p.ADD);\n      p.noStroke();\n      p.fill(this._clr());\n      p.beginShape();\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      this.points.forEach(({ location }, i) => {\n        if (i === 0) return;\n        p.vertex(location.x, location.y);\n        this.points[i].move();\n      });\n      p.vertex(this.points[0].location.x, this.points[0].location.y);\n      p.endShape(p.CLOSE);\n    }\n  }\n\n  class Point {\n    constructor() {\n      this._angle = p.random(p.TWO_PI);\n      this._dist = p.random(200, 350);\n      this._speed = p.random([-0.05, 0.05]);\n      this.location = this._getLocation();\n    }\n\n    _getLocation() {\n      return polarToCartesian(axis.x, axis.y, this._angle, this._dist);\n    }\n\n    move() {\n      this._angle += this._speed;\n      this.location = this._getLocation();\n    }\n  }\n\n  p.preload = function() {\n    img = p.loadImage(withPrefix(\"/assets/susan.png\"));\n  };\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    axis = p.createVector(p.width / 2, 350);\n    shapes = [...Array(SHAPES_COUNT).keys()].map(_ => new Shape());\n    setTimeout(() => {\n      p.noLoop();\n    }, 20000);\n  };\n\n  p.draw = function() {\n    shapes.forEach((shape, i) => shape.draw());\n    p.blendMode(p.DARKEST);\n    p.image(img, 0, 0, p.width, p.height);\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}