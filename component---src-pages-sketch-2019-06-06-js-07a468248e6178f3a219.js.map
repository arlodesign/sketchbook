{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/06.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","HUE","random","alpha","particles","Particle","this","velocity","createVector","position","move","prev","add","map","noise","frameCount","mult","setup","createCanvas","a","TWO_PI","push","width","height","colorMode","HSB","background","noFill","blendMode","HARD_LIGHT","draw","stroke","beginShape","forEach","particle","curveVertex","endShape","CLOSE","noLoop","SketchPage"],"mappings":"4FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,iiCCVjC,IAAMO,EAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,GAAI,IAErBC,EAAQ,GAERC,EAAY,GAEVC,EAPmB,WAQvB,WAAYhB,EAAGG,GACbc,KAAKjB,EAAIA,EACTiB,KAAKd,EAAIA,EAETc,KAAKC,SAAWP,EAAEQ,aAAaR,EAAEE,QAAQ,EAAG,GAAIF,EAAEE,QAAQ,EAAG,IAC7DI,KAAKG,SAAWT,EAAEQ,aAAaF,KAAKjB,EAAGiB,KAAKd,GAbvB,mBAgBvBkB,KAAA,WACEJ,KAAKK,KAAO,CAAEtB,EAAGiB,KAAKG,SAASpB,EAAGG,EAAGc,KAAKG,SAASjB,GACnDc,KAAKC,SAASK,IACZZ,EAAEQ,aACAR,EAAEa,IACAb,EAAEc,MACAR,KAAKG,SAASpB,EAAI,IAClBiB,KAAKG,SAASjB,EAAI,IAClBQ,EAAEe,WAAa,KAEjB,EACA,GACC,GACD,IAEFf,EAAEa,IACAb,EAAEc,MACAR,KAAKG,SAASpB,EAAI,IAClBiB,KAAKG,SAASjB,EAAI,IAClBQ,EAAEe,WAAa,KAEjB,EACA,GACC,GACD,MAINT,KAAKC,SAASS,KAxCD,SAyCbV,KAAKG,SAASG,IAAIN,KAAKC,WA7CF,KAiDzBP,EAAEiB,MAAQ,WACRjB,EAAEkB,aAAa,IAAK,KACpB,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAEoB,OAAQD,GAAKnB,EAAEoB,OAAS,GAC5ChB,EAAUiB,KAAV,EACMhB,EADN,EAEOX,YAAiBM,EAAEsB,MAAkB,KAAXtB,EAAEuB,OAAgBJ,EAAG,KAAK,MAI7DnB,EAAEwB,UAAUxB,EAAEyB,IAAK,KAEnBzB,EAAE0B,WAAWzB,EAAK,GAAI,IACtBD,EAAE2B,SACF3B,EAAE4B,UAAU5B,EAAE6B,aAGhB7B,EAAE8B,KAAO,WACP9B,EAAE+B,OACA/B,EAAEa,IAAIb,EAAET,IAAIS,EAAEe,WAAa,KAAM,EAAG,EAAGd,EAAM,GAAIA,EAAM,IACvD,GACAD,EAAEa,IAAIb,EAAEP,IAAIO,EAAEe,WAAa,MAAO,EAAG,EAAG,GAAI,KAC5CZ,GAGFH,EAAEgC,aACF5B,EAAU6B,SAAQ,SAAAC,GAChBA,EAASxB,OACTV,EAAEmC,YAAYD,EAASzB,SAASpB,EAAG6C,EAASzB,SAASjB,MAEvDQ,EAAEoC,SAASpC,EAAEqC,QAEblC,GAAS,MAEA,GAAKH,EAAEsC,WAWLC,UAPI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQxC,OAAQA,IAChB","file":"component---src-pages-sketch-2019-06-06-js-07a468248e6178f3a219.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const HUE = p.random(20, 80);\n\n  let alpha = 30;\n  let multiplier = 0.98;\n  let particles = [];\n\n  class Particle {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n\n      this.velocity = p.createVector(p.random(-1, 1), p.random(-1, 1));\n      this.position = p.createVector(this.x, this.y);\n    }\n\n    move() {\n      this.prev = { x: this.position.x, y: this.position.y };\n      this.velocity.add(\n        p.createVector(\n          p.map(\n            p.noise(\n              this.position.x / 300,\n              this.position.y / 200,\n              p.frameCount / 400\n            ),\n            0,\n            1,\n            -0.1,\n            0.1\n          ),\n          p.map(\n            p.noise(\n              this.position.x / 200,\n              this.position.y / 300,\n              p.frameCount / 400\n            ),\n            0,\n            1,\n            -0.1,\n            0.1\n          )\n        )\n      );\n      this.velocity.mult(multiplier, multiplier);\n      this.position.add(this.velocity);\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 50) {\n      particles.push(\n        new Particle(\n          ...polarToCartesian(p.width, p.height * 0.666, a, 100, true)\n        )\n      );\n    }\n    p.colorMode(p.HSB, 100);\n\n    p.background(HUE, 80, 20);\n    p.noFill();\n    p.blendMode(p.HARD_LIGHT);\n  };\n\n  p.draw = function() {\n    p.stroke(\n      p.map(p.cos(p.frameCount / 50), -1, 1, HUE - 20, HUE + 20),\n      80,\n      p.map(p.sin(p.frameCount / 200), -1, 1, 20, 100),\n      alpha\n    );\n\n    p.beginShape();\n    particles.forEach(particle => {\n      particle.move();\n      p.curveVertex(particle.position.x, particle.position.y);\n    });\n    p.endShape(p.CLOSE);\n\n    alpha -= 0.01;\n\n    alpha <= 0 && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n    <p>Reload page for a different variation.</p>\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}