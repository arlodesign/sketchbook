{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/23.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","setup","frameRate","pixelDensity","createCanvas","background","noFill","blendMode","MULTIPLY","createLoop","gif","render","open","draw","_p$animLoop","animLoop","noise1D","noise2D","theta","forEach","c","i","clr","color","setAlpha","stroke","push","translate","apply","polarToCartesian","width","height","TWO_PI","map","cos","rotate","radius","ellipseWidth","length","ellipseHeight","ellipse","pop","DURATION","frameCount","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","sin","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"iJAKMA,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACRD,EAAEE,UAAU,IAERN,GACFI,EAAEG,aAAa,GAGjBH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,WAAW,KACbL,EAAEM,SACFN,EAAEO,UAAUP,EAAEQ,UAEdR,EAAES,WAfW,IAeU,CACrBC,MAAKd,GAAS,CAAEe,QAAQ,EAAOC,MAAM,MAIzCZ,EAAEa,KAAO,WAAW,IAAAC,EACkBd,EAAEe,SAA9BC,EADUF,EACVE,QAASC,EADCH,EACDG,QAASC,EADRJ,EACQI,MAE1B,CAAC,OAAQ,UAAW,UAAUC,QAAQ,SAACC,EAAGC,GACxC,IAAMC,EAAMtB,EAAEuB,MAAMH,GACpBE,EAAIE,SAAS,IACbxB,EAAEyB,OAAOH,GAETtB,EAAE0B,OACF1B,EAAE2B,UAAFC,MAAA5B,EACK6B,YACD7B,EAAE8B,MAAQ,EACV9B,EAAE+B,OAAS,EACXb,EAAQG,GAAKrB,EAAEgC,OAAS,GACxBhC,EAAEiC,IACAjC,EAAEkC,IAAIhB,EAAQG,GAAKrB,EAAEgC,OAAS,KAC7B,EACD,EACAhC,EAAE+B,OAAS,EACX,GACA,IAEF,IAGJ/B,EAAEmC,OACAnC,EAAEiC,IAAIjB,GAASK,EAAI,GAAK,IAAK,CAAEe,OAAQ,MAAS,EAAG,EAAGpC,EAAEgC,OAAQ,IAElE,IAAMK,EAAerC,EAAEiC,IACrBhB,EAAQG,EAAEkB,OAAQjB,EAAI,EAAG,CAAEe,OAAQ,KAClC,EACD,EACApC,EAAE8B,MAAQ,EACV9B,EAAE8B,OAEES,EAAgBvC,EAAEiC,IACtBhB,EAAQI,EAAI,EAAGD,EAAEkB,OAAQ,CAAEF,OAAQ,KAClC,EACD,EACApC,EAAE+B,OAAS,EACX/B,EAAE+B,OAAS,GAEb/B,EAAEwC,QAAQ,EAAG,EAAGH,EAAcE,GAC9BvC,EAAEyC,SAGH7C,GAA2B8C,OAAjB1C,EAAE2C,YAAgC3C,EAAE4C,WAIpCC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcnD,OAAQA,EAAQoD,KAAMJ,EAASK,SAAUC,YAAY,wCC7ErEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK5B,IAAI0B,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAa9BH,EAA0B,SAC9BM,EACAC,EACAL,EACAM,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUF,KAAK5B,IAAI0B,GAASM,EAChCI,EAAIL,EAAUH,KAAKC,IAAIH,GAASO,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBzC,IAzBU,SACvBmC,EACAC,EACAL,EACAC,EACAO,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASJ,EAAOC,GACtCS,EAAIb,EAAkBQ,EAASL,EAAOC,GAC5C,OAAOO,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-08-23-js-d2ad2ef19ff578bddb93.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 120;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.noFill();\n    p.blendMode(p.MULTIPLY);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, noise2D, theta } = p.animLoop;\n\n    [\"cyan\", \"magenta\", \"yellow\"].forEach((c, i) => {\n      const clr = p.color(c);\n      clr.setAlpha(16);\n      p.stroke(clr);\n\n      p.push();\n      p.translate(\n        ...polarToCartesian(\n          p.width / 3,\n          p.height / 2,\n          theta + i * (p.TWO_PI / 3),\n          p.map(\n            p.cos(theta + i * (p.TWO_PI / 3)),\n            -1,\n            1,\n            p.height / 2,\n            0,\n            true\n          ),\n          true\n        )\n      );\n      p.rotate(\n        p.map(noise1D((i + 1) / 100, { radius: 0.1 }), -1, 1, p.TWO_PI, 0)\n      );\n      const ellipseWidth = p.map(\n        noise2D(c.length, i + 1, { radius: 2 }),\n        -1,\n        1,\n        p.width / 2,\n        p.width\n      );\n      const ellipseHeight = p.map(\n        noise2D(i + 1, c.length, { radius: 2 }),\n        -1,\n        1,\n        p.height / 4,\n        p.height / 8\n      );\n      p.ellipse(0, 0, ellipseWidth, ellipseHeight);\n      p.pop();\n    });\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}