{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/26.js","webpack:///./src/lib/polarToCartesian.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_1__","_lib_polarToCartesian__WEBPACK_IMPORTED_MODULE_2__","sketch","p","size","prevPoint","outerAngle","innerAngle","PI","outerSpeed","TWO_PI","innerSpeed","hue","random","setup","createCanvas","colorMode","HSB","background","noFill","strokeWeight","width","draw","stroke","lerpColor","color","map","sin","thisFocalPoint","cos","height","thisPoint","polarToCartesian","apply","concat","noise","frameCount","line","noLoop","_ref","location","a","createElement","path","pathname","description","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAMMQ,EAAS,SAASC,GACtB,IAGIC,EACAC,EACAC,EAAa,EACbC,EAAaJ,EAAEK,GACfC,EAPU,IACC,EAMmBN,EAAEO,OAChCC,EAAa,EAPF,EAOeR,EAAEO,OAC5BE,EAAMT,EAAEU,OAAO,KAEnBV,EAAEW,MAAQ,WACRX,EAAEY,aAAa,IAAK,KACpBZ,EAAEa,UAAUb,EAAEc,IAAK,KACnBd,EAAEe,WAAWN,EAAK,GAAI,IACtBT,EAAEgB,SACFhB,EAAEiB,aAAa,IACfhB,EAAOD,EAAEkB,OAGXlB,EAAEmB,KAAO,WACPnB,EAAEoB,OACApB,EAAEqB,UACArB,EAAEsB,MAAMb,EAAK,EAAG,EAAG,GACnBT,EAAEsB,MAAMb,EAAK,EAAG,IAChBT,EAAEuB,IAAIvB,EAAEwB,IAAIpB,IAAc,EAAG,EAAG,EAAG,KAIvC,IAAMqB,EAAiB,CACrBzB,EAAEkB,MAAQ,EACVlB,EAAEuB,IAAIvB,EAAE0B,IAAIvB,IAAc,EAAG,EAAG,IAAKH,EAAE2B,OAAS,MAG5CC,EAAYC,IAAgBC,WAAhB,EACbL,EADaM,OAAA,CAEhB3B,GACCD,EAAaH,EAAEO,OACZP,EAAEuB,IAAIpB,EAAYH,EAAEO,OAAmB,EAAXP,EAAEO,OAAYN,EAAM,GAChDD,EAAEuB,IAAIpB,EAAY,EAAGH,EAAEO,OAAQ,EAAGN,IACpCD,EAAEgC,MAAM,IAAM,IAAMhC,EAAEiC,WAAF,MACtB,KAEE/B,GACFF,EAAEkC,KAAFJ,MAAA9B,EAAU4B,EAATG,OAAuB7B,IAE1BA,EAAY0B,EAEZxB,GAAcI,GADdL,GAAcG,GAEc,EAAXN,EAAEO,QAAYP,EAAEmC,WAItB1C,EAAA,iBAAA2C,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACb1C,EAAA2C,EAAAC,cAAC1C,EAAA,EAAD,CACEE,OAAQA,EACRyC,KAAMH,EAASI,SACfC,YAAY,mFChEhBnD,EAAAoD,EAAAlD,EAAA,sBAAAmD,IAAArD,EAAAoD,EAAAlD,EAAA,sBAAAoD,IAAAtD,EAAAoD,EAAAlD,EAAA,sBAAAqD,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKxB,IAAIsB,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK1B,IAAIwB,GAASC,GAa9BH,EAA0B,SAC9BK,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUD,KAAKxB,IAAIsB,GAASK,EAChCI,EAAIL,EAAUF,KAAK1B,IAAIwB,GAASM,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB5B,IAzBU,SACvBsB,EACAC,EACAJ,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASH,EAAOC,GACtCQ,EAAIZ,EAAkBO,EAASJ,EAAOC,GAC5C,OAAOM,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-26-js-b7bd6fe6d041c2b4d807.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian, {\n  polarToCartesianEllipse,\n} from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SPEED = 1 / 100;\n  const DETAIL = 3;\n\n  let size;\n  let prevPoint;\n  let outerAngle = 0;\n  let innerAngle = p.PI;\n  let outerSpeed = SPEED / DETAIL / p.TWO_PI;\n  let innerSpeed = 1 / DETAIL / p.TWO_PI;\n  let hue = p.random(100);\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.background(hue, 90, 10);\n    p.noFill();\n    p.strokeWeight(0.5);\n    size = p.width;\n  };\n\n  p.draw = function() {\n    p.stroke(\n      p.lerpColor(\n        p.color(hue, 0, 0, 0),\n        p.color(hue, 5, 95),\n        p.map(p.sin(innerAngle), -1, 1, 0, 1)\n      )\n    );\n\n    const thisFocalPoint = [\n      p.width / 2,\n      p.map(p.cos(outerAngle), -1, 1, 100, p.height - 100),\n    ];\n\n    const thisPoint = polarToCartesian(\n      ...thisFocalPoint,\n      innerAngle,\n      (outerAngle > p.TWO_PI\n        ? p.map(outerAngle, p.TWO_PI, p.TWO_PI * 2, size, 0)\n        : p.map(outerAngle, 0, p.TWO_PI, 0, size)) *\n        p.noise(0.01, 0.02, p.frameCount / (DETAIL * 1000)),\n      true\n    );\n    if (prevPoint) {\n      p.line(...thisPoint, ...prevPoint);\n    }\n    prevPoint = thisPoint;\n    outerAngle += outerSpeed;\n    innerAngle += innerSpeed;\n    if (outerAngle > p.TWO_PI * 2) p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Be patient. This one takes a while to draw.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}