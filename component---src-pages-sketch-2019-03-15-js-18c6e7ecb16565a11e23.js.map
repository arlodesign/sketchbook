{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/15.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","distance","angle","size","axis","strokeColor","setup","createCanvas","background","x","width","y","height","setTimeout","noLoop","draw","noFill","strokeWeight","map","noise","Q","stroke","beginShape","i","TWO_PI","thisAngle","polarToCartesian","vertex","endShape","CLOSE","frameCount","location","path","pathname","polarToCartesianX","center","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"sIAIMA,EAAS,SAASC,GACtB,IAEIC,EAAW,EACXC,EAAQ,EACRC,EAAO,IACPC,EAAO,GACPC,EAAc,IAElBL,EAAEM,MAAQ,WACRN,EAAEO,aAAa,IAAK,KACpBP,EAAEQ,WAAW,GACbJ,EAAO,CACLK,EAAGT,EAAEU,MAAQ,EACbC,EAAGX,EAAEY,OAAS,GAEhBC,YAAW,WACTb,EAAEc,WACD,MAGLd,EAAEe,KAAO,WACPf,EAAEgB,SACFhB,EAAEiB,aACAjB,EAAEkB,IAAIlB,EAAEmB,MAAMjB,EAAQ,EAAGD,EAAW,GAAKE,EAAM,EAAGH,EAAEU,MAvB9C,EAuBwDU,IAEhEpB,EAAEqB,OAAOhB,GACTL,EAAEsB,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAIvB,EAAEwB,OAAQD,GAAKvB,EAAEwB,OA3B7B,EA2ByC,CAC/C,IAAMC,EAAYvB,EAAQqB,EADqB,EAE9BG,YACftB,EAAKK,EACLL,EAAKO,EACLc,EACAzB,EAAEmB,MAAMjB,EAAQ,EAAGD,EAAW,GAAKE,GAJ7BM,EAFuC,EAEvCA,EAAGE,EAFoC,EAEpCA,EAMXX,EAAE2B,OAAOlB,EAAGE,GAEdX,EAAE4B,SAAS5B,EAAE6B,OACb3B,GAAS,IACTD,GAAY,GACZE,GAAQ,GACRC,EAAOsB,YACL1B,EAAEU,MAAQ,EACVV,EAAEY,OAAS,EACXV,EA5CM,EA6CE,EAARD,GAEED,EAAE8B,WAAa,KAAQ,IACzBzB,EAA8B,MAAhBA,EAAsB,EAAI,OAK/B,0BAAG0B,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAchC,OAAQA,EAAQiC,KAAMD,EAASE,a,iCC3D/C,0GAAMC,EAAoB,SAACC,EAAQjC,EAAOD,GACxC,OAAOkC,EAASC,KAAKC,IAAInC,GAASD,GAE9BqC,EAAoB,SAACH,EAAQjC,EAAOD,GACxC,OAAOkC,EAASC,KAAKG,IAAIrC,GAASD,GAa9BuC,EAA0B,SAC9BC,EACAC,EACAxC,EACAyC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMpC,EAAIgC,EAAUL,KAAKC,IAAInC,GAASyC,EAChChC,EAAI+B,EAAUN,KAAKG,IAAIrC,GAAS0C,EACtC,OAAOC,EAAU,CAACpC,EAAGE,GAAK,CAAEF,IAAGE,MAIlBe,IAzBU,SACvBe,EACAC,EACAxC,EACAD,EACA4C,QACG,IADHA,OAAU,GAEV,IAAMpC,EAAIyB,EAAkBO,EAASvC,EAAOD,GACtCU,EAAI2B,EAAkBI,EAASxC,EAAOD,GAC5C,OAAO4C,EAAU,CAACpC,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2019-03-15-js-18c6e7ecb16565a11e23.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const Q = 4;\n\n  let distance = 0;\n  let angle = 0;\n  let size = 100;\n  let axis = {};\n  let strokeColor = 255;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    axis = {\n      x: p.width / 2,\n      y: p.height / 2,\n    };\n    setTimeout(() => {\n      p.noLoop();\n    }, 60000);\n  };\n\n  p.draw = function() {\n    p.noFill();\n    p.strokeWeight(\n      p.map(p.noise(angle / 5, distance / 5) * size, 0, p.width, Q, Q * 2)\n    );\n    p.stroke(strokeColor);\n    p.beginShape();\n    for (let i = 0; i < p.TWO_PI; i += p.TWO_PI / Q) {\n      const thisAngle = angle + i;\n      const { x, y } = polarToCartesian(\n        axis.x,\n        axis.y,\n        thisAngle,\n        p.noise(angle / 5, distance / 5) * size\n      );\n      p.vertex(x, y);\n    }\n    p.endShape(p.CLOSE);\n    angle += 0.01;\n    distance += 0.1;\n    size += 0.5;\n    axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      angle / Q,\n      distance * (Q / 2)\n    );\n    if (p.frameCount % 100 === 0) {\n      strokeColor = strokeColor === 255 ? 0 : 255;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}