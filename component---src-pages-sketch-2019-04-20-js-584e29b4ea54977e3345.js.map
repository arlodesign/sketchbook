{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/20.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","black","t","setup","createCanvas","background","strokeWeight","noFill","draw","translate","width","map","sin","frameCount","HALF_PI","height","stroke","beginShape","i","PI","prevVertex","polarToCartesian","noise","curveVertex","endShape","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"ijBAIA,IAAMA,EAAS,SAASC,GACtB,IAAIC,GAAQ,EACRC,EAAI,EAGRF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,WAAW,KACbL,EAAEM,aAAa,GACfN,EAAEO,UAGJP,EAAEQ,KAAO,WACPR,EAAES,UACAT,EAAEU,MAAQ,EACVV,EAAEW,IACAX,EAAEY,IAAIZ,EAAEa,WAAa,IAAOb,EAAEc,UAC7B,EACD,GACCd,EAAEU,MAAQ,EACXV,EAAEe,OAAS,MAGfd,EAAQD,EAAEa,WAAa,IAAO,GAAKZ,EAAQA,EAC3CD,EAAEgB,OAAOf,EAAQ,EAAI,KACrBD,EAAEiB,aAIF,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAEmB,GAAID,GAAK,IAAM,CACnC,IAAIE,EAAaC,YACf,EACA,EACAH,EACAlB,EAAEW,IAAIX,EAAEsB,MAAMJ,EAAGhB,GAAI,EAAG,EAAGF,EAAEU,MAAQ,EAAGV,EAAEU,QAC1C,GAEFV,EAAEuB,YAAF,MAAAvB,EAAC,EAAgBoB,IAEnBpB,EAAEwB,WACFtB,GAAK,KACLF,EAAEa,WAAa,IAAOb,EAAEmB,IAAMnB,EAAEyB,WAIrB,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACE3B,OAAQA,EACR4B,KAAMD,EAASE,SACfC,YAAY,sD,kCCrDhB,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKtB,IAAIoB,GAASC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUJ,KAAKC,IAAIH,GAASQ,EAChCI,EAAIL,EAAUL,KAAKtB,IAAIoB,GAASS,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBvB,IAzBU,SACvBiB,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASN,EAAOC,GACtCW,EAAIR,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-04-20-js-584e29b4ea54977e3345.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let black = false;\n  let t = 0;\n  let prevVertex;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.strokeWeight(2);\n    p.noFill();\n  };\n\n  p.draw = function() {\n    p.translate(\n      p.width / 2,\n      p.map(\n        p.sin(p.frameCount / 1000 + p.HALF_PI),\n        -1,\n        1,\n        -p.width / 2,\n        p.height - 200\n      )\n    );\n    black = p.frameCount % 60 === 0 ? !black : black;\n    p.stroke(black ? 0 : 255);\n    p.beginShape();\n    if (prevVertex) {\n      p.vertex(...prevVertex);\n    }\n    for (let i = 0; i < p.PI; i += 0.01) {\n      let prevVertex = polarToCartesian(\n        0,\n        0,\n        i,\n        p.map(p.noise(i, t), 0, 1, p.width / 2, p.width),\n        true\n      );\n      p.curveVertex(...prevVertex);\n    }\n    p.endShape();\n    t += 0.001;\n    p.frameCount / 1000 > p.PI && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Be patient. This one starts drawing off-canvas.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}