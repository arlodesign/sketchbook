{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/16.js"],"names":["sketch","p","P_SIZE","colors","particles","Particle","this","vector","createVector","randomGaussian","width","height","velocity","random","onCanvas","prototype","draw","_this$vector","x","y","size","map","dist","ellipse","add","noise","frameCount","setup","createCanvas","colorMode","HSB","color","background","Array","from","length","noStroke","fill","lerpColor","apply","concat","sin","forEach","filter","P_COUNT","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_5__","path","pathname","description"],"mappings":"kJAGMA,EAAS,SAASC,GACtB,IACMC,EAAS,GAEXC,EAAS,GACTC,EAAY,GAEVC,EAPmB,WAQvB,SAAAA,IACEC,KAAKC,OAASN,EAAEO,aACdP,EAAEQ,eAAyB,KAAVR,EAAES,MAAeR,GAClCD,EAAEQ,eAA0B,KAAXR,EAAEU,OAAgBT,IAErCI,KAAKM,SAAWX,EAAEO,aAAaP,EAAEY,QAAQ,EAAG,GAAIZ,EAAEY,QAAQ,EAAG,IAC7DP,KAAKQ,UAAW,EAdK,OAAAT,EAAAU,UAgBvBC,KAAA,WAAO,IAAAC,EACYX,KAAKC,OAAdW,EADHD,EACGC,EAAGC,EADNF,EACME,EACLC,EAAOnB,EAAEoB,IACbpB,EAAEqB,KAAKJ,EAAGC,EAAa,KAAVlB,EAAES,MAA0B,KAAXT,EAAEU,QAChC,EACAV,EAAEqB,KAAK,EAAG,EAAa,KAAVrB,EAAES,MAA0B,KAAXT,EAAEU,QAChC,EACAT,GAGEI,KAAKQ,WACPb,EAAEsB,QAAQL,EAAGC,EAAGC,GAChBd,KAAKC,OAAOiB,IAAIlB,KAAKM,UACrBN,KAAKM,SAASY,IACZvB,EAAEoB,IAAIpB,EAAEwB,MAAMxB,EAAEyB,WAAa,IAAKR,EAAI,GAAIC,EAAI,IAAK,EAAG,GAAI,IAAM,KAChElB,EAAEoB,IAAIpB,EAAEwB,MAAMxB,EAAEyB,WAAa,IAAKP,EAAI,GAAID,EAAI,IAAK,EAAG,GAAI,IAAM,QAIjEA,GAAKhB,GAAUgB,EAAIjB,EAAES,MAAQR,KAC7BiB,GAAKjB,GAAUiB,EAAIlB,EAAEU,OAAST,KAE/BI,KAAKQ,UAAW,IAtCGT,EAAA,GA2CzBJ,EAAE0B,MAAQ,WACR1B,EAAE2B,aAAa,IAAK,KACpB3B,EAAE4B,UAAU5B,EAAE6B,IAAK,KACnB3B,EAAS,CACPF,EAAE8B,MAAM9B,EAAEY,OAAO,EAAG,IAAK,GAAI,IAC7BZ,EAAE8B,MAAM9B,EAAEY,OAAO,GAAI,KAAM,GAAI,KAEjCZ,EAAE+B,WAAW7B,EAAO,IACpBC,EAAY6B,MAAMC,KAAK,CAAEC,OAlDX,KAkD8B,kBAAM,IAAI9B,IACtDJ,EAAEmC,YAGJnC,EAAEe,KAAO,WACPf,EAAEoC,KACApC,EAAEqC,UAAFC,MAAAtC,EAAeE,EAAdqC,OAAA,CAAsBvC,EAAEoB,IAAIpB,EAAEwC,IAAIxC,EAAEyB,WAAa,MAAO,EAAG,EAAG,EAAG,OAEpEtB,EAAUsC,QAAQ,SAAAzC,GAAC,OAAIA,EAAEe,SACrBZ,EAAUuC,OAAO,SAAA1C,GAAC,OAAKA,EAAEa,WAAUqB,OAASS,KAC9C3C,EAAE4C,WAKOC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CACEnD,OAAQA,EACRoD,KAAMJ,EAASK,SACfC,YAAY","file":"component---src-pages-sketch-2019-03-16-js-4437606ee6a86385cdeb.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const P_COUNT = 500;\n  const P_SIZE = 30;\n\n  let colors = [];\n  let particles = [];\n\n  class Particle {\n    constructor() {\n      this.vector = p.createVector(\n        p.randomGaussian(p.width * 0.666, P_SIZE),\n        p.randomGaussian(p.height * 0.666, P_SIZE)\n      );\n      this.velocity = p.createVector(p.random(-1, 1), p.random(-1, 1));\n      this.onCanvas = true;\n    }\n    draw() {\n      const { x, y } = this.vector;\n      const size = p.map(\n        p.dist(x, y, p.width * 0.666, p.height * 0.666),\n        0,\n        p.dist(0, 0, p.width * 0.666, p.height * 0.666),\n        1,\n        P_SIZE\n      );\n\n      if (this.onCanvas) {\n        p.ellipse(x, y, size);\n        this.vector.add(this.velocity);\n        this.velocity.add(\n          p.map(p.noise(p.frameCount / 100, x / 10, y / 10), 0, 1, -0.05, 0.05),\n          p.map(p.noise(p.frameCount / 100, y / 10, x / 10), 0, 1, -0.05, 0.05)\n        );\n      }\n      if (\n        (x < -P_SIZE || x > p.width + P_SIZE) &&\n        (y < -P_SIZE || y > p.height + P_SIZE)\n      ) {\n        this.onCanvas = false;\n      }\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    colors = [\n      p.color(p.random(0, 50), 50, 25),\n      p.color(p.random(50, 100), 50, 75),\n    ];\n    p.background(colors[1]);\n    particles = Array.from({ length: P_COUNT }, () => new Particle());\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    p.fill(\n      p.lerpColor(...colors, p.map(p.sin(p.frameCount / 100), -1, 1, 0, 1))\n    );\n    particles.forEach(p => p.draw());\n    if (particles.filter(p => !p.onCanvas).length > P_COUNT / 2) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Refresh page for a different color variation\"\n  />\n);\n"],"sourceRoot":""}