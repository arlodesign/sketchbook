{"version":3,"sources":["webpack:///./src/shaders/basic.vert","webpack:///./src/pages/sketch/2020/03/01.js","webpack:///./src/shaders/2020/03/01/01.frag"],"names":["sketch","p","theShader","RENDER","getURLParams","render","setup","frameRate","createCanvas","WEBGL","noStroke","createLoop","gif","open","noiseRadius","createShader","vert","draw","animLoop","theta","progress","noise","background","shader","setUniform","width","height","map","rect","location","path","pathname","description"],"mappings":"+FAAe,qO,uGCMTA,EAAS,SAASC,GACtB,IAIIC,EAJEC,EAASF,EAAEG,eAAeC,OAMhCJ,EAAEK,MAAQ,WACRL,EAAEM,UALS,IAMXN,EAAEO,aAAa,IAAK,IAAKP,EAAEQ,OAC3BR,EAAES,WACFT,EAAEU,WATa,GASQ,CACrBC,MAAKT,GAAS,CAAEE,QAAQ,EAAOQ,MAAM,GACrCC,YAAa,KAEfZ,EAAYD,EAAEc,aAAaC,ICrBhB,+bDwBbf,EAAEgB,KAAO,WAAY,IAAD,EACiBhB,EAAEiB,SAAnBC,GADA,EACVC,SADU,EACAD,OAAOE,EADP,EACOA,MACzBpB,EAAEqB,WAAW,KAEbrB,EAAEsB,OAAOrB,GACTA,EAAUsB,WAAW,eAAgB,CAACvB,EAAEwB,MAAOxB,EAAEyB,SACjDxB,EAAUsB,WAAW,UAAWL,GAChCjB,EAAUsB,WAAW,UAAWvB,EAAE0B,IAAIN,KAAU,EAAG,EAAG,EAAG,IACzDpB,EAAE2B,KAAK,EAAG,EAAG3B,EAAEwB,MAAOxB,EAAEyB,UAIb,0BAAGG,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc7B,OAAQA,EAAQ8B,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-03-01-js-4a5fe10d4656741f2fef.js","sourcesContent":["export default \"#ifdef GL_ES\\nprecision mediump float;\\n#endif\\n\\nattribute vec3 aPosition;\\n\\nvoid main() {\\n  vec4 positionVec4 = vec4(aPosition, 1.0);\\n  positionVec4.xy = positionVec4.xy * 2.0 - 1.0;\\n  gl_Position = positionVec4;\\n}\";","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport vert from \"~shaders/basic.vert\";\nimport frag from \"~shaders/2020/03/01/01.frag\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 20;\n  const RATE = 30;\n\n  let theShader;\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.createCanvas(660, 840, p.WEBGL);\n    p.noStroke();\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n    theShader = p.createShader(vert, frag);\n  };\n\n  p.draw = function() {\n    const { progress, theta, noise } = p.animLoop;\n    p.background(255);\n\n    p.shader(theShader);\n    theShader.setUniform(\"u_resolution\", [p.width, p.height]);\n    theShader.setUniform(\"u_theta\", theta);\n    theShader.setUniform(\"u_noise\", p.map(noise(), -1, 1, 0, 1));\n    p.rect(0, 0, p.width, p.height);\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","export default \"#ifdef GL_ES\\nprecision mediump float;\\n#endif\\n\\nuniform vec2 u_resolution;\\nuniform float u_theta;\\nuniform float u_noise;\\n\\nvoid main() {\\n  vec2 st = gl_FragCoord.xy/u_resolution;\\n\\n  st *= 15.0 * u_noise;\\n\\n  float r = abs(sin(u_theta + st.x));\\n  float g = abs(sin(u_theta * 2.0));\\n  float b = abs(sin(u_theta + st.y));\\n\\n  vec4 color = vec4(r, g, b, 1.0) * abs(cos(((u_theta * 2.0) + (st.x + st.y)) ));\\n  gl_FragColor = color;\\n}\";"],"sourceRoot":""}