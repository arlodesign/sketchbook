{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/14.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","distance","HUE","random","theta","center","setup","createCanvas","width","height","dist","colorMode","HSB","background","draw","strokeWeight","stroke","map","sin","lerpLine","polarToCartesian","noise","frameCount","TWO_PI","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","polarToCartesianX","polarToCartesianY","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"ykBAMA,IAAMA,EAAS,SAASC,GACtB,IACIC,EADEC,EAAMF,EAAEG,OAAO,IAEjBC,EAAQ,EACRC,EAAS,GAEbL,EAAEM,MAAQ,WACRN,EAAEO,aAAa,IAAK,KACpBF,EAAS,CAACL,EAAEQ,MAAQ,EAAGR,EAAES,OAAS,GAClCR,EAAWD,EAAEU,KAAF,MAAAV,EAAC,EAASK,GAAT,QAAiBL,EAAEQ,MAAOR,EAAES,UACxCT,EAAEW,UAAUX,EAAEY,IAAK,KACnBZ,EAAEa,WAAWX,EAAK,GAAI,KAGxBF,EAAEc,KAAO,WACPd,EAAEe,aAAa,GACff,EAAEgB,OAAOhB,EAAEiB,IAAIjB,EAAEkB,IAAId,IAAS,EAAG,EAAGF,EAAM,GAAIA,GAAM,GAAI,IACxDiB,IAAQ,WAAR,GACEnB,GADF,SAEKK,GAFL,EAGKe,IAAgB,WAAhB,IAAoBf,GAApB,QAA4BD,EAAOH,EAAW,GAAG,MAHtD,CAIED,EAAEqB,MAAMrB,EAAEsB,WAAa,GAAIrB,EAAUG,GAAS,IAC9C,KAEFJ,EAAEgB,OAAOhB,EAAEiB,IAAIjB,EAAEkB,IAAId,IAAS,EAAG,EAAGF,EAAKA,EAAM,IAAK,GAAI,IACxDiB,IAAQ,WAAR,GACEnB,GADF,SAEKK,GAFL,EAGKe,IAAgB,WAAhB,IAAoBf,GAApB,QAA4BD,EAAOH,GAAU,MAHlD,CAIED,EAAEqB,MAAMrB,EAAEsB,WAAa,GAAIrB,EAAUG,GAAS,IAC9C,MAGFA,GAASJ,EAAEuB,OAAS,KACRvB,EAAEuB,QACZvB,EAAEwB,WAWOC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ1B,OAAQA,O,kCChDpB,sCAiBM2B,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKhB,IAAIW,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBhB,IAzBU,SACvBO,EACAC,EACAC,EACA5B,EACA+B,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAAC5B,EAAQwB,EAAO5B,GACxC,OAAOI,EAAS6B,KAAKC,IAAIN,GAAS5B,EAYxBoC,CAAkBV,EAASE,EAAO5B,GACtCmC,EAXkB,SAAC/B,EAAQwB,EAAO5B,GACxC,OAAOI,EAAS6B,KAAKhB,IAAIW,GAAS5B,EAUxBqC,CAAkBV,EAASC,EAAO5B,GAC5C,OAAO+B,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,oCCflB,aAASpC,EAAGuC,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChB5C,EAAEG,SAAW2C,GAAK9C,EAAE+C,MAAM/C,EAAEgD,KAAKT,EAAIE,EAAIK,GAAI9C,EAAEgD,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-05-14-js-984747c1f1d2719aa0d8.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport lerpLine from \"~lib/lerpLine\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const HUE = p.random(50);\n  let distance;\n  let theta = 0;\n  let center = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    center = [p.width / 3, p.height / 3];\n    distance = p.dist(...center, p.width, p.height);\n    p.colorMode(p.HSB, 100);\n    p.background(HUE, 10, 40);\n  };\n\n  p.draw = function() {\n    p.strokeWeight(2);\n    p.stroke(p.map(p.sin(theta), -1, 1, HUE + 50, HUE), 30, 80);\n    lerpLine(\n      p,\n      ...center,\n      ...polarToCartesian(...center, theta, distance / 2, true),\n      p.noise(p.frameCount / 50, distance, theta) / 20,\n      false\n    );\n    p.stroke(p.map(p.sin(theta), -1, 1, HUE, HUE + 50), 50, 80);\n    lerpLine(\n      p,\n      ...center,\n      ...polarToCartesian(...center, theta, distance, true),\n      p.noise(p.frameCount / 10, distance, theta) / 10,\n      false\n    );\n\n    theta += p.TWO_PI / 2000;\n    if (theta > p.TWO_PI) {\n      p.noLoop();\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}