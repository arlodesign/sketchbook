{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2020/02/24.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","sketch","p","RENDER","getURLParams","render","HEX_WIDTH","floor","sqrt","HEX_LINE_GAP","HEX_MASK","createGraphics","HEX_RADIUS","stroke","fill","beginShape","translate","width","height","a","TWO_PI","vertex","endShape","cols","rows","gridWidth","gridHeight","hexagons","circle","prevMod","Hexagon","this","rotate","random","map","i","dir","turning","canvas","noSmooth","draw","turn","theta","animLoop","turnVal","background","push","ease","HEX_HEIGHT","line","pop","img","get","mask","image","Circle","noFill","noise2D","blendMode","MULTIPLY","setup","pixelDensity","frameRate","createCanvas","createLoop","gif","open","noiseRadius","hexX","hexY","forEach","hex","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-02-24-js-7b19850b8e1daf50db81.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport { easeInOutQuint as ease } from \"~lib/easing\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 30;\n  const RATE = 30;\n  const HEX_RADIUS = 45;\n  const HEX_WIDTH = p.floor(p.sqrt(3) * HEX_RADIUS);\n  const HEX_HEIGHT = HEX_RADIUS * 2;\n  const HEX_LINE_GAP = HEX_WIDTH / 15;\n\n  const HEX_MASK = p.createGraphics(HEX_WIDTH, HEX_HEIGHT);\n  HEX_MASK.stroke(0);\n  HEX_MASK.fill(0);\n  HEX_MASK.beginShape();\n  HEX_MASK.translate(HEX_MASK.width / 2, HEX_MASK.height / 2);\n  for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 6) {\n    HEX_MASK.vertex(\n      ...polarToCartesian(0, 0, a + p.TWO_PI / 12, HEX_RADIUS, true)\n    );\n  }\n  HEX_MASK.endShape();\n\n  let hexagons = [];\n  let circle = [];\n  let cols;\n  let rows;\n  let gridWidth;\n  let gridHeight;\n  let prevMod = 0;\n\n  class Hexagon {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n      this.rotate = p.random([0, 1, 2, 3, 4, 5].map(i => (p.TWO_PI / 6) * i));\n      this.dir = p.random([1, -1]);\n      this.turning = false;\n\n      this.canvas = p.createGraphics(p.floor(HEX_WIDTH), p.floor(HEX_HEIGHT));\n      this.canvas.stroke(0);\n      this.canvas.fill(0);\n      this.canvas.noSmooth();\n    }\n\n    draw(turn) {\n      const { theta } = p.animLoop;\n\n      if (turn) {\n        this.rotate += (p.TWO_PI / 6) * this.dir;\n      }\n\n      const turnVal = p.map(theta % (p.TWO_PI / 6), 0, p.TWO_PI / 6, 0, 1);\n\n      this.canvas.background(255);\n      this.canvas.push();\n      this.canvas.translate(this.canvas.width / 2, this.canvas.height / 2);\n\n      this.canvas.rotate(\n        p.map(\n          ease(turnVal),\n          0,\n          1,\n          this.rotate,\n          this.rotate + (p.TWO_PI / 6) * this.dir\n        )\n      );\n\n      for (let x = 0; x < HEX_HEIGHT / 2; x += HEX_LINE_GAP) {\n        this.canvas.line(x, -HEX_HEIGHT / 2, x, HEX_HEIGHT / 2);\n        x > 0 && this.canvas.line(-x, -HEX_HEIGHT / 2, -x, HEX_HEIGHT / 2);\n      }\n      this.canvas.pop();\n\n      const img = this.canvas.get();\n      img.mask(HEX_MASK);\n\n      p.image(img, this.x - HEX_WIDTH / 2, this.y - HEX_HEIGHT / 2);\n    }\n  }\n\n  class Circle {\n    constructor() {\n      this.canvas = p.createGraphics(\n        p.floor(gridWidth - HEX_WIDTH),\n        p.floor(gridWidth - HEX_WIDTH)\n      );\n      this.canvas.noSmooth();\n      this.canvas.stroke(0);\n      this.canvas.noFill();\n\n      this.mask = p.createGraphics(\n        p.floor(gridWidth - HEX_WIDTH),\n        p.floor(gridWidth - HEX_WIDTH)\n      );\n      this.mask.fill(0);\n      this.mask.circle(\n        this.mask.width / 2,\n        this.mask.height / 2,\n        this.mask.width\n      );\n    }\n    draw() {\n      const { noise2D, theta } = p.animLoop;\n      this.canvas.background(255);\n\n      for (let y = 0; y < this.canvas.height; y += HEX_LINE_GAP) {\n        this.canvas.line(0, y, this.canvas.width, y);\n      }\n\n      const img = this.canvas.get();\n      img.mask(this.mask);\n\n      p.push();\n      p.blendMode(p.MULTIPLY);\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(-theta);\n      p.image(img, -this.canvas.width / 2, -this.canvas.height / 2);\n      p.pop();\n    }\n  }\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n\n    cols = p.floor((p.width - HEX_WIDTH / 2) / HEX_WIDTH);\n    rows = p.floor((p.width - HEX_HEIGHT / 4) / (HEX_HEIGHT * 0.75));\n    gridWidth = cols * HEX_WIDTH + HEX_WIDTH / 2;\n    gridHeight = rows * (HEX_HEIGHT * 0.75) + HEX_HEIGHT / 4;\n\n    for (let x = 0; x < cols; x++) {\n      for (let y = 0; y < rows; y++) {\n        const hexX =\n          x * HEX_WIDTH +\n          (y % 2 ? HEX_WIDTH : HEX_WIDTH / 2) +\n          (p.width - gridWidth) / 2;\n        const hexY =\n          y * HEX_HEIGHT * 0.75 + HEX_HEIGHT / 2 + (p.height - gridHeight) / 2;\n        hexagons.push(new Hexagon(hexX, hexY));\n      }\n    }\n\n    circle = new Circle();\n  };\n\n  p.draw = function() {\n    p.background(255);\n    hexagons.forEach(hex =>\n      hex.draw(p.animLoop.theta % (p.TWO_PI / 6) <= prevMod)\n    );\n    prevMod = p.animLoop.theta % (p.TWO_PI / 6);\n    circle.draw();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}