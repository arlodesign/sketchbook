{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/16.js"],"names":["sketch","p","w","h","GRID_SIZE","SIZES","LINES","grid","Doodad","x","y","size","this","lines","arc","prototype","push","strokeCap","PROJECT","translate","rotate","random","HALF_PI","PI","i","pop","setup","createCanvas","colorMode","HSB","hue","background","stroke","strokeWeight","noFill","floor","width","height","xx","yy","visited","draw","_ref","_ref3","_p$random","concat","apply","filter","_ref2","overlap","Math","max","s","_ref4","length","noLoop","__webpack_exports__","_ref5","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-04-16-js-07ac35e361106c944f88.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 15;\n  const SIZES = [1, 2, 3, 5];\n  const LINES = 2;\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size * GRID_SIZE;\n      this.lines = size * LINES;\n\n      this.arc();\n    }\n\n    arc() {\n      p.push();\n      p.strokeCap(p.PROJECT);\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\n      for (let i = 0; i <= this.size * 2; i += (this.size * 2) / this.lines) {\n        p.arc(-this.size / 2, -this.size / 2, i, i, 0, p.HALF_PI);\n      }\n      p.pop();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    p.colorMode(p.HSB, 100);\n\n    const hue = p.random(100);\n    p.background(hue, 25, 25);\n    p.stroke(hue, 75, 100);\n    p.strokeWeight(1);\n    p.noFill();\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}