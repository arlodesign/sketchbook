{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/11.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","COLORS","shuffle","setup","pixelDensity","frameRate","createCanvas","noFill","strokeWeight","strokeJoin","ROUND","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","MULTIPLY","translate","width","height","forEach","c","i","stroke","a","TWO_PI","noiseVal","map","animLoop","noise2D","point","constrain","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,kCCxBjC,qEAKME,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtB,IAAMC,EAASD,EAAEE,QAAQ,CAAC,OAAQ,UAAW,WAE7CF,EAAEG,MAAQ,WACJP,IACFI,EAAEI,aAAa,GACfJ,EAAEK,UAAU,KAGdL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,SACFP,EAAEQ,aAAa,IACfR,EAAES,WAAWT,EAAEU,OAEfV,EAAEW,WAAW,EAAG,CACdC,MAAKhB,GAAS,CAAEiB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBf,EAAEgB,KAAO,WACPhB,EAAEiB,UAAUjB,EAAEkB,OACdlB,EAAEmB,WAAW,KACbnB,EAAEiB,UAAUjB,EAAEoB,UAEdpB,EAAEqB,UAAUrB,EAAEsB,MAAQ,EAAGtB,EAAEuB,OAAS,GAEpCtB,EAAOuB,SAAQ,SAACC,EAAGC,GACjB1B,EAAE2B,OAAOF,GAET,IAAK,IAAIG,EAAI,EAAGA,EAAI5B,EAAE6B,OAAQD,GAAK5B,EAAE6B,OAAS,GAAI,CAChD,IAAMC,EAAW9B,EAAE+B,IAAI/B,EAAEgC,SAASC,QAAQP,EAAG1B,EAAEd,IAAI0C,KAAM,EAAG,EAAG,EAAG,GADlB,EAE/BjC,YAAiB,EAAG,EAAGiC,EAAI5B,EAAEsB,MAAQ,EAAKQ,GAAnDrC,EAFwC,EAExCA,EAAGC,EAFqC,EAErCA,EACXM,EAAEkC,MACAlC,EAAEmC,UAAU1C,GAAIO,EAAEsB,MAAQ,EAAGtB,EAAEsB,MAAQ,GACvCtB,EAAEmC,UAAUzC,GAAIM,EAAEsB,MAAQ,EAAGtB,EAAEsB,MAAQ,UAOlC,0BAAGc,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcrC,OAAQA,EAAQsC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-07-11-js-8fbed5fff9878a2908d5.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const COLORS = p.shuffle([\"cyan\", \"magenta\", \"yellow\"]);\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.noFill();\n    p.strokeWeight(20);\n    p.strokeJoin(p.ROUND);\n\n    p.createLoop(5, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.8,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.MULTIPLY);\n\n    p.translate(p.width / 2, p.height / 2);\n\n    COLORS.forEach((c, i) => {\n      p.stroke(c);\n\n      for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 50) {\n        const noiseVal = p.map(p.animLoop.noise2D(i, p.sin(a)), -1, 1, 0, 1);\n        const { x, y } = polarToCartesian(0, 0, a, (p.width / 2) * noiseVal);\n        p.point(\n          p.constrain(x, -p.width / 3, p.width / 3),\n          p.constrain(y, -p.width / 3, p.width / 3)\n        );\n      }\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}