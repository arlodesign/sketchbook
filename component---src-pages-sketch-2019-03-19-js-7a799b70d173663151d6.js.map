{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/19.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","lastPoint","maxDist","hues","setup","createCanvas","dist","width","height","random","background","colorMode","HSB","blendMode","DIFFERENCE","noStroke","draw","focus","polarToCartesian","frameCount","noise","thisPoint","fill","beginShape","vertex","endShape","CLOSE","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"8IAIMA,EAAS,SAASC,GACtB,IAAIC,EACAC,EACAC,EAAO,GAEXH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBH,EAAUF,EAAEM,MAAM,KAAM,IAAKN,EAAEO,MAAQ,IAAKP,EAAEQ,OAAS,KACvDL,EAAO,CAACH,EAAES,OAAO,GAAI,IAAKT,EAAES,OAAO,GAAI,KACvCT,EAAEU,WAAWP,EAAK,IAClBH,EAAEW,UAAUX,EAAEY,IAAK,KACnBZ,EAAEa,UAAUb,EAAEc,YACdd,EAAEe,YAGJf,EAAEgB,KAAO,WACP,IAAMC,EAAQC,aACX,KACA,IACDlB,EAAEmB,WAAa,IACfnB,EAAEO,MAAQP,EAAEoB,MAAMpB,EAAEmB,WAAa,MACjC,GAEEE,EAAYH,IAAgB,WAAhB,EACXD,EADW,QAEdjB,EAAEmB,WAAa,EACfjB,EAAUF,EAAEoB,MAAMpB,EAAEmB,WAAa,MACjC,KAEFnB,EAAEsB,KAAKtB,EAAEmB,WAAa,EAAIhB,EAAK,GAAKA,EAAK,GAAI,GAAI,IAC7CF,IACFD,EAAEuB,aACFvB,EAAEwB,QAAQ,KAAM,KAChBxB,EAAEwB,OAAF,MAAAxB,EAAYC,GACZD,EAAEwB,OAAF,MAAAxB,EAAYqB,GACZrB,EAAEyB,SAASzB,EAAE0B,QAEfzB,EAAYoB,IACZnB,EACc,GACZF,EAAE2B,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc7B,OAAQA,EAAQ8B,KAAMD,EAASE,SAAUC,YAAY,O,iCClDrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB7B,IAzBU,SACvBuB,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-19-js-7a799b70d173663151d6.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let lastPoint;\n  let maxDist;\n  let hues = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    maxDist = p.dist(-100, -100, p.width + 100, p.height + 100);\n    hues = [p.random(20, 40), p.random(60, 80)];\n    p.background(hues[0]);\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.DIFFERENCE);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    const focus = polarToCartesian(\n      -100,\n      -100,\n      p.frameCount / 100,\n      p.width * p.noise(p.frameCount / 1000),\n      true\n    );\n    let thisPoint = polarToCartesian(\n      ...focus,\n      p.frameCount / 2,\n      maxDist * p.noise(p.frameCount / 100),\n      true\n    );\n    p.fill(p.frameCount % 2 ? hues[0] : hues[1], 50, 75);\n    if (lastPoint) {\n      p.beginShape();\n      p.vertex(-100, -100);\n      p.vertex(...lastPoint);\n      p.vertex(...thisPoint);\n      p.endShape(p.CLOSE);\n    }\n    lastPoint = thisPoint;\n    maxDist--;\n    if (maxDist < 0) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}