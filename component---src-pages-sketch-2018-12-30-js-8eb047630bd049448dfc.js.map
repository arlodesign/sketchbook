{"version":3,"sources":["webpack:///./src/pages/sketch/2018/12/30.js"],"names":["sketch","p","maxSize","minSize","circles","increment","noDrawCount","Circle","distance","this","angle","frameCount","r","constrain","noise","_setXY","_proto","prototype","x","width","cos","y","height","sin","setDistance","increaseDistance","isOnCanvas","draw","ellipse","setup","createCanvas","random","push","fill","stroke","background","noLoop","forEach","c","noStroke","rect","text","pop","newCircle","strokeWeight","line","some","dist","max","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2018-12-30-js-8eb047630bd049448dfc.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  let maxSize;\n  let minSize;\n  let circles = [];\n  let increment = 1;\n  let noDrawCount = 0;\n  let noDrawLimit = 1500;\n\n  class Circle {\n    constructor(distance = 0) {\n      this.distance = distance;\n      this.angle = p.frameCount / increment;\n      this.r = p.constrain(p.noise(this.angle) * maxSize, minSize, maxSize);\n      this._setXY();\n    }\n    _setXY() {\n      this.x = p.width / 2 + p.cos(this.angle) * this.distance;\n      this.y = p.height / 2 + p.sin(this.angle) * this.distance;\n    }\n    setDistance(distance) {\n      this.distance = distance;\n      this._setXY();\n    }\n    increaseDistance() {\n      this.distance += 1;\n      this._setXY();\n    }\n    isOnCanvas() {\n      return (\n        this.x > this.r &&\n        this.x < p.width - this.r &&\n        this.y > this.r &&\n        this.y < p.height - this.r\n      );\n    }\n    draw() {\n      p.ellipse(this.x, this.y, this.r * 2);\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    maxSize = p.random(p.width / 4, p.width / 3);\n    minSize = 5;\n    circles.push(new Circle());\n    p.fill(0);\n    p.stroke(0);\n    circles[0].r = maxSize;\n    circles[0].draw();\n  };\n\n  p.draw = function() {\n    p.background(255);\n    if (maxSize === minSize && noDrawCount === noDrawLimit) {\n      p.noLoop();\n    }\n    circles.forEach(c => c.draw());\n    if (noDrawCount < noDrawLimit) {\n      p.push();\n      p.noStroke();\n      p.fill(255);\n      p.rect(0, 0, 80, 30);\n      p.fill(0);\n      p.text(`${noDrawCount}/${noDrawLimit}`, 10, 20);\n      p.pop();\n    }\n    const newCircle = new Circle();\n    newCircle.setDistance(circles[0].r + newCircle.r);\n    if (noDrawCount < noDrawLimit) {\n      p.push();\n      p.stroke(\"red\");\n      p.strokeWeight(1);\n      p.line(\n        p.width / 2,\n        p.height / 2,\n        p.width / 2 + p.cos(newCircle.angle) * p.height,\n        p.height / 2 + p.sin(newCircle.angle) * p.height\n      );\n      p.pop();\n    }\n    while (\n      circles.some(\n        c => p.dist(newCircle.x, newCircle.y, c.x, c.y) < newCircle.r + c.r\n      )\n    ) {\n      newCircle.increaseDistance();\n    }\n    if (newCircle.isOnCanvas()) {\n      circles.push(newCircle);\n      if (maxSize > minSize) increment += 5;\n      noDrawCount = 0;\n    } else {\n      maxSize = p.max(maxSize - 0.1, minSize);\n      increment = maxSize > minSize ? p.max(1, increment - 1) : increment;\n      noDrawCount++;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Be patient. Reload page for a different variation.\" />\n);\n"],"sourceRoot":""}