{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/12.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","points","setup","pixelDensity","frameRate","createCanvas","colorMode","HSB","noStroke","Array","from","a","random","TWO_PI","d","width","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","HARD_LIGHT","_loop","angle","fill","map","sin","push","translate","height","rotate","animLoop","theta","beginShape","forEach","_ref","curveVertex","apply","polarToCartesian","noise1D","endShape","CLOSE","pop","__webpack_exports__","_ref2","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_5__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"4JAKMA,UAASC,GAAYC,MAAO,GAE5BC,EAAS,SAASC,GACtB,IAEIC,EAAS,GAEbD,EAAEE,MAAQ,WACJN,IACFI,EAAEG,aAAa,GACfH,EAAEI,UAAU,KAGdJ,EAAEK,aAAa,IAAK,KACpBL,EAAEM,UAAUN,EAAEO,IAAK,GAEnBP,EAAEQ,WAEFP,EAASQ,MAAMC,KAAKD,MAAM,GAAI,iBAAO,CACnCE,EAAGX,EAAEY,OAAOZ,EAAEa,QACdC,EAAGd,EAAEY,OAAOZ,EAAEe,MAAQ,EAAa,IAAVf,EAAEe,UAG7Bf,EAAEgB,WAAW,GAAI,CACfC,MAAKrB,GAAS,CAAEsB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,KAIjBpB,EAAEqB,KAAO,WACPrB,EAAEsB,UAAUtB,EAAEuB,OACdvB,EAAEwB,WAAW,IACbxB,EAAEsB,UAAUtB,EAAEyB,YAEd,IALkB,IAAAC,EAAA,SAKTC,GACP3B,EAAE4B,KAAK5B,EAAE6B,IAAI7B,EAAE8B,IAAIH,IAAS,EAAG,EAAG,EAAG,EAhC3B,GAgCiD,EAAG,IAC9D3B,EAAE+B,OACF/B,EAAEgC,UAAUhC,EAAEe,MAAQ,EAAGf,EAAEiC,OAAS,GACpCjC,EAAEkC,OAAOlC,EAAEmC,SAASC,OACpBpC,EAAEqC,aACFpC,EAAOqC,QAAQ,SAAAC,GAAc,IAAX5B,EAAW4B,EAAX5B,EAAGG,EAAQyB,EAARzB,EACnBd,EAAEwC,YAAFC,MAAAzC,EACK0C,YACD,EACA,EACA/B,EAAIgB,EAAQ3B,EAAE6B,IAAI7B,EAAEmC,SAASQ,QAAQhC,IAAK,EAAG,EAAG,EAAG,GACnDG,EAAId,EAAE6B,IAAI7B,EAAEmC,SAASQ,QAAQ7B,IAAK,EAAG,EAAG,IAAM,IAC9C,MAINd,EAAE4C,SAAS5C,EAAE6C,OACb7C,EAAE8C,OAlBKnB,EAAQ,EAAGA,EAAQ3B,EAAEa,OAAQc,GAAS3B,EAAEa,OA/BrC,EA+BqDa,EAAxDC,KAuBEoB,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcrD,OAAQA,EAAQsD,KAAMJ,EAASK,SAAUC,YAAY,wCC/DrEC,EAAA1C,EAAAiC,EAAA,sBAAAU,IAAAD,EAAA1C,EAAAiC,EAAA,sBAAAW,IAAAF,EAAA1C,EAAAiC,EAAA,sBAAAY,IAAA,IAAMF,EAAoB,SAACG,EAAQjC,EAAOkC,GACxC,OAAOD,EAASE,KAAKC,IAAIpC,GAASkC,GAE9BH,EAAoB,SAACE,EAAQjC,EAAOkC,GACxC,OAAOD,EAASE,KAAKhC,IAAIH,GAASkC,GAa9BF,EAA0B,SAC9BK,EACAC,EACAtC,EACAuC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUF,KAAKC,IAAIpC,GAASuC,EAChCI,EAAIL,EAAUH,KAAKhC,IAAIH,GAASwC,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB5B,IAzBU,SACvBsB,EACAC,EACAtC,EACAkC,EACAO,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASrC,EAAOkC,GACtCS,EAAIZ,EAAkBO,EAAStC,EAAOkC,GAC5C,OAAOO,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-07-12-js-81845a7c762611ddc47d.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const STEPS = 6;\n\n  let points = [];\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n\n    p.noStroke();\n\n    points = Array.from(Array(4), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.width / 4, p.width * 0.45),\n    }));\n\n    p.createLoop(20, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0.8);\n    p.blendMode(p.HARD_LIGHT);\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      p.fill(p.map(p.sin(angle), -1, 1, 0, (STEPS - 1) / STEPS), 1, 0.5);\n      p.push();\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(p.animLoop.theta);\n      p.beginShape();\n      points.forEach(({ a, d }) => {\n        p.curveVertex(\n          ...polarToCartesian(\n            0,\n            0,\n            a + angle + p.map(p.animLoop.noise1D(a), -1, 1, 1, 2),\n            d * p.map(p.animLoop.noise1D(d), -1, 1, 0.75, 1),\n            true\n          )\n        );\n      });\n      p.endShape(p.CLOSE);\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}