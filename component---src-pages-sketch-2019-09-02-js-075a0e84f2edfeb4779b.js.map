{"version":3,"sources":["webpack:///./src/pages/sketch/2019/09/02.js","webpack:///./node_modules/amp-is-object/is-object.js","webpack:///./node_modules/coordinate-systems/coordinate-systems.js","webpack:///./node_modules/amp-is-array/is-array.js","webpack:///./node_modules/amp-is-number/is-number.js","webpack:///./node_modules/amp-extend/extend.js","webpack:///./src/lib/easing.js"],"names":["RENDER","process","DEV","sketch","p","HUE","random","setup","frameRate","createCanvas","WEBGL","noStroke","colorMode","HSB","createLoop","gif","render","open","noiseRadius","draw","_p$animLoop","animLoop","noise1D","noise2D","theta","size","width","background","camera","apply","spherical","cart","concat","pointLight","specularMaterial","map","cubeCount","x","ceil","COUNT","y","z","noise","ease","sin","push","translate","rotateX","cos","TWO_PI","rotateY","box","constrain","abs","pop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","module","exports","obj","type","__webpack_require__","isArray","isNumber","isObject","extend","degPerRadian","Math","PI","Coordinate","config","isRadian","isDegree","_x","_y","_z","_r","_t","_p","pos","defineProperty","this","get","set","label","coords","Error","initialType","prototype","cartesian","arguments","options","temp","cartesian2d","cartesian3d","polarToCart2d","polar","cylindrical","sphericalToCart3d","cyl","cartesian2dToPolar","center","cartesian3dToCylindrical","sphericalToCylindrical","pol","sph","cartesian3dToSpherical","cylindricalToSpherical","baseCoord","arrToNumeric","length","nums","num","TypeError","i","parseFloat","rt","r","t","xy","sqrt","atan2","xyz","x2","y2","z2","rtz","sr","sp","rtp","cr","toString","nativeIsArray","Array","call","source","prop","d","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"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","file":"component---src-pages-sketch-2019-09-02-js-075a0e84f2edfeb4779b.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { spherical } from \"coordinate-systems\";\nimport { easeOutQuint as ease } from \"~lib/easing\";\n\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const HUE = p.random(0.9);\n  const COUNT = 3;\n\n  p.setup = function() {\n    if (RENDER) {\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840, p.WEBGL);\n    p.noStroke();\n    p.colorMode(p.HSB, 1);\n\n    p.createLoop(30, {\n      gif: RENDER ? { render: false, open: true } : true,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, noise2D, theta } = p.animLoop;\n    let size = p.width / COUNT;\n\n    p.background(HUE, 0.5, 0.5);\n\n    p.camera(\n      ...spherical([size * COUNT * 3, 10, theta]).cart(),\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    );\n    p.pointLight(0, 0, 1, 0, 0, -p.width * 3);\n    p.specularMaterial(\n      p.map(noise1D(0.05), -1, 1, HUE - 0.1, HUE + 0.1),\n      0.5,\n      0.8\n    );\n\n    let cubeCount = 1;\n\n    for (let x = -p.ceil(COUNT / 2); x <= p.ceil(COUNT / 2); x++) {\n      for (let y = -p.ceil(COUNT / 2); y <= p.ceil(COUNT / 2); y++) {\n        for (let z = -p.ceil(COUNT / 2); z <= p.ceil(COUNT / 2); z++) {\n          const noise =\n            ease(p.map(p.sin(theta), -1, 1, 0, 1)) *\n            noise2D(x * y * z, cubeCount / 100);\n\n          p.push();\n          p.translate(size * x, size * y, size * z);\n          p.rotateX(noise * p.map(p.cos(theta), -1, 1, 0, p.TWO_PI));\n          p.rotateY(noise * p.map(p.cos(theta), -1, 1, 0, p.TWO_PI));\n          p.box(p.constrain(size * p.abs(p.sin(theta)), size / 10, size));\n          p.pop();\n\n          cubeCount++;\n        }\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","module.exports = function isObject(obj) {\n  var type = typeof obj;\n  return !!obj && (type === 'function' || type === 'object');\n};","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nvar isArray = require('amp-is-array');\n\nvar isNumber = require('amp-is-number');\n\nvar isObject = require('amp-is-object');\n\nvar extend = require('amp-extend');\n\nvar degPerRadian = 180 / Math.PI;\n/**\n * @constructor Coordinate\n * @description Defines object which can convert between coordinate systems.\n * It is recommended to use one of the Coodinate.STATIC_CONSTRUCTOR functions\n * to generate your first coordinate before conversions. e.g. Coodinate.spherical(...)\n * @param {Object} config\n * {\n *     label: 'type of initial coordinate',\n *     coords: {\n *         x/y/z/r/t/p: 'k-v pairs'\n *     },\n *     isDegree: Boolean\n * }\n */\n\nvar Coordinate = function Coordinate(config) {\n  var isRadian,\n      isDegree,\n      pos = {},\n      _x,\n      _y,\n      _z,\n      _r,\n      _t,\n      _p; // Override select setters/getts\n\n\n  Object.defineProperty(this, \"isRadian\", {\n    get: function get(x) {\n      return isRadian;\n    },\n    set: function set(x) {\n      isRadian = !!x;\n\n      if (isDegree !== !x) {\n        isDegree = !x;\n      } // jshint ignore:line\n\n    }\n  });\n  Object.defineProperty(this, \"isDegree\", {\n    get: function get(x) {\n      return isDegree;\n    },\n    set: function set(x) {\n      isDegree = x;\n\n      if (isRadian !== !x) {\n        isRadian = !x;\n      } // jshint ignore:line\n\n    }\n  });\n  Object.defineProperty(pos, \"cartesian2d\", {\n    get: function get(x) {\n      return [_x, _y];\n    },\n    set: function set(x) {\n      _x = x[0];\n      _y = x[1];\n    }\n  });\n  Object.defineProperty(pos, \"cartesian3d\", {\n    get: function get(x) {\n      return [_x, _y, _z];\n    },\n    set: function set(x) {\n      _x = x[0];\n      _y = x[1];\n      _z = x[2];\n    }\n  });\n  Object.defineProperty(pos, \"polar\", {\n    get: function get(x) {\n      return [_r, _t];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n    }\n  });\n  Object.defineProperty(pos, \"cylindrical\", {\n    get: function get(x) {\n      return [_r, _t, _z];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n      _z = x[2];\n    }\n  });\n  Object.defineProperty(pos, \"spherical\", {\n    get: function get(x) {\n      return [_r, _t, _p];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n      _p = x[2];\n    }\n  }); // init from config\n\n  if (config.isDegree && !config.isRadian) {\n    this.isDegree = true;\n  } else {\n    this.isRadian = true;\n  }\n\n  if (!config.label || !config.coords) {\n    throw new Error(\"no coordinate type defined\");\n  }\n\n  this.initialType = config.label;\n  this.pos = pos;\n  this.pos[config.label] = config.coords;\n};\n/**\n * @method cartesian\n * Converts current coordinate to cartesian\n * @function cartesian\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cartesian = function () {\n  return this.cart.apply(this, arguments);\n};\n/**\n * @method cart\n * Converts current coordinate to cartesian\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cart = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      return this.pos.cartesian2d;\n\n    case 'cartesian3d':\n      return this.pos.cartesian3d;\n\n    case 'polar':\n      this.pos.cartesian2d = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n      return this.pos.cartesian2d;\n\n    case 'cylindrical':\n      temp = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n      this.pos.cartesian3d = [temp[0], temp[1], this.pos.cylindrical[2]];\n      return this.pos.cartesian3d;\n\n    case 'spherical':\n      this.pos.cartesian3d = Coordinate.sphericalToCart3d(this.pos.spherical, this.isDegree);\n      return this.pos.cartesian3d;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method cylindrical\n * Converts current coordinate to cylindrical\n * @function cylindrical\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cylindrical = function () {\n  return this.cyl.apply(this, arguments);\n};\n/**\n * @method cyl\n * Converts current coordinate to cylindrical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cyl = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      this.pos.cylindrical = [temp[0], temp[1], 0];\n      return this.pos.cylindrical;\n\n    case 'cartesian3d':\n      this.pos.cylindrical = Coordinate.cartesian3dToCylindrical(this.pos.cartesian3d, this.isDegree, options.center);\n      return this.pos.cylindrical;\n\n    case 'polar':\n      temp = this.pos.polar;\n      return [temp[0], temp[1], 0];\n\n    case 'cylindrical':\n      return this.pos.cylindrical;\n\n    case 'spherical':\n      this.pos.cylindrical = Coordinate.sphericalToCylindrical(this.pos.spherical, this.isDegree);\n      return this.pos.cylindrical;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method pol\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.pol = function () {\n  return this.polar.apply(this, arguments);\n};\n/**\n * @method polar\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.polar = function (options) {\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      this.pos.polar = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      return this.pos.polar;\n\n    case 'polar':\n      return this.pos.polar;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method spherical\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.spherical = function () {\n  return this.sph.apply(this, arguments);\n};\n/**\n * @method sph\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.sph = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      this.pos.spherical = [temp[0], temp[1], 0];\n      return this.pos.spherical;\n\n    case 'cartesian3d':\n      this.pos.spherical = Coordinate.cartesian3dToSpherical(this.pos.cartesian3d, this.isDegree, options.center);\n      return this.pos.spherical;\n\n    case 'polar':\n      temp = this.pos.polar;\n      return [temp[0], temp[1], 0];\n\n    case 'cylindrical':\n      this.pos.spherical = Coordinate.cylindricalToSpherical(this.pos.cylindrical, this.isDegree);\n      return this.pos.spherical;\n\n    case 'spherical':\n      return this.pos.spherical;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n}; ///\n/// Static Constructor Functions\n///\n\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cartesian = function (x) {\n  return Coordinate.cart(x);\n};\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cart = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length < 2 || options.coords.length > 3) {\n      throw new Error('expected exactly 2 or exactly 3 cartesian options');\n    }\n\n    baseCoord = {\n      label: 'cartesian2d',\n      options: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n\n    if (options.coords.length === 2) {\n      return new Coordinate(baseCoord);\n    }\n\n    baseCoord.label = 'cartesian3d';\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [x,y,(z?)] coords');\n};\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cylindrical = function (x) {\n  return Coordinate.cyl(x);\n};\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cyl = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 3) {\n      throw new Error('expected exactly 3 params [r, t, z]');\n    }\n\n    baseCoord = {\n      label: 'cylindrical',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [r, t, z] coords');\n};\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.polar = function (x) {\n  return Coordinate.pol(x);\n};\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.pol = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 2) {\n      throw new Error('expected exactly 2 params [r, t]');\n    }\n\n    baseCoord = {\n      label: 'polar',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected array of [r, t] options');\n};\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.spherical = function (options) {\n  return Coordinate.sph(options);\n};\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.sph = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 3) {\n      throw new Error('expected exactly 3 params [r, t, p]');\n    }\n\n    baseCoord = {\n      label: 'spherical',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [r, t, p] coords');\n};\n/**\n * Mutates an array of number-like looking values to purely numeric array\n * @example\n * [5, '2.4', '0'] => [5, 2.4, 0]\n * @param  {Array} nums\n * @return {undefined}\n */\n\n\nCoordinate.arrToNumeric = function (nums) {\n  var num;\n\n  if (!isArray(nums)) {\n    throw new TypeError(\"expected array of number-like values\");\n  }\n\n  for (var i = nums.length - 1; i >= 0; i--) {\n    num = nums[i];\n\n    if (typeof num === 'string') {\n      num = parseFloat(num);\n    }\n\n    if (!isNumber(num)) {\n      throw new TypeError(num + ' not numeric or numeric-like');\n    }\n  }\n};\n/**\n * Convert polar to 2d cartesian coordinates\n * @param  {Array}   rt        [radis, theta]\n * @param  {Boolean} isDegree specifies units\n * @return {Array}  [x, y]\n */\n\n\nCoordinate.polarToCart2d = function (rt, isDegree) {\n  var r, t, x, y;\n  r = rt[0];\n  t = rt[1];\n\n  if (isDegree) {\n    t = t * (1 / degPerRadian);\n  }\n\n  x = r * Math.cos(t);\n  y = r * Math.sin(t);\n  return [x, y];\n};\n/**\n * Convert cartesian 2d to polar coordinates\n * @param  {Array}  xy\n * @param {Boolean=} isDegree overrides default radian theta assumption\n * @param  {Array=} center [x, y] coords of center of circle.  Defaults to [0, 0],\n * however may be offset.  Note. Such functionality not supported yet for converting\n * polar to cartesian\n * @return {Array}  [radius, theta]\n */\n\n\nCoordinate.cartesian2dToPolar = function (xy, isDegree, center) {\n  var x, y, r, t;\n\n  if (!isArray(xy) && xy.length !== 2) {\n    throw new TypeError('expected [x, y] xy array');\n  }\n\n  x = xy[0];\n  y = xy[1];\n\n  if (center && !isArray(center) && center.length !== 2) {\n    throw new TypeError('expected [x, y] center array');\n  }\n\n  if (center) {\n    x = x - center[0];\n    y = y - center[1];\n  }\n\n  r = Math.sqrt(x * x + y * y);\n  t = Math.atan2(y, x);\n\n  if (isDegree) {\n    t = t * degPerRadian;\n  }\n\n  return [r, t];\n};\n/**\n * Convert 3d cartesian to 3d cylindrical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y] coords of center of circle\n * @return {Array}      [radius, theta, z]\n */\n\n\nCoordinate.cartesian3dToCylindrical = function (xyz, isDegree, center) {\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      rt;\n  rt = Coordinate.cartesian2dToPolar([x, y], isDegree, center);\n  return [rt[0], rt[1], z];\n};\n/**\n * Convert 3d cartesian to 3d spherical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y, z] coords of center of circle\n * @return {Array}      [radius, theta, phi]\n */\n\n\nCoordinate.cartesian3dToSpherical = function (xyz, isDegree, center) {\n  if (center && center.length !== 3) {\n    throw new Error('expected center value to have [x, y, z] coords' + 'for locating sphere center');\n  }\n\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      x2,\n      y2,\n      z2,\n      r,\n      t,\n      p;\n\n  if (center) {\n    x = x - center[0];\n    y = y - center[1];\n    z = z - center[2];\n  }\n\n  x2 = x * x;\n  y2 = y * y;\n  z2 = z * z;\n  r = Math.sqrt(x2 + y2 + z2);\n\n  if (!r) {\n    p = t = 0;\n  } else {\n    t = Math.atan2(y, x);\n    p = Math.atan2(Math.sqrt(x2 + y2), z);\n\n    if (isDegree) {\n      t = t * degPerRadian;\n      p = p * degPerRadian;\n    }\n  }\n\n  return [r, t, p];\n};\n/**\n * Convert a cylindrical to a spherical coordinates\n * @param  {Array}   rtz\n * @param  {Boolean} isDegree\n * @return {Array}   [radius, theta, phi]\n */\n\n\nCoordinate.cylindricalToSpherical = function (rtz, isDegree) {\n  var r = rtz[0],\n      t = rtz[1],\n      z = rtz[2];\n  var sr, sp; // sphere radius, sphere theta...\n\n  if (isDegree) {\n    t = t / degPerRadian;\n  }\n\n  sr = Math.sqrt(r * r + z * z);\n  sp = Math.atan2(r, z);\n\n  if (isDegree) {\n    sp = sp * degPerRadian;\n    t = t * degPerRadian;\n  }\n\n  return [sr, t, sp];\n};\n/**\n * Convert spherical to a cartesian coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\n\n\nCoordinate.sphericalToCart3d = function (rtp, isDegree) {\n  var r = rtp[0],\n      t = rtp[1],\n      p = rtp[2],\n      x,\n      y,\n      z;\n\n  if (isDegree) {\n    t = t / degPerRadian;\n    p = p / degPerRadian;\n  }\n\n  x = r * Math.sin(p) * Math.cos(t);\n  y = r * Math.sin(p) * Math.sin(t);\n  z = r * Math.cos(p);\n  return [x, y, z];\n};\n/**\n * Convert spherical to cylindrical coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\n\n\nCoordinate.sphericalToCylindrical = function (rtp, isDegree) {\n  var r = rtp[0],\n      t = rtp[1],\n      p = rtp[2],\n      cr,\n      z;\n\n  if (isDegree) {\n    t = t / degPerRadian;\n    p = p / degPerRadian;\n  }\n\n  cr = r * Math.sin(p);\n  z = r * Math.cos(p);\n\n  if (isDegree) {\n    t = t * degPerRadian;\n    p = p * degPerRadian;\n  }\n\n  return [cr, t, z];\n};\n\nmodule.exports = Coordinate;","require(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nvar toString = Object.prototype.toString;\nvar nativeIsArray = Array.isArray;\n\nmodule.exports = nativeIsArray || function isArray(obj) {\n  return toString.call(obj) === '[object Array]';\n};","require(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nvar toString = Object.prototype.toString;\n\nmodule.exports = function isNumber(obj) {\n  return toString.call(obj) === '[object Number]';\n};","var isObject = require('amp-is-object');\n\nmodule.exports = function (obj) {\n  if (!isObject(obj)) return obj;\n  var source, prop;\n\n  for (var i = 1, length = arguments.length; i < length; i++) {\n    source = arguments[i];\n\n    for (prop in source) {\n      obj[prop] = source[prop];\n    }\n  }\n\n  return obj;\n};","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n"],"sourceRoot":""}