{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js","webpack:///./src/pages/sketch/2019/05/12.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","p","x1","y1","x2","y2","rate","showFirstDot","Error","l","random","point","lerp","sketch","maxDist","SLICES","vertices","setup","createCanvas","Array","from","floor","theta","TWO_PI","r","height","forEach","i","push","vector","width","reached","hue","map","filter","dist","background","colorMode","HSB","strokeWeight","draw","reachedVector","unreachedIndex","reachedVertices","shortestDist","vertex","thisDist","stroke","lerpLine","noStroke","fill","rect","v","length","noLoop","text","pop","SketchPage"],"mappings":"4FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,oCCflB,aAASO,EAAGC,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChBN,EAAES,SAAWD,GAAKR,EAAEU,MAAMV,EAAEW,KAAKV,EAAIE,EAAIK,GAAIR,EAAEW,KAAKT,EAAIE,EAAII,M,kJCA1DI,EAAS,SAASZ,GACtB,IAGIa,EAHEC,EAASd,EAAES,OAAO,CAAC,EAAG,EAAG,IAE3BM,EAAW,GAGff,EAAEgB,MAAQ,WACRhB,EAAEiB,aAAa,IAAK,KAEpBC,MAAMC,KAAKD,MAAMlB,EAAEoB,MAAM,IAAON,KAAU,iBAAO,CAC/CO,MAAOrB,EAAES,OAAOT,EAAEsB,OAASR,GAC3BS,EAAGvB,EAAES,OAAOT,EAAEwB,OAAS,OACrBC,SAAQ,YACV,IAD6B,IAAhBJ,EAAe,EAAfA,MAAOE,EAAQ,EAARA,EACXG,EAAI,EAAGA,EAAIZ,EAAQY,IAC1BX,EAASY,KAAK,CACZC,OAAQjC,YACNK,EAAE6B,MAAQ,EACV7B,EAAEwB,OAAS,EACXH,EAASrB,EAAEsB,OAASR,EAAUY,EAC9BH,GAEFO,SAAS,EACTC,IAAK/B,EAAEgC,IAAIhC,EAAEN,IAAI2B,EAASrB,EAAEsB,OAASR,EAAUY,IAAK,EAAG,EAAG,EAAG,WAInEX,EAAWA,EAASkB,QAClB,gBAAGL,EAAH,EAAGA,OAAH,OACEA,EAAOtC,EAAI,GACXsC,EAAOtC,EAAIU,EAAE6B,OACbD,EAAOnC,EAAI,GACXmC,EAAOnC,EAAIO,EAAEwB,WAERG,KAAK,CACZC,OAAQ,CACNtC,EAAGU,EAAE6B,MAAQ,EACbpC,EAAGO,EAAEwB,OAAS,GAEhBM,SAAS,EACTC,IAAK,IAGPlB,EAAUb,EAAEkC,KAAK,EAAG,EAAGlC,EAAE6B,MAAO7B,EAAEwB,QAElCxB,EAAEmC,WAAW,GACbnC,EAAEoC,UAAUpC,EAAEqC,IAAK,KACnBrC,EAAEsC,aAAa,IAGjBtC,EAAEuC,KAAO,WACP,IAGIC,EACAC,EAJEC,EAAkB3B,EAASkB,QAAO,qBAAGH,WAEvCa,EAAe9B,EAInBE,EAASU,SAAQ,SAACmB,EAAQlB,GACnBkB,EAAOd,SACVY,EAAgBjB,SAAQ,YAAiB,IAAdG,EAAa,EAAbA,OACnBiB,EAAW7C,EAAEkC,KACjBN,EAAOtC,EACPsC,EAAOnC,EACPmD,EAAOhB,OAAOtC,EACdsD,EAAOhB,OAAOnC,GAEZoD,EAAWF,IACbA,EAAeE,EACfJ,EAAiBf,EACjBc,EAAgBZ,SAMxB5B,EAAE8C,OAAO/B,EAAS0B,GAAgBV,IAAK,GAAI,KAC3CgB,YACE/C,EACAwC,EAAclD,EACdkD,EAAc/C,EACdsB,EAAS0B,GAAgBb,OAAOtC,EAChCyB,EAAS0B,GAAgBb,OAAOnC,EAChCO,EAAEgC,IACAhC,EAAEkC,KAAKlC,EAAE6B,MAAQ,EAAG7B,EAAEwB,OAAS,EAAGgB,EAAclD,EAAGkD,EAAc/C,GACjE,EACAoB,EAAU,EACV,GACA,KAEF,GAGFE,EAAS0B,GAAgBX,SAAU,EAEnC9B,EAAE2B,OACF3B,EAAEgD,WACFhD,EAAEiD,KAAK,SACPjD,EAAEkD,KAAK,EAAG,EAAG,IAAK,IAEdnC,EAASkB,QAAO,SAAAkB,GAAC,OAAIA,EAAErB,WAASsB,SAAWrC,EAASqC,OACtDpD,EAAEqD,UAEFrD,EAAEiD,KAAK,SACPjD,EAAEsD,KAAKvC,EAASqC,OAASrC,EAASkB,QAAO,SAAAkB,GAAC,OAAIA,EAAErB,WAASsB,OAAQ,EAAG,KAGtEpD,EAAEuD,QAWSC,UAPI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ5C,OAAQA,IAChB","file":"component---src-pages-sketch-2019-05-12-js-7e84e07c12ea836760bd.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const SLICES = p.random([2, 3, 5]);\n\n  let vertices = [];\n  let maxDist;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n\n    Array.from(Array(p.floor(3000 / SLICES)), () => ({\n      theta: p.random(p.TWO_PI / SLICES),\n      r: p.random(p.height / 2),\n    })).forEach(({ theta, r }) => {\n      for (let i = 0; i < SLICES; i++) {\n        vertices.push({\n          vector: polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            theta + (p.TWO_PI / SLICES) * i,\n            r\n          ),\n          reached: false,\n          hue: p.map(p.sin(theta + (p.TWO_PI / SLICES) * i), -1, 1, 0, 100),\n        });\n      }\n    });\n    vertices = vertices.filter(\n      ({ vector }) =>\n        vector.x > 0 &&\n        vector.x < p.width &&\n        vector.y > 0 &&\n        vector.y < p.height\n    );\n    vertices.push({\n      vector: {\n        x: p.width / 2,\n        y: p.height / 2,\n      },\n      reached: true,\n      hue: 0,\n    });\n\n    maxDist = p.dist(0, 0, p.width, p.height);\n\n    p.background(0);\n    p.colorMode(p.HSB, 100);\n    p.strokeWeight(2);\n  };\n\n  p.draw = function() {\n    const reachedVertices = vertices.filter(({ reached }) => reached);\n\n    let shortestDist = maxDist;\n    let reachedVector;\n    let unreachedIndex;\n\n    vertices.forEach((vertex, i) => {\n      if (!vertex.reached) {\n        reachedVertices.forEach(({ vector }) => {\n          const thisDist = p.dist(\n            vector.x,\n            vector.y,\n            vertex.vector.x,\n            vertex.vector.y\n          );\n          if (thisDist < shortestDist) {\n            shortestDist = thisDist;\n            unreachedIndex = i;\n            reachedVector = vector;\n          }\n        });\n      }\n    });\n\n    p.stroke(vertices[unreachedIndex].hue, 80, 100);\n    lerpLine(\n      p,\n      reachedVector.x,\n      reachedVector.y,\n      vertices[unreachedIndex].vector.x,\n      vertices[unreachedIndex].vector.y,\n      p.map(\n        p.dist(p.width / 2, p.height / 2, reachedVector.x, reachedVector.y),\n        0,\n        maxDist / 2,\n        0.1,\n        0.5\n      ),\n      false\n    );\n\n    vertices[unreachedIndex].reached = true;\n\n    p.push();\n    p.noStroke();\n    p.fill(\"black\");\n    p.rect(0, 0, 100, 20);\n\n    if (vertices.filter(v => v.reached).length === vertices.length) {\n      p.noLoop();\n    } else {\n      p.fill(\"white\");\n      p.text(vertices.length - vertices.filter(v => v.reached).length, 0, 18);\n    }\n\n    p.pop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n    <p>Be patient.</p>\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}