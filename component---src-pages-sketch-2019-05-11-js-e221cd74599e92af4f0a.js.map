{"version":3,"sources":["webpack:///./src/lib/addNoise.js","webpack:///./src/pages/sketch/2019/05/11.js"],"names":["addNoise","p","intensity","PTS","width","height","console","log","push","i","fill","noStroke","ellipse","randomGaussian","pixelDensity","pop","sketch","w","h","GRID_SIZE","SIZES","HUE","random","BG","color","grid","Doodad","x","y","size","this","tileSize","tile","createGraphics","colorMode","HSB","background","stroke","strokeCap","PROJECT","strokeWeight","noFill","drawSmallTile","drawTile","drawBigTile","drawReallyBigTile","translate","rotate","HALF_PI","image","arc","PI","circle","setup","createCanvas","floor","xx","yy","visited","draw","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-05-11-js-e221cd74599e92af4f0a.js","sourcesContent":["const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  console.log(PTS);\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport addNoise from \"~lib/addNoise\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 30;\n  const SIZES = [1, 4, 4, 4, 4, 5, 5, 5, 6, 6];\n  const HUE = p.random(100);\n  const BG = p.color(HUE, 75, 100);\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.tileSize = size * GRID_SIZE;\n\n      this.tile = p.createGraphics(this.tileSize, this.tileSize);\n      this.tile.colorMode(p.HSB, 100);\n      this.tile.background(BG);\n      this.tile.stroke(100 - HUE, 25, 50);\n      this.tile.strokeCap(p.PROJECT);\n      this.tile.strokeWeight(GRID_SIZE / 5);\n      this.tile.noFill();\n\n      switch (size) {\n        case 1:\n          this.drawSmallTile();\n          break;\n\n        case 4:\n          this.drawTile();\n          break;\n\n        case 5:\n          this.drawTile();\n          this.drawBigTile();\n          break;\n\n        case 6:\n          this.drawTile();\n          this.drawReallyBigTile();\n          break;\n      }\n\n      p.push();\n      p.translate(this.x + this.tileSize / 2, this.y + this.tileSize / 2);\n      p.rotate(p.random([0, p.HALF_PI]));\n      p.image(this.tile, -this.tileSize / 2, -this.tileSize / 2);\n      p.pop();\n    }\n\n    drawSmallTile() {\n      this.tile.arc(0, 0, this.tileSize, this.tileSize, 0, p.HALF_PI);\n      this.tile.arc(\n        this.tileSize,\n        this.tileSize,\n        this.tileSize,\n        this.tileSize,\n        p.PI,\n        p.HALF_PI + p.PI\n      );\n    }\n\n    drawTile() {\n      this.tile.circle(0, 0, GRID_SIZE / 2);\n      this.tile.circle(0, this.tileSize, GRID_SIZE / 2);\n      this.tile.circle(this.tileSize, 0, GRID_SIZE / 2);\n      this.tile.circle(this.tileSize, this.tileSize, GRID_SIZE / 2);\n      this.tile.circle(0, 0, GRID_SIZE * 1.5);\n      this.tile.circle(0, this.tileSize, GRID_SIZE * 1.5);\n      this.tile.circle(this.tileSize, 0, GRID_SIZE * 1.5);\n      this.tile.circle(this.tileSize, this.tileSize, GRID_SIZE * 1.5);\n      this.tile.circle(this.tileSize / 2, this.tileSize / 2, GRID_SIZE / 2);\n    }\n\n    drawBigTile() {\n      this.tile.circle(0, 0, this.tileSize / 2);\n      this.tile.circle(this.tileSize, this.tileSize, this.tileSize / 2);\n    }\n\n    drawReallyBigTile() {\n      this.tile.circle(0, 0, GRID_SIZE * 2.5);\n      this.tile.circle(this.tileSize, this.tileSize, GRID_SIZE * 2.5);\n      this.tile.circle(0, this.tileSize, GRID_SIZE * 2.5);\n      this.tile.circle(this.tileSize, 0, GRID_SIZE * 2.5);\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(BG);\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}