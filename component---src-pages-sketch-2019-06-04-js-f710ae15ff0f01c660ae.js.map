{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js","webpack:///./src/pages/sketch/2019/06/04.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","p","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","max","dist","l","random","point","lerp","noise","OpenSimplexNoise","Date","now","sketch","steps","hue","alpha","a","i","setup","createCanvas","background","colorMode","HSB","strokeWeight","draw","translate","width","height","stroke","noiseVal","map","noise4D","TWO_PI","frameCount","lerpLine","noLoop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,oCCZlB,aACbE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QACA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAIR,IAFA,IAAMC,EAAWrB,KAAKsB,IAAIJ,EAAM,IAAOL,EAAEU,KAAKT,EAAIC,EAAIC,EAAIC,IAEjDO,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYL,KACXC,GAASP,EAAEY,SAAWD,IAAOJ,IAChCP,EAAEa,MAAMb,EAAEc,KAAKb,EAAIE,EAAIQ,GAAIX,EAAEc,KAAKZ,EAAIE,EAAIO,M,oCC3BhD,0FAMMI,EAAQ,IAAIC,IAAiBC,KAAKC,OAElCC,EAAS,SAASnB,GACtB,IAAIoB,EAAQ,IACRC,EAAMrB,EAAEY,OAAO,GAAI,KACnBU,EAAQ,EACRC,EAAI,EACJC,EAAI,EAERxB,EAAEyB,MAAQ,WACRzB,EAAE0B,aAAa,IAAK,KACpB1B,EAAE2B,WAAW,IACb3B,EAAE4B,UAAU5B,EAAE6B,KACd7B,EAAE8B,aAAa,IAGjB9B,EAAE+B,KAAO,WACP/B,EAAEgC,UAAUhC,EAAEiC,MAAQ,EAAGjC,EAAEkC,OAAS,GACpClC,EAAEmC,OAAOd,EAAK,IAAK,IAAKC,GAExB,IAAMc,EAAWpC,EAAEqC,IACjBtB,EAAMuB,SACHd,EAAI,IAAO,IACXA,EAAI,IAAO,GACZxB,EAAEZ,IAAIY,EAAEuC,QAAUvC,EAAEwC,WAAapB,IACjCpB,EAAEV,IAAIU,EAAEuC,QAAUvC,EAAEwC,WAAapB,MAElC,EACD,EACA,EACA,GAdgB,EAgBDrB,YAAiB,EAAG,EAAGwB,EAAGvB,EAAEiC,MAAQG,GAA7CvC,EAhBU,EAgBVA,EAAGC,EAhBO,EAgBPA,EAEX2C,YAASzC,EAAG,EAAG,EAAGH,EAAGC,EAAG,EAAIE,EAAEU,KAAK,EAAG,EAAGb,EAAGC,KAE5CyB,GAAKvB,EAAEuC,OAASnB,GACRpB,EAAEuC,SACRf,GAAK,IACLF,GAAS,EACTC,EAAI,EACJH,GAAS,GACTC,GAAO,IACG,GAAGrB,EAAE0C,YAKN,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcxB,OAAQA,EAAQyB,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-06-04-js-f710ae15ff0f01c660ae.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport OpenSimplexNoise from \"open-simplex-noise\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst noise = new OpenSimplexNoise(Date.now());\n\nconst sketch = function(p) {\n  let steps = 300;\n  let hue = p.random(67, 100);\n  let alpha = 5;\n  let a = 0;\n  let i = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(64);\n    p.colorMode(p.HSB);\n    p.strokeWeight(5);\n  };\n\n  p.draw = function() {\n    p.translate(p.width / 2, p.height / 2);\n    p.stroke(hue, 100, 100, alpha);\n\n    const noiseVal = p.map(\n      noise.noise4D(\n        (i + 0.1) / 10,\n        (i + 0.2) / 10,\n        p.cos(p.TWO_PI * (p.frameCount / steps)),\n        p.sin(p.TWO_PI * (p.frameCount / steps))\n      ),\n      -1,\n      1,\n      0,\n      1\n    );\n    const { x, y } = polarToCartesian(0, 0, a, p.width * noiseVal);\n\n    lerpLine(p, 0, 0, x, y, 6 / p.dist(0, 0, x, y));\n\n    a += p.TWO_PI / steps;\n    if (a > p.TWO_PI) {\n      i += 1000;\n      alpha /= 2;\n      a = 0;\n      steps /= 2;\n      hue -= 33;\n      if (hue < 0) p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}