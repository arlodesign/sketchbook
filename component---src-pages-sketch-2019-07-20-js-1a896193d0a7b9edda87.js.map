{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/20.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","HUE","random","a","i","setup","createCanvas","colorMode","HSB","background","noFill","strokeWeight","blendMode","OVERLAY","ellipseMode","CENTER","draw","thisHue","NOISE","noise","frameCount","push","stroke","translate","apply","polarToCartesian","width","height","rotate","bezier","pop","console","log","TWO_PI","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"uIAKMA,UAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,EAAG,EAAI,GAGxBC,EAAI,EACJC,EAAI,EAERJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,GACnBR,EAAES,WAAWR,EAAK,GAAK,IACvBD,EAAEU,SACFV,EAAEW,aAAa,GACfX,EAAEY,UAAUZ,EAAEa,SACdb,EAAEc,YAAYd,EAAEe,SAGlBf,EAAEgB,KAAO,WACP,IAEIC,EAFEC,EAAQlB,EAAEmB,MAAMnB,EAAEoB,WAAF,IAAmCjB,GAKvDc,EADEC,EAAQ,EAAI,EACJjB,EACDiB,EAAQ,EAAI,EACXjB,EAAM,EAAI,EAEVA,EAAM,EAAI,EAGtBD,EAAEqB,OACFrB,EAAEsB,OAAOL,EAASb,EA7BD,IA6BiB,GAAK,IACvCJ,EAAEuB,UAAFC,MAAAxB,EACKyB,YACDzB,EAAE0B,MAAQ,EACV1B,EAAE2B,OAAS,EACXxB,EACCH,EAAE0B,MAAQ,GAAM,EAAIR,IACrB,IAGJlB,EAAE4B,OAAOzB,GACTH,EAAE6B,OACA,EACA,EACC7B,EAAE0B,MAAQR,EAAS,GACnBlB,EAAE0B,MAAQ,GACV1B,EAAE0B,MAAQR,EAAS,EACpBlB,EAAE0B,MAAQ,GACT1B,EAAE0B,MAAQ,EAAKR,EAChB,GAEFlB,EAAE8B,MAEFC,QAAQC,IAAI5B,IAEZD,GAAKH,EAAEiC,OAtDU,IAsDYjC,EAAEiC,OAtDd,SAuDTjC,EAAEiC,OAAS7B,KACjBA,EAxDe,MA0DbJ,EAAEkC,SACFH,QAAQC,IAAI,YAMLG,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAczC,OAAQA,EAAQ0C,KAAMJ,EAASK,SAAUC,YAAY,wCCzErEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKE,IAAIJ,GAASC,GAa9BH,EAA0B,SAC9BO,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKC,IAAIH,GAASO,EAChCI,EAAIL,EAAUJ,KAAKE,IAAIJ,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBpC,IAzBU,SACvB8B,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASL,EAAOC,GACtCU,EAAId,EAAkBS,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,wCCflB1B,EAAA,WAASnC,EAAG8D,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChBnE,EAAEE,SAAWmE,GAAKrE,EAAEsE,MAAMtE,EAAEuE,KAAKT,EAAIE,EAAIK,GAAIrE,EAAEuE,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-07-20-js-1a896193d0a7b9edda87.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const HUE = p.random(0, 1 / 3);\n  const ITERATIONS = 100;\n\n  let a = 0;\n  let i = 1;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n    p.background(HUE, 0.5, 0.9);\n    p.noFill();\n    p.strokeWeight(2);\n    p.blendMode(p.OVERLAY);\n    p.ellipseMode(p.CENTER);\n  };\n\n  p.draw = function() {\n    const NOISE = p.noise(p.frameCount / (ITERATIONS * 100), a);\n\n    let thisHue;\n\n    if (NOISE < 1 / 3) {\n      thisHue = HUE;\n    } else if (NOISE > 2 / 3) {\n      thisHue = HUE + 2 / 3;\n    } else {\n      thisHue = HUE + 1 / 3;\n    }\n\n    p.push();\n    p.stroke(thisHue, i / ITERATIONS, 0.9, 0.2);\n    p.translate(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        a,\n        (p.width / 3) * (1 - NOISE),\n        true\n      )\n    );\n    p.rotate(a);\n    p.bezier(\n      0,\n      0,\n      (p.width * NOISE) / 2,\n      -p.width / 10,\n      (p.width * NOISE) / 2,\n      p.width / 10,\n      (p.width / 2) * NOISE,\n      0\n    );\n    p.pop();\n\n    console.log(i);\n\n    a += p.TWO_PI / ITERATIONS + p.TWO_PI / ITERATIONS / ITERATIONS;\n    if (a > p.TWO_PI * i) {\n      i++;\n      if (i > ITERATIONS) {\n        p.noLoop();\n        console.log(\"done\");\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}