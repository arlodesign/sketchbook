{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/15.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","setup","frameRate","pixelDensity","createCanvas","background","noFill","strokeWeight","createLoop","gif","render","open","noiseRadius","draw","_p$animLoop","animLoop","noise1D","theta","stroke","map","sin","cos","tan","x1","width","y1","height","x2","y2","handle","polarToCartesian","bezier","apply","concat","DURATION","frameCount","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-08-15-js-e05ded4eb4d8134b9cf2.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 60;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.noFill();\n    p.strokeWeight(10);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.01,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n\n    p.stroke(\n      p.map(noise1D(p.sin(theta)), -1, 1, 0, 255),\n      p.map(noise1D(p.cos(theta)), -1, 1, 255, 0),\n      p.map(noise1D(p.tan(theta)), -1, 1, 0, 255),\n      16\n    );\n    const x1 = p.map(noise1D(p.sin(theta)), -1, 1, p.width / 4, p.width);\n    const y1 = p.map(noise1D(p.cos(theta)), -1, 1, p.height / 4, p.height);\n    const x2 = p.map(noise1D(p.cos(theta)), -1, 1, p.width, p.width / 4);\n    const y2 = p.map(noise1D(p.sin(theta)), -1, 1, p.height, p.height / 4);\n    const handle = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      theta,\n      p.width / 3,\n      true\n    );\n    p.bezier(x1, y1, ...handle, ...handle, x2, y2);\n    p.bezier(\n      p.width - x1,\n      p.height - y1,\n      p.width - handle[0],\n      p.height - handle[1],\n      p.width - handle[0],\n      p.height - handle[1],\n      p.width - x2,\n      p.height - y2\n    );\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}