{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/26.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","size","prevPoint","outerAngle","innerAngle","PI","outerSpeed","TWO_PI","innerSpeed","hue","random","setup","createCanvas","colorMode","HSB","background","noFill","strokeWeight","width","draw","stroke","lerpColor","color","map","sin","thisFocalPoint","cos","height","thisPoint","polarToCartesian","noise","frameCount","line","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"uIAMMA,EAAS,SAASC,GACtB,IAGIC,EACAC,EACAC,EAAa,EACbC,EAAaJ,EAAEK,GACfC,EAPU,IACC,EAMmBN,EAAEO,OAChCC,EAAa,EAPF,EAOeR,EAAEO,OAC5BE,EAAMT,EAAEU,OAAO,KAEnBV,EAAEW,MAAQ,WACRX,EAAEY,aAAa,IAAK,KACpBZ,EAAEa,UAAUb,EAAEc,IAAK,KACnBd,EAAEe,WAAWN,EAAK,GAAI,IACtBT,EAAEgB,SACFhB,EAAEiB,aAAa,IACfhB,EAAOD,EAAEkB,OAGXlB,EAAEmB,KAAO,WACPnB,EAAEoB,OACApB,EAAEqB,UACArB,EAAEsB,MAAMb,EAAK,EAAG,EAAG,GACnBT,EAAEsB,MAAMb,EAAK,EAAG,IAChBT,EAAEuB,IAAIvB,EAAEwB,IAAIpB,IAAc,EAAG,EAAG,EAAG,KAIvC,IAAMqB,EAAiB,CACrBzB,EAAEkB,MAAQ,EACVlB,EAAEuB,IAAIvB,EAAE0B,IAAIvB,IAAc,EAAG,EAAG,IAAKH,EAAE2B,OAAS,MAG5CC,EAAYC,IAAgB,WAAhB,EACbJ,EADa,QAEhBrB,GACCD,EAAaH,EAAEO,OACZP,EAAEuB,IAAIpB,EAAYH,EAAEO,OAAmB,EAAXP,EAAEO,OAAYN,EAAM,GAChDD,EAAEuB,IAAIpB,EAAY,EAAGH,EAAEO,OAAQ,EAAGN,IACpCD,EAAE8B,MAAM,IAAM,IAAM9B,EAAE+B,WAAF,MACtB,KAEE7B,GACFF,EAAEgC,KAAF,MAAAhC,EAAU4B,EAAR,OAAsB1B,IAE1BA,EAAY0B,EAEZxB,GAAcI,GADdL,GAAcG,GAEc,EAAXN,EAAEO,QAAYP,EAAEiC,WAItB,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACEnC,OAAQA,EACRoC,KAAMD,EAASE,SACfC,YAAY,kD,iCChEhB,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKhB,IAAIc,GAASC,GAE9BE,EAAoB,SAACJ,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKlB,IAAIgB,GAASC,GAa9BG,EAA0B,SAC9BC,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKhB,IAAIc,GAASO,EAChCI,EAAIL,EAAUJ,KAAKlB,IAAIgB,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBtB,IAzBU,SACvBgB,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASL,EAAOC,GACtCU,EAAIR,EAAkBG,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-26-js-d7ad2786d992986b797a.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian, {\n  polarToCartesianEllipse,\n} from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SPEED = 1 / 100;\n  const DETAIL = 3;\n\n  let size;\n  let prevPoint;\n  let outerAngle = 0;\n  let innerAngle = p.PI;\n  let outerSpeed = SPEED / DETAIL / p.TWO_PI;\n  let innerSpeed = 1 / DETAIL / p.TWO_PI;\n  let hue = p.random(100);\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.background(hue, 90, 10);\n    p.noFill();\n    p.strokeWeight(0.5);\n    size = p.width;\n  };\n\n  p.draw = function() {\n    p.stroke(\n      p.lerpColor(\n        p.color(hue, 0, 0, 0),\n        p.color(hue, 5, 95),\n        p.map(p.sin(innerAngle), -1, 1, 0, 1)\n      )\n    );\n\n    const thisFocalPoint = [\n      p.width / 2,\n      p.map(p.cos(outerAngle), -1, 1, 100, p.height - 100),\n    ];\n\n    const thisPoint = polarToCartesian(\n      ...thisFocalPoint,\n      innerAngle,\n      (outerAngle > p.TWO_PI\n        ? p.map(outerAngle, p.TWO_PI, p.TWO_PI * 2, size, 0)\n        : p.map(outerAngle, 0, p.TWO_PI, 0, size)) *\n        p.noise(0.01, 0.02, p.frameCount / (DETAIL * 1000)),\n      true\n    );\n    if (prevPoint) {\n      p.line(...thisPoint, ...prevPoint);\n    }\n    prevPoint = thisPoint;\n    outerAngle += outerSpeed;\n    innerAngle += innerSpeed;\n    if (outerAngle > p.TWO_PI * 2) p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Be patient. This one takes a while to draw.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}