{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/02/05.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","points","colorFunctions","abs","tan","PI","drawAThing","sort","a","b","dist","vector","POINT_COUNT","getFarthestPoint","color","fill","noStroke","i","ellipse","lerp","setup","createCanvas","background","Array","map","_","createVector","width","noise","TWO_PI","height","random","blendMode","OVERLAY","draw","Y","floor","frameCount","X","xi","yi","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-02-05-js-49396f8ac82487fbee8d.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { polarToCartesianX, polarToCartesianY } from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GRID = 10;\n  const POINT_COUNT = 10;\n  let points = [];\n  let drawMod = GRID;\n  const colorFunctions = [\n    angle => p.abs(p.sin(angle)) * 240,\n    angle => p.abs(p.cos(angle)) * 240,\n    angle => p.abs(p.tan(angle)) * 240,\n    angle => p.abs(p.sin(angle + p.PI)) * 240,\n    angle => p.abs(p.cos(angle + p.PI)) * 240,\n    angle => p.abs(p.tan(angle + p.PI)) * 240,\n    angle => p.abs(p.sin(-angle)) * 240,\n    angle => p.abs(p.cos(-angle)) * 240,\n    angle => p.abs(p.tan(-angle)) * 240,\n    angle => p.abs(p.sin(-angle + p.PI)) * 240,\n    angle => p.abs(p.cos(-angle + p.PI)) * 240,\n    angle => p.abs(p.tan(-angle + p.PI)) * 240,\n  ];\n\n  function drawAThing(x, y) {\n    const { vector, color } = getFarthestPoint(x, y);\n    p.fill(color);\n    p.noStroke();\n    for (let i = 0; i < p.PI; i += 0.05) {\n      p.ellipse(\n        p.lerp(x, vector.x, p.sin(i)),\n        p.lerp(y, vector.y, p.sin(i)),\n        3\n      );\n    }\n  }\n\n  function getFarthestPoint(x, y) {\n    points.sort(\n      (a, b) =>\n        p.dist(x, y, a.vector.x, a.vector.y) -\n        p.dist(x, y, b.vector.x, b.vector.y)\n    );\n    return points[POINT_COUNT - 1];\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(128);\n    points = Array(POINT_COUNT)\n      .fill()\n      .map((_, i) => ({\n        vector: p.createVector(\n          polarToCartesianX(p.width / 2, p.noise(i) * p.TWO_PI, p.height),\n          polarToCartesianY(p.height / 2, p.noise(i) * p.TWO_PI, p.height)\n        ),\n        color: p.color(\n          p.random(colorFunctions)(i),\n          p.random(colorFunctions)(i),\n          p.random(colorFunctions)(i),\n          32\n        ),\n      }));\n    p.blendMode(p.OVERLAY);\n  };\n\n  p.draw = function() {\n    const Y = p.floor(p.frameCount / (p.width / GRID));\n    const X = p.floor(p.frameCount - (p.width / GRID) * Y);\n    if (Y < p.height / GRID) {\n      for (let xi = 0; xi < GRID; xi++) {\n        for (let yi = 0; yi < GRID; yi++) {\n          !(p.frameCount % drawMod) &&\n            drawAThing(X + (p.width / GRID) * xi, Y + (p.height / GRID) * yi);\n        }\n      }\n    } else {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Be patient. Reload page for a different variation.\" />\n);\n"],"sourceRoot":""}