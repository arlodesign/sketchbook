{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/20.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","a","i","setup","createCanvas","colorMode","HSB","background","noFill","strokeWeight","blendMode","OVERLAY","ellipseMode","CENTER","draw","thisHue","NOISE","noise","frameCount","push","stroke","translate","polarToCartesian","width","height","rotate","bezier","pop","TWO_PI","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"2jBAKA,IAAMA,EAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,EAAG,EAAI,GAGxBC,EAAI,EACJC,EAAI,EAERJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,GACnBR,EAAES,WAAWR,EAAK,GAAK,IACvBD,EAAEU,SACFV,EAAEW,aAAa,GACfX,EAAEY,UAAUZ,EAAEa,SACdb,EAAEc,YAAYd,EAAEe,SAGlBf,EAAEgB,KAAO,WACP,IAEIC,EAFEC,EAAQlB,EAAEmB,MAAMnB,EAAEoB,WAAF,IAAmCjB,GAKvDc,EADEC,EAAQ,EAAI,EACJjB,EACDiB,EAAQ,EAAI,EACXjB,EAAM,EAAI,EAEVA,EAAM,EAAI,EAGtBD,EAAEqB,OACFrB,EAAEsB,OAAOL,EAASb,EA7BD,IA6BiB,GAAK,IACvCJ,EAAEuB,UAAF,MAAAvB,EAAC,EACIwB,YACDxB,EAAEyB,MAAQ,EACVzB,EAAE0B,OAAS,EACXvB,EACCH,EAAEyB,MAAQ,GAAM,EAAIP,IACrB,KAGJlB,EAAE2B,OAAOxB,GACTH,EAAE4B,OACA,EACA,EACC5B,EAAEyB,MAAQP,EAAS,GACnBlB,EAAEyB,MAAQ,GACVzB,EAAEyB,MAAQP,EAAS,EACpBlB,EAAEyB,MAAQ,GACTzB,EAAEyB,MAAQ,EAAKP,EAChB,GAEFlB,EAAE6B,OAEF1B,GAAKH,EAAE8B,OApDU,IAoDY9B,EAAE8B,OApDd,SAqDT9B,EAAE8B,OAAS1B,KACjBA,EAtDe,KAwDbJ,EAAE+B,WAYKC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQjC,OAAQA,O,kCCvEpB,sCAiBMkC,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBnB,IAzBU,SACvBU,EACAC,EACAC,EACAS,EACAN,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACM,EAAQV,EAAOS,GACxC,OAAOC,EAASL,KAAKC,IAAIN,GAASS,EAYxBE,CAAkBb,EAASE,EAAOS,GACtCF,EAXkB,SAACG,EAAQV,EAAOS,GACxC,OAAOC,EAASL,KAAKG,IAAIR,GAASS,EAUxBG,CAAkBb,EAASC,EAAOS,GAC5C,OAAON,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG","file":"component---src-pages-sketch-2019-07-20-js-f7d00373bc58b1d0a592.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const HUE = p.random(0, 1 / 3);\n  const ITERATIONS = 100;\n\n  let a = 0;\n  let i = 1;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n    p.background(HUE, 0.5, 0.9);\n    p.noFill();\n    p.strokeWeight(2);\n    p.blendMode(p.OVERLAY);\n    p.ellipseMode(p.CENTER);\n  };\n\n  p.draw = function() {\n    const NOISE = p.noise(p.frameCount / (ITERATIONS * 100), a);\n\n    let thisHue;\n\n    if (NOISE < 1 / 3) {\n      thisHue = HUE;\n    } else if (NOISE > 2 / 3) {\n      thisHue = HUE + 2 / 3;\n    } else {\n      thisHue = HUE + 1 / 3;\n    }\n\n    p.push();\n    p.stroke(thisHue, i / ITERATIONS, 0.9, 0.2);\n    p.translate(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        a,\n        (p.width / 3) * (1 - NOISE),\n        true\n      )\n    );\n    p.rotate(a);\n    p.bezier(\n      0,\n      0,\n      (p.width * NOISE) / 2,\n      -p.width / 10,\n      (p.width * NOISE) / 2,\n      p.width / 10,\n      (p.width / 2) * NOISE,\n      0\n    );\n    p.pop();\n\n    a += p.TWO_PI / ITERATIONS + p.TWO_PI / ITERATIONS / ITERATIONS;\n    if (a > p.TWO_PI * i) {\n      i++;\n      if (i > ITERATIONS) {\n        p.noLoop();\n      }\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}