{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/05.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","count","margin","HUE","random","COLORS","Array","from","length","_","i","setup","frameRate","createLoop","gif","render","open","createCanvas","width","strokeWeight","rectMode","RADIUS","colorMode","HSB","draw","blendMode","BLEND","background","noFill","HARD_LIGHT","a","map","frameCount","FRAMERATE","FRAMES","TWO_PI","d","sin","centerPoints","polarToCartesian","height","lerp","forEach","cp","j","stroke","x","y","lerpLine","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x1","y1","x2","y2","rate","showFirstDot","Error","l","point"],"mappings":"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","file":"component---src-pages-sketch-2019-07-05-js-f0ba457047ec694ba564.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n// import \"p5.createloop\";\n\nconst sketch = function(p) {\n  const DURATION = 10;\n  const FRAMERATE = 60;\n  const FRAMES = FRAMERATE * DURATION;\n  const QTY = 7;\n  const HUE = p.random(100 / QTY);\n  const COLORS = Array.from({ length: QTY }, (_, i) => HUE + (100 / QTY) * i);\n\n  let count;\n  let margin;\n\n  p.setup = function() {\n    p.frameRate(FRAMERATE);\n    if (p.createLoop) {\n      p.createLoop(DURATION, {\n        gif: { render: false, open: true },\n      });\n    }\n    p.createCanvas(660, 840);\n    count = p.width / 50;\n    margin = p.width * (1 / 8);\n    p.strokeWeight(3);\n    p.rectMode(p.RADIUS);\n    p.colorMode(p.HSB, 100);\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(10);\n\n    p.noFill();\n    p.blendMode(p.HARD_LIGHT);\n\n    const a = p.map((p.frameCount % FRAMES) / 3, 0, FRAMES / 3, 0, p.TWO_PI);\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width - margin * 2);\n\n    let centerPoints = Array.from({ length: COLORS.length }, (_, i) =>\n      polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        a + p.TWO_PI * (i / COLORS.length),\n        d\n      )\n    );\n\n    for (let i = 0; i < 1; i += 1 / count) {\n      const r = p.lerp(margin, p.width / 2 - margin, i);\n\n      centerPoints.forEach((cp, j) => {\n        p.stroke(COLORS[j], 35, 100);\n        const x = p.lerp(cp.x, p.width / 2, i);\n        const y = p.lerp(cp.y, p.width / 2, i);\n        lerpLine(\n          p,\n          x,\n          y,\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            p.map(p.frameCount % FRAMES, 0, FRAMES, 0, p.TWO_PI),\n            p.width / 2 - margin,\n            true\n          ),\n          0.01\n        );\n      });\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}