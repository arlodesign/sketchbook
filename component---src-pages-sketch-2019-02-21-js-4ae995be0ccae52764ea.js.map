{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/21.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","r1Speed","r2Speed","r3Speed","r","g","b","CF","angle","abs","sin","cos","tan","PI","r1","r2","r3","getColor","setup","pixelDensity","createCanvas","background","random","TWO_PI","Array","from","Set","length","color","noStroke","blendMode","HARD_LIGHT","draw","translate","width","height","_polarToCartesian","polarToCartesian","x","y","HANDLE","noLoop","fill","beginShape","vertex","quadraticVertex","endShape","CLOSE","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_7__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_9__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-02-21-js-4ae995be0ccae52764ea.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const CF = [\n    angle => p.abs(p.sin(angle)) * 240,\n    angle => p.abs(p.cos(angle)) * 240,\n    angle => p.abs(p.tan(angle)) * 240,\n    angle => p.abs(p.sin(angle + p.PI)) * 240,\n    angle => p.abs(p.cos(angle + p.PI)) * 240,\n    angle => p.abs(p.tan(angle + p.PI)) * 240,\n    angle => p.abs(p.sin(-angle)) * 240,\n    angle => p.abs(p.cos(-angle)) * 240,\n    angle => p.abs(p.tan(-angle)) * 240,\n    angle => p.abs(p.sin(-angle + p.PI)) * 240,\n    angle => p.abs(p.cos(-angle + p.PI)) * 240,\n    angle => p.abs(p.tan(-angle + p.PI)) * 240,\n  ];\n  let r1 = 0;\n  let r2 = 0;\n  let r3 = 0;\n  let r1Speed;\n  let r2Speed;\n  let r3Speed;\n  let r;\n  let g;\n  let b;\n  let getColor = () => {};\n\n  p.setup = function() {\n    p.pixelDensity(4);\n    p.createCanvas(660, 840);\n    p.background(0);\n    r1Speed = (p.random(0.05, 0.1) / p.TWO_PI) * p.random([-1, 1]);\n    r2Speed = (p.random(0.15, 0.25) / p.TWO_PI) * p.random([-1, 1]);\n    r3Speed = p.random(0.01, 0.015) / p.TWO_PI;\n    while (Array.from(new Set([r, g, b])).length < 3) {\n      r = p.random(CF);\n      g = p.random(CF);\n      b = p.random(CF);\n    }\n    getColor = angle => p.color(r(angle), g(angle), b(angle), 8);\n    p.noStroke();\n    p.blendMode(p.HARD_LIGHT);\n  };\n\n  p.draw = function() {\n    p.translate(p.width / 2, p.height * p.sin(r3));\n    const { x, y } = polarToCartesian(0, 0, r1, 200);\n    const HANDLE = polarToCartesian(x, y, r2, p.sin(r3) * 500);\n    if (p.height * p.sin(r3) < 0 && y < 0 && HANDLE.y < 0) {\n      p.noLoop();\n      return;\n    }\n    p.fill(getColor(r3 * 2));\n    p.beginShape();\n    p.vertex(0, 0);\n    p.quadraticVertex(HANDLE.x, HANDLE.y, x, y);\n    p.endShape(p.CLOSE);\n    r1 += r1Speed;\n    r2 += r2Speed;\n    r3 += r3Speed;\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}