{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/16.js"],"names":["sketch","p","w","h","SIZES","grid","Doodad","x","y","size","this","lines","arc","push","strokeCap","PROJECT","translate","rotate","random","HALF_PI","PI","i","pop","setup","createCanvas","colorMode","HSB","hue","background","stroke","strokeWeight","noFill","floor","width","height","xx","yy","visited","draw","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description"],"mappings":"s8BAGA,IAAMA,EAAS,SAASC,GACtB,IAKIC,EACAC,EALEC,EAAQ,CAAC,EAAG,EAAG,EAAG,GAGpBC,EAAO,GAILC,EATmB,WAUvB,WAAYC,EAAGC,EAAGC,GAChBC,KAAKH,EAVS,GAULA,EACTG,KAAKF,EAXS,GAWLA,EACTE,KAAKD,KAZS,GAYFA,EACZC,KAAKC,MAXK,EAWGF,EAEbC,KAAKE,MAhBgB,mBAmBvBA,IAAA,WACEX,EAAEY,OACFZ,EAAEa,UAAUb,EAAEc,SACdd,EAAEe,UAAUN,KAAKH,EAAIG,KAAKD,KAAO,EAAGC,KAAKF,EAAIE,KAAKD,KAAO,GACzDR,EAAEgB,OAAOhB,EAAEiB,OAAO,CAAC,EAAGjB,EAAEkB,QAASlB,EAAEmB,GAAInB,EAAEkB,QAAUlB,EAAEmB,MACrD,IAAK,IAAIC,EAAI,EAAGA,GAAiB,EAAZX,KAAKD,KAAUY,GAAkB,EAAZX,KAAKD,KAAYC,KAAKC,MAC9DV,EAAEW,KAAKF,KAAKD,KAAO,GAAIC,KAAKD,KAAO,EAAGY,EAAGA,EAAG,EAAGpB,EAAEkB,SAEnDlB,EAAEqB,OA3BmB,KA+BzBrB,EAAEsB,MAAQ,WACRtB,EAAEuB,aAAa,IAAK,KACpBvB,EAAEwB,UAAUxB,EAAEyB,IAAK,KAEnBzB,EAAEwB,UAAUxB,EAAEyB,IAAK,KAEnB,IAAMC,EAAM1B,EAAEiB,OAAO,KACrBjB,EAAE2B,WAAWD,EAAK,GAAI,IACtB1B,EAAE4B,OAAOF,EAAK,GAAI,KAClB1B,EAAE6B,aAAa,GACf7B,EAAE8B,SAEF7B,EAAID,EAAE+B,MAAM/B,EAAEgC,MA1CE,IA2ChB9B,EAAIF,EAAE+B,MAAM/B,EAAEiC,OA3CE,IA6ChB,IAAK,IAAIC,EAAK,EAAGA,EAAKjC,EAAGiC,IAAM,CAC7B9B,EAAKQ,KAAK,IACV,IAAK,IAAIuB,EAAK,EAAGA,EAAKjC,EAAGiC,IACvB/B,EAAK8B,GAAItB,KAAK,CACZN,EAAG4B,EACH3B,EAAG4B,EACHC,SAAS,MAMjBpC,EAAEqC,KAAO,WAAY,IAAD,MACDrC,EAAEiB,QACjB,MAAGqB,OAAH,QAAalC,GAAMmC,QAAO,qBAAGH,YADvB9B,EADU,EACVA,EAAGC,EADO,EACPA,EAINH,EAAKE,GAAGC,GAAG6B,SAAU,WACxB,IACII,EADAhC,EAAOiC,KAAKC,IAAL,MAAAD,KAAYtC,GAGvB,EAAG,CACDqC,GAAU,EACV,IAAK,IAAIN,EAAK5B,EAAG4B,EAAK1B,EAAOF,EAAG4B,IAC9B,IAAK,IAAIC,EAAK5B,EAAG4B,EAAK3B,EAAOD,EAAG4B,KAC1B7B,EAAIE,EAAOP,GAAKM,EAAIC,EAAON,GAAKE,EAAK8B,GAAIC,GAAIC,WAC/CI,GAAU,GAIZA,IACFhC,EAAOiC,KAAKC,IAAL,MAAAD,KAAI,EAAQtC,EAAMoC,QAAO,SAAAI,GAAC,OAAIA,EAAInC,cAEpCgC,GAET,IAAInC,EAAOC,EAAGC,EAAGC,GAEjB,IAAK,IAAI0B,EAAK5B,EAAG4B,EAAK1B,EAAOF,EAAG4B,IAC9B,IAAK,IAAIC,EAAK5B,EAAG4B,EAAK3B,EAAOD,EAAG4B,IAC9B/B,EAAK8B,GAAIC,GAAIC,SAAU,EAtBH,IA2BrB,MAAGE,OAAH,QAAalC,GAAMmC,QAAO,qBAAGH,WAAwBQ,QACxD5C,EAAE6C,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc/C,OAAQA,EAAQgD,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-04-16-js-150046fd34f258bc21fd.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 15;\n  const SIZES = [1, 2, 3, 5];\n  const LINES = 2;\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size * GRID_SIZE;\n      this.lines = size * LINES;\n\n      this.arc();\n    }\n\n    arc() {\n      p.push();\n      p.strokeCap(p.PROJECT);\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\n      for (let i = 0; i <= this.size * 2; i += (this.size * 2) / this.lines) {\n        p.arc(-this.size / 2, -this.size / 2, i, i, 0, p.HALF_PI);\n      }\n      p.pop();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    p.colorMode(p.HSB, 100);\n\n    const hue = p.random(100);\n    p.background(hue, 25, 25);\n    p.stroke(hue, 75, 100);\n    p.strokeWeight(1);\n    p.noFill();\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}