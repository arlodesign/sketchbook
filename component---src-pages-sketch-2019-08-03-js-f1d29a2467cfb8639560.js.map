{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/08/03.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","HUE","random","setup","frameRate","pixelDensity","createCanvas","background","noFill","colorMode","HSB","blendMode","HARD_LIGHT","createLoop","gif","render","open","draw","animLoop","noise1D","noise2D","theta","stroke","map","TWO_PI","push","translate","width","height","rotate","beginShape","a","vertex","endShape","CLOSE","pop","DURATION","frameCount","noLoop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,i6BCnBjC,IAAME,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,IAErBF,EAAEG,MAAQ,WACRH,EAAEI,UAAU,IAERR,GACFI,EAAEK,aAAa,GAGjBL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,WAAW,GACbP,EAAEQ,SACFR,EAAES,UAAUT,EAAEU,IAAK,KACnBV,EAAEW,UAAUX,EAAEY,YAEdZ,EAAEa,WAlBW,GAkBU,CACrBC,MAAKlB,GAAS,CAAEmB,QAAQ,EAAOC,MAAM,MAIzChB,EAAEiB,KAAO,WAAY,IAAD,EACkBjB,EAAEkB,SAA9BC,EADU,EACVA,QAASC,EADC,EACDA,QAASC,EADR,EACQA,MAC1BrB,EAAEsB,OAAOtB,EAAEuB,IAAIF,EAAO,EAAGrB,EAAEwB,OAAQvB,EAAM,GAAIA,EAAM,IAAK,GAAI,IAAK,GACjED,EAAEyB,OACFzB,EAAE0B,UAAF,MAAA1B,EAAC,EACIL,YACDK,EAAE2B,MAAQ,EACV3B,EAAE4B,OAAS,EACXP,EACCrB,EAAE2B,MAAQ,IAAOR,EAAQnB,EAAEd,IAAImC,IAAU,IAC1C,KAGJrB,EAAE6B,OAAOR,GACTrB,EAAE8B,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAI/B,EAAEwB,OAAQO,GAAK,IAAM,CACvB/B,EAAEwB,OAClBxB,EAAEgC,OAAF,MAAAhC,EAAC,EACIL,YACD,EACA,EACAoC,EACAX,EAAQpB,EAAEhB,IAAI+C,GAAI/B,EAAEd,IAAImC,IAAUrB,EAAE2B,OACpC,KAIN3B,EAAEiC,SAASjC,EAAEkC,OACblC,EAAEmC,OAEDvC,GAA2BwC,OAAjBpC,EAAEqC,YAAgCrC,EAAEsC,WAIpC,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcxC,OAAQA,EAAQyC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-08-03-js-f1d29a2467cfb8639560.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 60;\n\nconst sketch = function(p) {\n  const HUE = p.random(80);\n\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.noFill();\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.HARD_LIGHT);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, noise2D, theta } = p.animLoop;\n    p.stroke(p.map(theta, 0, p.TWO_PI, HUE - 20, HUE + 20), 50, 100, 1);\n    p.push();\n    p.translate(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        theta,\n        (p.width / 10) * (noise1D(p.sin(theta)) + 1),\n        true\n      )\n    );\n    p.rotate(theta);\n    p.beginShape();\n    for (let a = 0; a < p.TWO_PI; a += 0.01) {\n      const element = p.TWO_PI;\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          a,\n          noise2D(p.cos(a), p.sin(theta)) * p.width,\n          true\n        )\n      );\n    }\n    p.endShape(p.CLOSE);\n    p.pop();\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}