(window.webpackJsonp=window.webpackJsonp||[]).push([[437],{487:function(n,e,o){"use strict";o.r(e);var t=o(0);new(o.n(t).a)((function(n){var e,o=n.getURLParams().render,t=50*(o?60:1),r=o?1:60,i=t*r,c=0;n.setup=function(){o&&n.pixelDensity(1),n.frameRate(r),n.createCanvas(o?1080:n.windowWidth,o?1080:n.windowHeight,n.WEBGL),n.background(255),n.noSmooth(),e=n.createShader("#define GLSLIFY 1\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\n\nvoid main() {\n  vTexCoord = aTexCoord;\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  positionVec4.xy = positionVec4.xy * 2.0 - 1.0;\n  gl_Position = positionVec4;\n}","precision mediump float;\n#define GLSLIFY 1\n\nvarying vec2 vTexCoord;\n\n#define TWO_PI 6.28318530\n\nuniform float uProgress;\nuniform float uScale;\n\n//\tSimplex 4D Noise\n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\nfloat permute(float x) {\n  return floor(mod(((x * 34.0) + 1.0) * x, 289.0));\n}\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nfloat taylorInvSqrt(float r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip) {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, - 1.0);\n  vec4 p, s;\n  \n  p.xyz = floor(fract(vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz * 2.0 - 1.0) * s.www;\n  \n  return p;\n}\n\nfloat snoise(vec4 v) {\n  const vec2 C = vec2(0.138196601125010504, 0.309016994374947451);\n  \n  vec4 i = floor(v + dot(v, C.yyyy));\n  vec4 x0 = v - i + dot(i, C.xxxx);\n  \n  vec4 i0;\n  \n  vec3 isX = step(x0.yzw, x0.xxx);\n  vec3 isYZ = step(x0.zww, x0.yyz);\n  \n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n  \n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  \n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n  \n  vec4 i3 = clamp(i0, 0.0, 1.0);\n  vec4 i2 = clamp(i0 - 1.0, 0.0, 1.0);\n  vec4 i1 = clamp(i0 - 2.0, 0.0, 1.0);\n  \n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n  \n  i = mod(i, 289.0);\n  float j0 = permute(permute(permute(permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute(permute(permute(permute(i.w + vec4(i1.w, i2.w, i3.w, 1.0)) + i.z + vec4(i1.z, i2.z, i3.z, 1.0)) + i.y + vec4(i1.y, i2.y, i3.y, 1.0)) + i.x + vec4(i1.x, i2.x, i3.x, 1.0));\n  \n  vec4 ip = vec4(1.0 / 294.0, 1.0 / 49.0, 1.0 / 7.0, 0.0);\n  \n  vec4 p0 = grad4(j0, ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n  \n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4, p4));\n  \n  vec3 m0 = max(0.6 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3, x3), dot(x4, x4)), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  \n  return 49.0 * (dot(m0 * m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2))) + dot(m1 * m1, vec2(dot(p3, x3), dot(p4, x4))));\n}\n\nfloat ease(float t) {\n  return t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n}\n\nfloat distort(float x) {\n  return ease(\n    abs(\n      sin(sin(x / 0.113) / 0.35)\n    )\n  );\n}\n\nvec2 polarToCartesian(float x, float y, float a, float d) {\n  return vec2(x + cos(a) * d, y + sin(y) * d);\n}\n\nvoid main() {\n  vec2 coord = vTexCoord;\n  \n  vec2 focusR = polarToCartesian(0.5, 0.5, TWO_PI * uProgress, sqrt(0.5));\n  vec2 focusG = polarToCartesian(0.5, 0.5, TWO_PI * (uProgress + 0.333), sqrt(0.5));\n  vec2 focusB = polarToCartesian(0.5, 0.5, TWO_PI * (uProgress + 0.666), sqrt(0.5));\n  \n  float rScale = uScale * distance(focusR, coord);\n  float gScale = uScale * distance(focusG, coord);\n  float bScale = uScale * distance(focusB, coord);\n  \n  float nr = snoise(vec4(rScale * coord.x, rScale * coord.y, sin(uProgress * TWO_PI), cos(uProgress * TWO_PI)));\n  float ng = snoise(vec4(gScale * coord.x, gScale * coord.y, sin(uProgress * TWO_PI), cos(uProgress * TWO_PI)));\n  float nb = snoise(vec4(bScale * coord.x, bScale * coord.y, sin(uProgress * TWO_PI), cos(uProgress * TWO_PI)));\n  \n  gl_FragColor = vec4(\n    distort(nr * ng),\n    distort(ng * nb),\n    distort(nb * nr),\n    1.0\n  );\n}")},n.draw=function(){c=n.frameCount%i/i,e.setUniform("uProgress",c),e.setUniform("uScale",1.5),n.shader(e),n.rect(0,0,n.width,n.height),o&&n.frameCount<=i+1&&n.frameCount>1&&(n.frameCount%100==0&&console.info("".concat(n.ceil(100*c),"%")),n.save("".concat(String(n.frameCount-1).padStart(String(t*r).length,"0"),".png")))},n.windowResized=function(){o||n.resizeCanvas(n.windowWidth,n.windowHeight)}}),"sketch")}},[[487,0,1]]]);