{"version":3,"sources":["webpack:///./src/pages/sketch/2019/09/09.js"],"names":["sketch","p","myFont","points","HUE","random","preload","loadFont","withPrefix","setup","createCanvas","background","colorMode","HSL","blendMode","HARD_LIGHT","strokeWeight","noFill","createLoop","noiseDetail","draw","theta","animLoop","sampleFactor","TWO_PI","concat","textToPoints","start","cells","DVMesh","map","x","y","voronoi","stroke","sin","abs","cos","forEach","cell","i","beginShape","pt","vertex","endShape","CLOSE","DURATION","frameCount","noLoop","location","path","pathname","description"],"mappings":"w+BAMA,IAEMA,EAAS,SAASC,GACtB,IAGIC,EACAC,EAJEC,EAAMH,EAAEI,OAAO,IAMrBJ,EAAEK,QAAU,WACVJ,EAASD,EAAEM,SAASC,qBAAW,oCAGjCP,EAAEQ,MAAQ,WACRR,EAAES,aAAa,IAAK,KACpBT,EAAEU,WAAW,GACbV,EAAEW,UAAUX,EAAEY,IAAK,KACnBZ,EAAEa,UAAUb,EAAEc,YACdd,EAAEe,aAAa,IACff,EAAEgB,SACFhB,EAAEiB,WApBW,GAoBU,CACrBC,YAAa,MAIjBlB,EAAEmB,KAAO,WAAY,IACXC,EAAUpB,EAAEqB,SAAZD,MACFE,EAAeF,GAAoB,GAAXpB,EAAEuB,QAGhCrB,GADAA,EAAS,IACOsB,OACdvB,EAAOwB,aAAa,UAAW,GA3BrB,IA2BgC,IAAK,CAC7CH,iBAEFrB,EAAOwB,aAAa,SAAU,GAAIC,IAAoB,IAAK,CACzDJ,iBAEFrB,EAAOwB,aAAa,SAAU,GAAIC,IAAwB,IAAK,CAC7DJ,iBAEFrB,EAAOwB,aAAa,QAAS,GAAIC,IAAwB,IAAK,CAC5DJ,iBAEFrB,EAAOwB,aAAa,UAAW,GAAIC,IAAwB,IAAK,CAC9DJ,iBAEFrB,EAAOwB,aAAa,UAAW,GAAIC,IAAwB,IAAK,CAC9DJ,kBAIJ,IACIK,EADO,IAAIC,IAAO1B,EAAO2B,KAAI,kBAAc,CAAd,EAAGC,EAAH,EAAMC,OACtBC,UAEjBhC,EAAEiC,OACAjC,EAAE6B,IAAI7B,EAAEkC,IAAY,EAARd,IAAa,EAAG,EAAGjB,EAAM,GAAIA,EAAM,IAC/C,GACA,IAAMH,EAAEmC,IAAInC,EAAEoC,IAAIhB,IAClB,IAGFO,EAAMU,SAAQ,SAACC,EAAMC,GACnBvC,EAAEwC,aACFF,EAAKD,SAAQ,SAAAI,GAAE,OAAIzC,EAAE0C,OAAF,MAAA1C,EAAC,EAAWyC,OAC/BzC,EAAE2C,SAAS3C,EAAE4C,UAGMC,MAAjB7C,EAAE8C,aACJ9C,EAAEiC,OAAO,GACTjC,EAAEe,aAAa,GACff,EAAEwC,aACFtC,EAAOmC,SAAQ,gBAAGP,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAN,OAAc/B,EAAE0C,OAAOZ,EAAGC,MACzC/B,EAAE2C,SAAS3C,EAAE4C,OACb5C,EAAE+C,YAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcjD,OAAQA,EAAQkD,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-09-09-js-29e56065f12cea1f3082.js","sourcesContent":["import React from \"react\";\nimport { withPrefix } from \"gatsby\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { DVMesh } from \"@thi.ng/geom-voronoi\";\nimport \"p5.createloop\";\n\nconst DURATION = 10;\n\nconst sketch = function(p) {\n  const HUE = p.random(80);\n  const start = 150;\n  const lineHeight = 100;\n  let myFont;\n  let points;\n\n  p.preload = function() {\n    myFont = p.loadFont(withPrefix(\"/assets/Cousine-BoldItalic.otf\"));\n  };\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSL, 100);\n    p.blendMode(p.HARD_LIGHT);\n    p.strokeWeight(0.1);\n    p.noFill();\n    p.createLoop(DURATION, {\n      noiseDetail: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    const { theta } = p.animLoop;\n    const sampleFactor = theta / (p.TWO_PI * 10);\n\n    points = [];\n    points = points.concat(\n      myFont.textToPoints(\"It must\", 50, start, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"be the\", 50, start + lineHeight, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"one we\", 50, start + lineHeight * 2, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"want,\", 50, start + lineHeight * 3, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"or none\", 50, start + lineHeight * 4, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"at all.\", 50, start + lineHeight * 5, 100, {\n        sampleFactor,\n      })\n    );\n\n    let mesh = new DVMesh(points.map(({ x, y }) => [x, y]));\n    let cells = mesh.voronoi();\n\n    p.stroke(\n      p.map(p.sin(theta * 4), -1, 1, HUE - 20, HUE + 20),\n      50,\n      100 * p.abs(p.cos(theta)),\n      25\n    );\n\n    cells.forEach((cell, i) => {\n      p.beginShape();\n      cell.forEach(pt => p.vertex(...pt));\n      p.endShape(p.CLOSE);\n    });\n\n    if (p.frameCount === DURATION * 60) {\n      p.stroke(0);\n      p.strokeWeight(1);\n      p.beginShape();\n      points.forEach(({ x, y }) => p.vertex(x, y));\n      p.endShape(p.CLOSE);\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}