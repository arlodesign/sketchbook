{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/11.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","lines","radius","rotations","setup","createCanvas","background","width","floor","random","stroke","draw","map","sin","frameCount","push","translate","height","r","PI","start","polarToCartesian","end","strokeWeight","rotate","HALF_PI","i","line","TWO_PI","pop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"uIAIMA,EAAS,SAASC,GACtB,IAAIC,EACAC,EACAC,EAEJH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBL,EAAEM,WAAW,KACbJ,EAASF,EAAEO,MAAQ,EAAc,IAAVP,EAAEO,MACzBJ,EAAYH,EAAEQ,MAAMR,EAAES,OAAO,EAAG,IAChCT,EAAEU,OAAO,IAAK,MAGhBV,EAAEW,KAAO,WACPV,EAAQD,EAAEY,IAAIZ,EAAEa,IAAIb,EAAEc,WAAa,MAAQ,EAAG,EAAG,EAAG,IACpDd,EAAEM,WAAW,GAEbN,EAAEe,OACFf,EAAEgB,UAAUhB,EAAEO,MAAQ,EAAGP,EAAEiB,OAAS,GAEpC,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAEmB,GAAID,GAAKlB,EAAEmB,GAAKlB,EAAO,CAC3C,IAAMmB,EAAQC,YAAiB,EAAG,EAAGH,EAAGhB,GAAQ,GAC1CoB,EAAM,EAAEF,EAAM,GAAIA,EAAM,IAE9BpB,EAAEuB,aAAavB,EAAEY,IAAIQ,EAAM,GAAI,EAAGlB,EAAQ,EAAG,GAAG,IAChDF,EAAEwB,OAAOxB,EAAEyB,QAAUxB,GAErB,IAAK,IAAIyB,EAAI,EAAGA,EAAIvB,EAAWuB,IAC7B1B,EAAE2B,KAAF,MAAA3B,EAAUoB,EAAR,OAAkBE,IACpBtB,EAAEwB,OAAOxB,EAAE4B,OAASzB,GAIxBH,EAAE6B,QAIS,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc/B,OAAQA,EAAQgC,KAAMD,EAASE,SAAUC,YAAY,O,iCC1CrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKzB,IAAIuB,GAASC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUJ,KAAKC,IAAIH,GAASQ,EAChCI,EAAIL,EAAUL,KAAKzB,IAAIuB,GAASS,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB3B,IAzBU,SACvBqB,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASN,EAAOC,GACtCW,EAAIR,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-04-11-js-396c1855a95d1100e263.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let lines;\n  let radius;\n  let rotations;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    radius = p.width / 2 - p.width * 0.05;\n    rotations = p.floor(p.random(3, 6));\n    p.stroke(255, 128);\n  };\n\n  p.draw = function() {\n    lines = p.map(p.sin(p.frameCount / 1000), -1, 1, 3, 50);\n    p.background(0);\n\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n\n    for (let r = 0; r < p.PI; r += p.PI / lines) {\n      const start = polarToCartesian(0, 0, r, radius, true);\n      const end = [-start[0], start[1]];\n\n      p.strokeWeight(p.map(start[1], 0, radius, 0, 5, true));\n      p.rotate(p.HALF_PI / lines);\n\n      for (let i = 0; i < rotations; i++) {\n        p.line(...start, ...end);\n        p.rotate(p.TWO_PI / rotations);\n      }\n    }\n\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}