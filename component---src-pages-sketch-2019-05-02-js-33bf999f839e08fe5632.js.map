{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/02.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","a","TWO_PI","setup","createCanvas","stroke","strokeWeight","background","draw","FY","map","cos","height","polarToCartesian","width","sin","x","y","lerpLine","noise","frameCount","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","Math","distance","center","polarToCartesianX","polarToCartesianY","x1","y1","x2","y2","rate","showFirstDot","Error","l","random","point","lerp"],"mappings":"4FAAA,gFAMMA,EAAS,SAASC,GACtB,IAAIC,EAAID,EAAEE,OAEVF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,OAAO,GACTL,EAAEM,aAAa,KACfN,EAAEO,WAAW,MAGfP,EAAEQ,KAAO,WACP,IAAMC,EAAKT,EAAEU,IAAIV,EAAEW,IAAIV,IAAK,EAAG,EAAG,EAAGD,EAAEY,QADrB,EAGDC,YACfb,EAAEc,MAAQ,EACVL,EACAR,EACAD,EAAEU,KAAKV,EAAEe,IAAQ,GAAJd,IAAU,EAAG,EAAG,EAAGD,EAAEc,QAJ5BE,EAHU,EAGVA,EAAGC,EAHO,EAGPA,EAOXC,YACElB,EACAA,EAAEc,MAAQ,EACVL,EACAO,EACAC,EACAjB,EAAEmB,MAAMnB,EAAEoB,WAAa,GAAInB,GAAK,IAChC,IAGFA,GAAKD,EAAEE,OAAS,KACZ,GAAKF,EAAEqB,WAUAC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQvB,OAAQA,O,kCC3CpB,sCAiBMwB,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMb,EAAIQ,EAAUM,KAAKnB,IAAIe,GAASC,EAChCV,EAAIQ,EAAUK,KAAKf,IAAIW,GAASE,EACtC,OAAOC,EAAU,CAACb,EAAGC,GAAK,CAAED,IAAGC,MAIlBJ,IAzBU,SACvBW,EACAC,EACAC,EACAK,EACAF,QACG,IADHA,OAAU,GAEV,IAAMb,EAbkB,SAACgB,EAAQN,EAAOK,GACxC,OAAOC,EAASF,KAAKnB,IAAIe,GAASK,EAYxBE,CAAkBT,EAASE,EAAOK,GACtCd,EAXkB,SAACe,EAAQN,EAAOK,GACxC,OAAOC,EAASF,KAAKf,IAAIW,GAASK,EAUxBG,CAAkBT,EAASC,EAAOK,GAC5C,OAAOF,EAAU,CAACb,EAAGC,GAAK,CAAED,IAAGC,O,oCCflB,aAASjB,EAAGmC,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChBxC,EAAE2C,SAAWD,GAAK1C,EAAE4C,MAAM5C,EAAE6C,KAAKV,EAAIE,EAAIK,GAAI1C,EAAE6C,KAAKT,EAAIE,EAAII","file":"component---src-pages-sketch-2019-05-02-js-33bf999f839e08fe5632.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  let a = p.TWO_PI;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.stroke(0);\n    p.strokeWeight(0.25);\n    p.background(255);\n  };\n\n  p.draw = function() {\n    const FY = p.map(p.cos(a), -1, 1, 0, p.height);\n\n    const { x, y } = polarToCartesian(\n      p.width / 3,\n      FY,\n      a,\n      p.map(-p.sin(a * 13), -1, 1, 0, p.width)\n    );\n\n    lerpLine(\n      p,\n      p.width / 3,\n      FY,\n      x,\n      y,\n      p.noise(p.frameCount / 50, a) / 10,\n      false\n    );\n\n    a -= p.TWO_PI / 10000;\n    a < 0 && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}