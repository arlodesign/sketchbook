{"version":3,"sources":["webpack:///./src/pages/sketch/2019/09/08.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js"],"names":["RENDER","process","DEV","sketch","p","points","bounds","hueOffset","random","TWO_PI","lightnessOffset","constrainTwoPI","v","Point","x","y","this","centerX","centerY","dist","width","dir","offset","update","animLoop","noise2D","theta","polarToCartesian","getArray","setup","frameRate","createCanvas","colorMode","HSL","background","createLoop","gif","render","open","noiseDetail","noFill","blendMode","HARD_LIGHT","height","Array","fill","map","draw","forEach","pt","translate","cells","DVMesh","voronoi","stroke","abs","sin","cos","ease","cell","i","beginShape","vertex","endShape","CLOSE","DURATION","frameCount","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","radiusX","radiusY","asArray","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"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","file":"component---src-pages-sketch-2019-09-08-js-fb65ec6349451e2ef6df.js","sourcesContent":["import React from \"react\";\nimport { DVMesh } from \"@thi.ng/geom-voronoi\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport { easeInQuad as ease } from \"~lib/easing\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 60;\n\nconst sketch = function(p) {\n  let points;\n  let bounds;\n\n  const hueOffset = p.random(p.TWO_PI);\n  const lightnessOffset = p.random(p.TWO_PI);\n\n  const constrainTwoPI = v => (v > p.TWO_PI ? v - p.TWO_PI : v);\n\n  class Point {\n    constructor(x, y) {\n      this.centerX = x;\n      this.centerY = y;\n      this.x = x;\n      this.y = y;\n      this.dist = p.random(p.width / 2);\n      this.dir = p.random([1, -1]);\n      this.offset = p.random(p.TWO_PI);\n    }\n\n    update() {\n      const { noise2D, theta } = p.animLoop;\n      const { x, y } = polarToCartesian(\n        this.centerX,\n        this.centerY,\n        (this.offset + theta) * this.dir,\n        this.dist * noise2D(this.x / 1000, this.y / 1000)\n      );\n      this.x = x;\n      this.y = y;\n    }\n\n    getArray() {\n      return [this.x, this.y];\n    }\n  }\n\n  p.setup = function() {\n    p.frameRate(60);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 1);\n    p.background(hueOffset, 1, lightnessOffset);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseDetail: 0.1,\n    });\n    p.noFill();\n    p.blendMode(p.HARD_LIGHT);\n\n    bounds = [\n      [-p.width / 2, -p.height / 2],\n      [p.width / 2, -p.height / 2],\n      [p.width / 2, p.height / 2],\n      [-p.width / 2, p.height / 2],\n    ];\n\n    points = new Array(20)\n      .fill()\n      .map(\n        () =>\n          new Point(\n            ...polarToCartesian(0, 0, p.random(p.TWO_PI), p.width / 10, true)\n          )\n      );\n  };\n\n  p.draw = function() {\n    const { theta } = p.animLoop;\n    points.forEach(pt => pt.update());\n    p.translate(p.width / 2, p.height / 2);\n\n    let mesh = new DVMesh(points.map(pt => pt.getArray()));\n    let cells = mesh.voronoi(bounds);\n\n    p.stroke(\n      p.abs(p.sin(constrainTwoPI(theta + hueOffset))),\n      1,\n      p.abs(p.cos(constrainTwoPI(theta * 4 + lightnessOffset))),\n      ease(p.map(theta, 0, p.TWO_PI, 1, 0)) / 3\n    );\n\n    cells.forEach((cell, i) => {\n      p.beginShape();\n      cell.forEach(pt => p.vertex(...pt));\n      p.endShape(p.CLOSE);\n    });\n\n    p.frameCount === DURATION * 60 && !RENDER && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n"],"sourceRoot":""}