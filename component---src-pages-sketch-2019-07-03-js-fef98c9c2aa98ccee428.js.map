{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/03.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","count","margin","COLORS","setup","createCanvas","width","strokeWeight","draw","blendMode","BLEND","background","fill","noStroke","circle","height","noFill","MULTIPLY","a","map","frameCount","TWO_PI","d","sin","centerPoints","polarToCartesian","i","r","lerp","forEach","cp","j","stroke","x","y","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"8IAIMA,EAAS,SAASC,GACtB,IACIC,EACAC,EAFEC,EAAS,CAAC,MAAO,QAAS,QAIhCH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBJ,EAAQD,EAAEM,MAAQ,GAClBJ,EAASF,EAAEM,OAAS,EAAI,GACxBN,EAAEO,aAAa,IAGjBP,EAAEQ,KAAO,WACPR,EAAES,UAAUT,EAAEU,OACdV,EAAEW,WAAW,GACbX,EAAEY,KAAK,KACPZ,EAAEa,WACFb,EAAEc,OAAOd,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGf,EAAEM,MAAQJ,EAAS,GAEvDF,EAAEgB,SACFhB,EAAES,UAAUT,EAAEiB,UAUd,IARA,IAAMC,EAAIlB,EAAEmB,IAAInB,EAAEoB,WAAa,KAAM,EAAG,KAAM,EAAGpB,EAAEqB,QAC7CC,EAAItB,EAAEmB,IAAInB,EAAEuB,IAAQ,EAAJL,IAAS,EAAG,EAAG,EAAGlB,EAAEM,MAAQ,EAAIJ,GAElDsB,EAAe,CACjBC,YAAiBzB,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAGI,GAC/CG,YAAiBzB,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAIlB,EAAEqB,QAAU,EAAI,GAAIC,GACpEG,YAAiBzB,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAIlB,EAAEqB,QAAU,EAAI,GAAIC,IAhBpD,WAkBTI,GACP,IAAMC,EAAI3B,EAAE4B,KAAK,EAAG5B,EAAEM,MAAQJ,EAAQwB,GAEtCF,EAAaK,SAAQ,SAACC,EAAIC,GACxB/B,EAAEgC,OAAO7B,EAAO4B,IAChB,IAAME,EAAIjC,EAAE4B,KAAKE,EAAGG,EAAGjC,EAAEM,MAAQ,EAAGoB,GAC9BQ,EAAIlC,EAAE4B,KAAKE,EAAGI,EAAGlC,EAAEe,OAAS,EAAGW,GACrC1B,EAAEc,OAAOmB,EAAGC,EAAGP,OAPVD,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAIzB,EAAQ,EAA/ByB,KAaE,0BAAGS,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcpC,OAAQA,EAAQqC,KAAMD,EAASE,SAAUC,YAAY,O,iCChDrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKpB,IAAIkB,GAASC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMlB,EAAIc,EAAUJ,KAAKC,IAAIH,GAASQ,EAChCf,EAAIc,EAAUL,KAAKpB,IAAIkB,GAASS,EACtC,OAAOC,EAAU,CAAClB,EAAGC,GAAK,CAAED,IAAGC,MAIlBT,IAzBU,SACvBsB,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMlB,EAAIM,EAAkBQ,EAASN,EAAOC,GACtCR,EAAIW,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAAClB,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-07-03-js-fef98c9c2aa98ccee428.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const COLORS = [\"red\", \"green\", \"blue\"];\n  let count;\n  let margin;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    count = p.width / 20;\n    margin = p.width * (1 / 6);\n    p.strokeWeight(2);\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0);\n    p.fill(255);\n    p.noStroke();\n    p.circle(p.width / 2, p.height / 2, p.width - margin / 2);\n\n    p.noFill();\n    p.blendMode(p.MULTIPLY);\n\n    const a = p.map(p.frameCount % 1200, 0, 1200, 0, p.TWO_PI);\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width / 2 - margin);\n\n    let centerPoints = [\n      polarToCartesian(p.width / 2, p.height / 2, a, d),\n      polarToCartesian(p.width / 2, p.height / 2, a + p.TWO_PI * (1 / 3), d),\n      polarToCartesian(p.width / 2, p.height / 2, a + p.TWO_PI * (2 / 3), d),\n    ];\n    for (let i = 0; i < 1; i += 1 / count) {\n      const r = p.lerp(6, p.width - margin, i);\n\n      centerPoints.forEach((cp, j) => {\n        p.stroke(COLORS[j]);\n        const x = p.lerp(cp.x, p.width / 2, i);\n        const y = p.lerp(cp.y, p.height / 2, i);\n        p.circle(x, y, r);\n      });\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}