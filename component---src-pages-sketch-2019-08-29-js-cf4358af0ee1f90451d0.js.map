{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/29.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","setup","frameRate","createCanvas","background","colorMode","HSB","blendMode","HARD_LIGHT","createLoop","noiseRadius","draw","animLoop","noise1D","theta","axis","polarToCartesian","width","height","a","TWO_PI","stroke","map","lerpLine","DURATION","frameCount","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","distance","center","polarToCartesianX","polarToCartesianY","x1","y1","x2","y2","rate","showFirstDot","Error","l","random","point","lerp"],"mappings":"mlBAOA,IAGMA,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACRD,EAAEE,UAAU,IAEZF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,WAAW,GACbJ,EAAEK,UAAUL,EAAEM,IAAK,GACnBN,EAAEO,UAAUP,EAAEQ,YAEdR,EAAES,WAZW,IAYU,CACrBC,YAAa,MAIjBV,EAAEW,KAAO,WAUP,IAVmB,IAAD,EACSX,EAAEY,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MACXC,EAAOC,YACXhB,EAAEiB,MAAQ,EACVjB,EAAEkB,OAAS,EACXJ,EACAD,EAAQ,MAASb,EAAEiB,MAAQ,IAC3B,GAGOE,EAAI,EAAGA,EAAInB,EAAEoB,OAAQD,GAAKnB,EAAEoB,OA1B3B,EA2BRpB,EAAEqB,OAAOR,EAAQ,KAAQ,EAAGb,EAAEsB,IAAIT,EAAQM,EAAI,MAAO,EAAG,EAAG,EAAG,GAAI,EAAG,IACrEI,IAAQ,WAAR,GACEvB,GADF,SAEKe,GAFL,EAGKC,IAAgB,WAAhB,IACED,GADF,QAEO,EAARD,EAAYK,EACZN,EAAQM,EAAI,KAAOnB,EAAEiB,OACrB,MAPJ,CASEjB,EAAEsB,IAAIT,EAAQM,EAAI,MAAO,EAAG,EAAG,IAAM,OAGxBK,OAAjBxB,EAAEyB,YAAgCzB,EAAE0B,WAUzBC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ5B,OAAQA,O,kCCtDpB,sCAiBM6B,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBtB,IAzBU,SACvBa,EACAC,EACAC,EACAS,EACAN,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACM,EAAQV,EAAOS,GACxC,OAAOC,EAASL,KAAKC,IAAIN,GAASS,EAYxBE,CAAkBb,EAASE,EAAOS,GACtCF,EAXkB,SAACG,EAAQV,EAAOS,GACxC,OAAOC,EAASL,KAAKG,IAAIR,GAASS,EAUxBG,CAAkBb,EAASC,EAAOS,GAC5C,OAAON,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,oCCflB,aAAStC,EAAG4C,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChBjD,EAAEoD,SAAWD,GAAKnD,EAAEqD,MAAMrD,EAAEsD,KAAKV,EAAIE,EAAIK,GAAInD,EAAEsD,KAAKT,EAAIE,EAAII","file":"component---src-pages-sketch-2019-08-29-js-cf4358af0ee1f90451d0.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst DURATION = 120;\nconst LINES = 3;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.frameRate(60);\n\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSB, 2);\n    p.blendMode(p.HARD_LIGHT);\n\n    p.createLoop(DURATION, {\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n    const axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      theta,\n      noise1D(0.01) * (p.width / 2),\n      true\n    );\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / LINES) {\n      p.stroke(noise1D(0.05) + 1, p.map(noise1D(a / 300), -1, 1, 1, 2), 2, 0.5);\n      lerpLine(\n        p,\n        ...axis,\n        ...polarToCartesian(\n          ...axis,\n          theta * 6 + a,\n          noise1D(a / 100) * p.width,\n          true\n        ),\n        p.map(noise1D(a / 400), -1, 1, 0.01, 0.1)\n      );\n    }\n    p.frameCount === DURATION * 60 && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}