{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/14.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","RENDER","getURLParams","render","H","random","START","TWO_PI","coord","setup","frameRate","noSmooth","createCanvas","background","colorMode","HSB","noFill","createLoop","SCALE","gif","open","noiseRadius","draw","animLoop","progress","theta","noise1D","bezierPoints","startPoint","polarToCartesian","width","height","endPoint","push","bezierPoint","map","cp","stroke","sin","cos","length","curve","slice","flat","frameCount","console","info","floor","DURATION","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2020-02-14-js-133a4997f4a0d9ee1036.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const RATE = 60;\n  const H = p.random();\n  const START = p.random(p.TWO_PI);\n  const SCALE = 1000;\n  const DURATION = SCALE / 2;\n\n  let coord = [];\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.noSmooth();\n    p.createCanvas(660, 840);\n    p.background(64);\n    p.colorMode(p.HSB, 1);\n    p.noFill();\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { progress, theta, noise1D } = p.animLoop;\n    let bezierPoints = [];\n\n    const startPoint = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      START + theta,\n      p.width / 2 - p.width / 10,\n      true\n    );\n    const endPoint = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      START + theta * 4,\n      p.width / 2 - p.width / 10,\n      true\n    );\n\n    bezierPoints.push(startPoint);\n    bezierPoints.push(\n      polarToCartesian(\n        ...startPoint,\n        theta * SCALE,\n        p.width * noise1D(0.07),\n        true\n      )\n    );\n    bezierPoints.push(\n      polarToCartesian(\n        ...endPoint,\n        -theta * SCALE,\n        p.width * noise1D(0.08),\n        true\n      )\n    );\n    bezierPoints.push(endPoint);\n\n    coord.push([\n      p.bezierPoint(...bezierPoints.map(cp => cp[0]), progress),\n      p.bezierPoint(...bezierPoints.map(cp => cp[1]), progress),\n    ]);\n\n    p.stroke(\n      H,\n      p.map(p.sin(theta * SCALE), -1, 1, 0, 1),\n      p.map(p.cos(theta * SCALE), -1, 1, 1, 0)\n    );\n\n    if (coord.length > 3) {\n      p.curve(...coord.slice(-4).flat());\n    }\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (!RENDER && p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}