{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/02.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js","webpack:///./src/lib/easing.js"],"names":["sketch","p","lineLength","DRAFT","getURLParams","draft","HUE","random","TWO_PI","START","RATE","setup","frameRate","pixelDensity","createCanvas","createLoop","noiseRadius","background","colorMode","HSL","blendMode","SOFT_LIGHT","width","draw","animLoop","noise","theta","progress","translate","polarToCartesian","height","stroke","map","HALF_PI","lerpLine","PI","easeInQuart","frameCount","noLoop","console","log","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","max","dist","l","point","lerp","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"o/BAOA,IAAMA,EAAS,SAASC,GACtB,IAMIC,EANEC,EAAQF,EAAEG,eAAeC,MACzBC,EAAML,EAAEM,OAAON,EAAEO,QACjBC,EAAQR,EAAEM,OAAON,EAAEO,QAEnBE,EAAOP,EAAQ,GAAK,GAI1BF,EAAEU,MAAQ,WACRV,EAAEW,UAAUF,GACZT,EAAEY,aAAaV,EAAQ,EAAI,GAC3BF,EAAEa,aAAa,IAAK,KACpBb,EAAEc,WATa,IASQ,CAAEC,YAAa,IACtCf,EAAEgB,WAAW,IACbhB,EAAEiB,UAAUjB,EAAEkB,IAAKlB,EAAEO,QACrBP,EAAEmB,UAAUnB,EAAEoB,YAEdnB,EAAaD,EAAEqB,MAAQ,GAGzBrB,EAAEsB,KAAO,WAAY,IAAD,EACiBtB,EAAEuB,SAA7BC,EADU,EACVA,MAAOC,EADG,EACHA,MAAOC,EADJ,EACIA,SAEtB1B,EAAE2B,UAAF,MAAA3B,EAAC,EACI4B,YACD5B,EAAEqB,MAAQ,EACVrB,EAAE6B,OAAS,EACXJ,EAAQjB,EACPR,EAAEqB,MAAQ,EAAKG,KAChB,KAGJxB,EAAE8B,OAAOzB,EAAKoB,EAAOzB,EAAE+B,IAAIP,KAAU,EAAG,EAAGxB,EAAEgC,QAAShC,EAAEO,QAASkB,GACjEQ,IAAQ,WAAR,GACEjC,GADF,SAEK4B,YAAiB,EAAG,EAAW,GAARH,EAAajB,EAAOP,EAAa,GAAG,IAFhE,EAGK2B,YACD,EACA,EACQ,GAARH,EAAazB,EAAEkC,GAAK1B,EACpBP,EAAa,GACb,IARJ,CAUEkC,sBAAYT,MAEd1B,EAAEoC,aA1Ca,IA0Ca3B,GAAQT,EAAEqC,SACtCrC,EAAEoC,WAAa,KAAQ,GACrBE,QAAQC,IAAOvC,EAAEoC,WAAjB,MA5Ca,IA4C+B3B,KAInC,0BAAG+B,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAczC,OAAQA,EAAQ0C,KAAMD,EAASE,SAAUC,YAAY,O,kCC5DrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB/B,IAzBU,SACvByB,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,oCCZlB,aACb3D,EACA4D,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QACA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAIR,IAFA,IAAMC,EAAWnB,KAAKoB,IAAIJ,EAAM,IAAOhE,EAAEqE,KAAKT,EAAIC,EAAIC,EAAIC,IAEjDO,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYL,KACXC,GAASlE,EAAEM,SAAWgE,IAAOJ,IAChClE,EAAEuE,MAAMvE,EAAEwE,KAAKZ,EAAIE,EAAIQ,GAAItE,EAAEwE,KAAKX,EAAIE,EAAIO,M,kCC3BhD,2kBAGA,IAAMG,EAAS,SAAAC,GAAC,OAAIA,GAGdC,EAAa,SAAAD,GAAC,OAAIA,EAAIA,GAGtBE,EAAc,SAAAF,GAAC,OAAIA,GAAK,EAAIA,IAG5BG,EAAgB,SAAAH,GAAC,OAAKA,EAAI,GAAM,EAAIA,EAAIA,GAAU,EAAI,EAAIA,GAAKA,EAAlB,GAG7CI,EAAc,SAAAJ,GAAC,OAAIA,EAAIA,EAAIA,GAG3BK,EAAe,SAAAL,GAAC,QAAMA,EAAIA,EAAIA,EAAI,GAGlCM,EAAiB,SAAAN,GAAC,OACtBA,EAAI,GAAM,EAAIA,EAAIA,EAAIA,GAAKA,EAAI,IAAM,EAAIA,EAAI,IAAM,EAAIA,EAAI,GAAK,GAG5DvC,EAAc,SAAAuC,GAAC,OAAIA,EAAIA,EAAIA,EAAIA,GAG/BO,EAAe,SAAAP,GAAC,OAAI,KAAMA,EAAIA,EAAIA,EAAIA,GAGtCQ,EAAiB,SAAAR,GAAC,OACtBA,EAAI,GAAM,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,EAAI,IAAMA,EAAIA,EAAIA,EAAIA,GAGhDS,EAAc,SAAAT,GAAC,OAAIA,EAAIA,EAAIA,EAAIA,EAAIA,GAGnCU,EAAe,SAAAV,GAAC,OAAI,IAAMA,EAAIA,EAAIA,EAAIA,EAAIA,GAG1CW,EAAiB,SAAAX,GAAC,OACtBA,EAAI,GAAM,GAAKA,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,EAAI,KAAOA,EAAIA,EAAIA,EAAIA,EAAIA","file":"component---src-pages-sketch-2020-01-02-js-a578e13f742f6218b278.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\nimport { easeInQuart } from \"~lib/easing\";\n\nconst sketch = function(p) {\n  const DRAFT = p.getURLParams().draft;\n  const HUE = p.random(p.TWO_PI);\n  const START = p.random(p.TWO_PI);\n  const DURATION = 360;\n  const RATE = DRAFT ? 30 : 60;\n\n  let lineLength;\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.pixelDensity(DRAFT ? 1 : 2);\n    p.createCanvas(660, 840);\n    p.createLoop(DURATION, { noiseRadius: 2 });\n    p.background(32);\n    p.colorMode(p.HSL, p.TWO_PI);\n    p.blendMode(p.SOFT_LIGHT);\n\n    lineLength = p.width / 2;\n  };\n\n  p.draw = function() {\n    const { noise, theta, progress } = p.animLoop;\n\n    p.translate(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        theta + START,\n        (p.width / 2) * noise(),\n        true\n      )\n    );\n    p.stroke(HUE, theta, p.map(noise(), -1, 1, p.HALF_PI, p.TWO_PI), theta);\n    lerpLine(\n      p,\n      ...polarToCartesian(0, 0, theta * 13 - START, lineLength / 2, true),\n      ...polarToCartesian(\n        0,\n        0,\n        theta * 13 + p.PI - START,\n        lineLength / 2,\n        true\n      ),\n      easeInQuart(progress)\n    );\n    p.frameCount === DURATION * RATE && p.noLoop();\n    p.frameCount % 100 === 0 &&\n      console.log(`${p.frameCount} / ${DURATION * RATE}`);\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n"],"sourceRoot":""}