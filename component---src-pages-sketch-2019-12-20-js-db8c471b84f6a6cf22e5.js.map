{"version":3,"sources":["webpack:///./src/pages/sketch/2019/12/20.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","margin","gap","RENDER","getURLParams","render","COLORS","shuffle","setup","pixelDensity","frameRate","createCanvas","background","createLoop","gif","open","noiseRadius","strokeWeight","floor","width","height","draw","theta","animLoop","blendMode","BLEND","MULTIPLY","forEach","c","i","stroke","l","yy","polarToCartesianEllipse","cos","sin","b1x","x","b1y","y","b2x","b2y","bezier","map","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","centerX","centerY","radiusX","radiusY","asArray","polarToCartesian"],"mappings":"6FAAA,qEAKMA,EAAS,SAASC,GACtB,IAIIC,EACAC,EALEC,EAASH,EAAEI,eAAeC,OAC1BC,EAASN,EAAEO,QAAQ,CAAC,OAAQ,UAAW,WAM7CP,EAAEQ,MAAQ,WACRR,EAAES,aAAa,GACfT,EAAEU,UAAU,IAEZV,EAAEW,aAAa,IAAK,KACpBX,EAAEY,WAAW,KACbZ,EAAEa,WAAW,GAAI,CACfC,MAAKX,GAAS,CAAEE,QAAQ,EAAOU,MAAM,GACrCC,YAAa,KAEfhB,EAAEiB,aAAa,GAEfhB,EAASD,EAAEkB,MAAgB,IAAVlB,EAAEmB,OACnBjB,GAAOF,EAAEoB,OAAS,EAAInB,GAlBV,KAqBdD,EAAEqB,KAAO,WAAY,IACXC,EAAUtB,EAAEuB,SAAZD,MACRtB,EAAEwB,UAAUxB,EAAEyB,OACdzB,EAAEY,WAAW,KACbZ,EAAEwB,UAAUxB,EAAE0B,UAEdpB,EAAOqB,SAAQ,SAACC,EAAGC,GACjB7B,EAAE8B,OAAOF,GAIT,IAFA,IAAIG,EAAI,EAECC,EAAK/B,EAAQ+B,EAAKhC,EAAEoB,OAASnB,EAAQ+B,GAAM9B,EAAK,CAAC,IAAD,EAC5B+B,YACzBjC,EAAEmB,MAAQ,EACVnB,EAAEoB,OAAS,EACXE,GAASS,EAAI,GAAKF,EAAI,EACX,IAAX7B,EAAEoB,OAAgBpB,EAAEkC,IAAY,EAARZ,GACvBtB,EAAEmB,MAAQ,EAAKnB,EAAEmC,IAAIb,IALbc,EAD4C,EAC/CC,EAAWC,EADoC,EACvCC,EADuC,EAS5BN,YACzBjC,EAAEmB,MAAQ,EACVnB,EAAEoB,OAAS,EACXE,GAASS,EAAI,GAAKF,EAAI,EACX,IAAX7B,EAAEoB,QAAiBpB,EAAEkC,IAAY,EAARZ,GACxBtB,EAAEmB,MAAQ,GAAMnB,EAAEmC,IAAIb,IALdkB,EAT4C,EAS/CH,EAAWI,EAToC,EASvCF,EAOhBvC,EAAE0C,OACAzC,EACA+B,GAAMH,EAAI,GACVO,EACApC,EAAE2C,IAAI3C,EAAEmC,IAAIb,IAAS,EAAG,EAAGgB,EAAKN,GAChCQ,EACAxC,EAAE2C,IAAI3C,EAAEmC,IAAIb,IAAS,EAAG,EAAGmB,EAAKT,GAChChC,EAAEmB,MAAQlB,EACV+B,GAAMH,EAAI,IAGZE,UAMO,0BAAGa,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc7C,OAAQA,EAAQ8C,KAAMD,EAASE,SAAUC,YAAY,O,kCC1ErE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKlB,IAAIgB,GAASC,GAE9BE,EAAoB,SAACJ,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKjB,IAAIe,GAASC,GAsB9BlB,EAA0B,SAC9BqB,EACAC,EACAL,EACAM,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMrB,EAAIiB,EAAUF,KAAKlB,IAAIgB,GAASM,EAChCjB,EAAIgB,EAAUH,KAAKjB,IAAIe,GAASO,EACtC,OAAOC,EAAU,CAACrB,EAAGE,GAAK,CAAEF,IAAGE,MAIlBoB,IAzBU,SACvBL,EACAC,EACAL,EACAC,EACAO,QACG,IADHA,OAAU,GAEV,IAAMrB,EAAIW,EAAkBM,EAASJ,EAAOC,GACtCZ,EAAIc,EAAkBE,EAASL,EAAOC,GAC5C,OAAOO,EAAU,CAACrB,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2019-12-20-js-db8c471b84f6a6cf22e5.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { polarToCartesianEllipse } from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const COLORS = p.shuffle([\"cyan\", \"magenta\", \"yellow\"]);\n  const LINES = 150;\n\n  let margin;\n  let gap;\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.frameRate(30);\n\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.createLoop(20, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n    p.strokeWeight(2);\n\n    margin = p.floor(p.width * 0.03);\n    gap = (p.height - 2 * margin) / LINES;\n  };\n\n  p.draw = function() {\n    const { theta } = p.animLoop;\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.MULTIPLY);\n\n    COLORS.forEach((c, i) => {\n      p.stroke(c);\n\n      let l = 0;\n\n      for (let yy = margin; yy < p.height - margin; yy += gap) {\n        const { x: b1x, y: b1y } = polarToCartesianEllipse(\n          p.width / 2,\n          p.height / 2,\n          theta * (l % 5) + i / 5,\n          p.height * 0.02 * p.cos(theta * 5),\n          (p.width / 2) * p.sin(theta)\n        );\n\n        const { x: b2x, y: b2y } = polarToCartesianEllipse(\n          p.width / 2,\n          p.height / 2,\n          theta * (l % 5) + i / 5,\n          p.height * 0.02 * -p.cos(theta * 5),\n          (p.width / 2) * -p.sin(theta)\n        );\n        p.bezier(\n          margin,\n          yy + (i - 1),\n          b1x,\n          p.map(p.sin(theta), -1, 1, b1y, yy),\n          b2x,\n          p.map(p.sin(theta), -1, 1, b2y, yy),\n          p.width - margin,\n          yy + (i - 1)\n        );\n\n        l++;\n      }\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}