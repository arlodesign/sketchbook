{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/29.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","setup","frameRate","createCanvas","background","colorMode","HSB","blendMode","HARD_LIGHT","createLoop","noiseRadius","draw","_p$animLoop","animLoop","noise1D","theta","axis","polarToCartesian","width","height","a","TWO_PI","stroke","map","lerpLine","apply","concat","DURATION","frameCount","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","Error","l","random","point","lerp"],"mappings":"0JASMA,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACRD,EAAEE,UAAU,IAEZF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,WAAW,GACbJ,EAAEK,UAAUL,EAAEM,IAAK,GACnBN,EAAEO,UAAUP,EAAEQ,YAEdR,EAAES,WAZW,IAYU,CACrBC,YAAa,MAIjBV,EAAEW,KAAO,WAUP,IAVkB,IAAAC,EACSZ,EAAEa,SAArBC,EADUF,EACVE,QAASC,EADCH,EACDG,MACXC,EAAOC,YACXjB,EAAEkB,MAAQ,EACVlB,EAAEmB,OAAS,EACXJ,EACAD,EAAQ,MAASd,EAAEkB,MAAQ,IAC3B,GAGOE,EAAI,EAAGA,EAAIpB,EAAEqB,OAAQD,GAAKpB,EAAEqB,OA1B3B,EA2BRrB,EAAEsB,OAAOR,EAAQ,KAAQ,EAAGd,EAAEuB,IAAIT,EAAQM,EAAI,MAAO,EAAG,EAAG,EAAG,GAAI,EAAG,IACrEI,IAAQC,WAAR,GACEzB,GADF0B,OAEKV,EACAC,IAAgBQ,WAAhB,EACET,EADFU,OAAA,CAEO,EAARX,EAAYK,EACZN,EAAQM,EAAI,KAAOpB,EAAEkB,OACrB,KAPJ,CASElB,EAAEuB,IAAIT,EAAQM,EAAI,MAAO,EAAG,EAAG,IAAM,OAGxBO,OAAjB3B,EAAE4B,YAAgC5B,EAAE6B,WAIzBC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcpC,OAAQA,EAAQqC,KAAMJ,EAASK,SAAUC,YAAY,wCCpDrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKE,IAAIJ,GAASC,GAa9BH,EAA0B,SAC9BO,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKC,IAAIH,GAASO,EAChCI,EAAIL,EAAUJ,KAAKE,IAAIJ,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBvC,IAzBU,SACvBiC,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASL,EAAOC,GACtCU,EAAId,EAAkBS,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,wCCflB1B,EAAA,WAAS9B,EAAGyD,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChB9D,EAAEiE,SAAWD,GAAKhE,EAAEkE,MAAMlE,EAAEmE,KAAKV,EAAIE,EAAIK,GAAIhE,EAAEmE,KAAKT,EAAIE,EAAII","file":"component---src-pages-sketch-2019-08-29-js-bbadc4c96ac6db7bd220.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst DURATION = 120;\nconst LINES = 3;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.frameRate(60);\n\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSB, 2);\n    p.blendMode(p.HARD_LIGHT);\n\n    p.createLoop(DURATION, {\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n    const axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      theta,\n      noise1D(0.01) * (p.width / 2),\n      true\n    );\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / LINES) {\n      p.stroke(noise1D(0.05) + 1, p.map(noise1D(a / 300), -1, 1, 1, 2), 2, 0.5);\n      lerpLine(\n        p,\n        ...axis,\n        ...polarToCartesian(\n          ...axis,\n          theta * 6 + a,\n          noise1D(a / 100) * p.width,\n          true\n        ),\n        p.map(noise1D(a / 400), -1, 1, 0.01, 0.1)\n      );\n    }\n    p.frameCount === DURATION * 60 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}