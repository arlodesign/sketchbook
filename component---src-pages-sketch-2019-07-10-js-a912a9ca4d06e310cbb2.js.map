{"version":3,"sources":["webpack:///./src/lib/lerpLine.js","webpack:///./src/pages/sketch/2019/07/10.js"],"names":["p","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","Math","max","dist","l","random","point","lerp","RENDER","process","DEV","sketch","setup","pixelDensity","frameRate","createCanvas","noStroke","rectMode","CENTER","createLoop","gif","render","open","noiseRadius","draw","background","yPoints","x","width","y","noiseVal","map","animLoop","noise1D","push","height","forEach","col","i","size","rect","location","path","pathname","description"],"mappings":"+FAYe,aACbA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QACA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAIR,IAFA,IAAMC,EAAWC,KAAKC,IAAIL,EAAM,IAAOL,EAAEW,KAAKV,EAAIC,EAAIC,EAAIC,IAEjDQ,EAAI,EAAGA,EAAI,EAAGA,GAAKJ,GAChB,IAANI,GAAYN,KACXC,GAASP,EAAEa,SAAWD,IAAOL,IAChCP,EAAEc,MAAMd,EAAEe,KAAKd,EAAIE,EAAIS,GAAIZ,EAAEe,KAAKb,EAAIE,EAAIQ,M,kCC3BhD,mEAKMI,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASnB,GAGtBA,EAAEoB,MAAQ,WACJJ,IACFhB,EAAEqB,aAAa,GACfrB,EAAEsB,UAAU,KAGdtB,EAAEuB,aAAa,IAAK,KACpBvB,EAAEwB,WACFxB,EAAEyB,SAASzB,EAAE0B,QACb1B,EAAE2B,WAAW,GAAI,CACfC,MAAKZ,GAAS,CAAEa,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjB/B,EAAEgC,KAAO,WACPhC,EAAEiC,WAAW,GAIb,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,GAAKnC,EAAEoC,MAAQ,EAAGD,GAtBlB,GAsBkC,CAGhD,IAFA,IAAIE,EAAI,GACFC,EAAWtC,EAAEuC,IAAIvC,EAAEwC,SAASC,QAAQN,EAAI,KAAM,EAAG,EAAG,EAAG,IACpDvB,EAAI,EAAGA,EAAI,EAAGA,GAAK0B,EAC1B1B,EAAI,GAAKyB,EAAEK,KAAK1C,EAAEe,KAAK,EAAGf,EAAE2C,OAAQ/B,IAEtCsB,EAAQQ,KAAKL,GAGfH,EAAQU,SAAQ,SAACC,EAAKC,GACpBD,EAAID,SAAQ,SAAAP,GACV,IAAIU,EAAO/C,EAAEuC,IAAIF,EAAG,EAAGrC,EAAE2C,OAjCb,GAiCgC,GAE5C3C,EAAEgD,KAnCU,GAmCLF,EAAeT,EAAGU,EAAMA,GAC/B/C,EAAEgD,KApCU,GAoCLF,EAAe9C,EAAE2C,OAASN,EAAGU,EAAMA,GAC1C/C,EAAEgD,KAAKhD,EAAEoC,MArCG,GAqCKU,EAAeT,EAAGU,EAAMA,GACzC/C,EAAEgD,KAAKhD,EAAEoC,MAtCG,GAsCKU,EAAe9C,EAAE2C,OAASN,EAAGU,EAAMA,WAM7C,0BAAGE,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc9B,OAAQA,EAAQ+B,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-07-10-js-a912a9ca4d06e310cbb2.js","sourcesContent":["/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport lerpLine from \"~lib/lerpLine\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const GRID_SIZE = 10;\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.rectMode(p.CENTER);\n    p.createLoop(20, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    let yPoints = [];\n\n    for (let x = 0; x <= p.width / 2; x += GRID_SIZE) {\n      let y = [];\n      const noiseVal = p.map(p.animLoop.noise1D(x / 10), -1, 1, 0, 0.5);\n      for (let l = 0; l < 1; l += noiseVal) {\n        l > 0 && y.push(p.lerp(0, p.height, l));\n      }\n      yPoints.push(y);\n    }\n\n    yPoints.forEach((col, i) => {\n      col.forEach(y => {\n        let size = p.map(y, 0, p.height, GRID_SIZE, 1);\n\n        p.rect(i * GRID_SIZE, y, size, size);\n        p.rect(i * GRID_SIZE, p.height - y, size, size);\n        p.rect(p.width - i * GRID_SIZE, y, size, size);\n        p.rect(p.width - i * GRID_SIZE, p.height - y, size, size);\n      });\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}