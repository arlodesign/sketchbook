{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/11.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","points","setup","createCanvas","background","stroke","strokeWeight","noFill","initPoints","Array","from","a","random","TWO_PI","d","width","_loop","angle","concat","map","_ref","draw","curve","apply","polarToCartesian","height","frameCount","length","noLoop","__webpack_exports__","_ref2","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_4__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-06-11-js-08ac9211d06893d99d51.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const STEPS = 5;\n\n  let points = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.stroke(255);\n    p.strokeWeight(5);\n    p.noFill();\n\n    const initPoints = Array.from(Array(4), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.width / 4, p.width * 0.45),\n    }));\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      points = points.concat(\n        initPoints.map(({ a, d }) => ({ a: a + angle, d }))\n      );\n    }\n  };\n\n  p.draw = function() {\n    p.curve(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[p.frameCount].a,\n        points[p.frameCount].d,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[p.frameCount + 1].a,\n        points[p.frameCount + 1].d,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[p.frameCount + 2].a,\n        points[p.frameCount + 2].d,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[p.frameCount + 3].a,\n        points[p.frameCount + 3].d,\n        true\n      )\n    );\n    if (p.frameCount === points.length - 4) {\n      p.curve(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 1].a,\n          points[p.frameCount + 1].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 2].a,\n          points[p.frameCount + 2].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 3].a,\n          points[p.frameCount + 3].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[0].a,\n          points[0].d,\n          true\n        )\n      );\n      p.curve(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 2].a,\n          points[p.frameCount + 2].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 3].a,\n          points[p.frameCount + 3].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[0].a,\n          points[0].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[1].a,\n          points[1].d,\n          true\n        )\n      );\n      p.curve(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[p.frameCount + 3].a,\n          points[p.frameCount + 3].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[0].a,\n          points[0].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[1].a,\n          points[1].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[2].a,\n          points[2].d,\n          true\n        )\n      );\n      p.curve(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[0].a,\n          points[0].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[1].a,\n          points[1].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[2].a,\n          points[2].d,\n          true\n        ),\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          points[3].a,\n          points[3].d,\n          true\n        )\n      );\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Reload page for a different variation.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}