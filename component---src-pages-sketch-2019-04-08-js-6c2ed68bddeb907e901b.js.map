{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/08.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","Doodad","x","y","this","freq","TWO_PI","floor","random","drawFunc","pinwheel","horizontalLines","verticalLines","spiralClockwise","spiralCounterclockwise","_proto","prototype","draw","push","translate","pop","strokeWeight","r","line","apply","polarToCartesian","concat","GRID","start","end","offset","noStroke","fill","circle","map","doodads","setup","createCanvas","width","height","background","forEach","d","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-04-08-js-6c2ed68bddeb907e901b.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GRID = 60;\n  const MARGIN = 5;\n\n  class Doodad {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n      this.freq = p.TWO_PI / (p.floor(p.random(10, 15)) * 2);\n      this.drawFunc = p.random([\n        this.pinwheel,\n        this.horizontalLines,\n        this.verticalLines,\n        this.spiralClockwise,\n        this.spiralCounterclockwise,\n      ]);\n    }\n    draw() {\n      p.push();\n      p.translate(this.x, this.y);\n      this.drawFunc();\n      p.pop();\n    }\n    pinwheel() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        p.line(\n          ...polarToCartesian(0, 0, r, (GRID / 2 - MARGIN) / 3, true),\n          ...polarToCartesian(0, 0, r, GRID / 2 - MARGIN, true)\n        );\n      }\n    }\n    horizontalLines() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        const start = polarToCartesian(0, 0, r, GRID / 2 - (MARGIN + 2), true);\n        const end = [-start[0], start[1]];\n        p.line(...start, ...end);\n      }\n    }\n    verticalLines() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        const start = polarToCartesian(0, 0, r, GRID / 2 - (MARGIN + 2), true);\n        const end = [start[0], -start[1]];\n        p.line(...start, ...end);\n      }\n    }\n    spiralClockwise() {\n      const offset = p.random(p.TWO_PI);\n      p.noStroke();\n      p.fill(0);\n      for (let r = 0; r < p.TWO_PI * 2; r += this.freq) {\n        p.circle(\n          ...polarToCartesian(\n            0,\n            0,\n            r + offset,\n            p.map(r, 0, p.TWO_PI * 2, 0, GRID / 2 - MARGIN),\n            true\n          ),\n          2\n        );\n      }\n    }\n    spiralCounterclockwise() {\n      const offset = p.random(p.TWO_PI);\n      p.noStroke();\n      p.fill(0);\n      for (let r = p.TWO_PI; r > -p.TWO_PI; r -= this.freq) {\n        p.circle(\n          ...polarToCartesian(\n            0,\n            0,\n            r + offset,\n            p.map(r, p.TWO_PI, -p.TWO_PI, 0, GRID / 2 - MARGIN),\n            true\n          ),\n          2\n        );\n      }\n    }\n  }\n\n  let doodads = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    for (let x = GRID / 2; x < p.width; x += GRID) {\n      for (let y = GRID / 2; y < p.height; y += GRID) {\n        doodads.push(new Doodad(x, y));\n      }\n    }\n  };\n\n  p.draw = function() {\n    p.background(255);\n    doodads.forEach(d => d.draw());\n    p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}