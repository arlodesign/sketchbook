{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/23.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","setup","frameRate","pixelDensity","createCanvas","background","noFill","blendMode","MULTIPLY","createLoop","gif","render","open","draw","animLoop","noise1D","noise2D","theta","forEach","c","i","clr","color","setAlpha","stroke","push","translate","polarToCartesian","width","height","TWO_PI","map","cos","rotate","radius","ellipseWidth","length","ellipseHeight","ellipse","pop","DURATION","frameCount","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","y","sin","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"wkBAMA,IAAMA,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACRD,EAAEE,UAAU,IAERN,GACFI,EAAEG,aAAa,GAGjBH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,WAAW,KACbL,EAAEM,SACFN,EAAEO,UAAUP,EAAEQ,UAEdR,EAAES,WAfW,IAeU,CACrBC,MAAKd,GAAS,CAAEe,QAAQ,EAAOC,MAAM,MAIzCZ,EAAEa,KAAO,WAAY,IAAD,EACkBb,EAAEc,SAA9BC,EADU,EACVA,QAASC,EADC,EACDA,QAASC,EADR,EACQA,MAE1B,CAAC,OAAQ,UAAW,UAAUC,SAAQ,SAACC,EAAGC,GACxC,IAAMC,EAAMrB,EAAEsB,MAAMH,GACpBE,EAAIE,SAAS,IACbvB,EAAEwB,OAAOH,GAETrB,EAAEyB,OACFzB,EAAE0B,UAAF,MAAA1B,EAAC,EACI2B,YACD3B,EAAE4B,MAAQ,EACV5B,EAAE6B,OAAS,EACXZ,EAAQG,GAAKpB,EAAE8B,OAAS,GACxB9B,EAAE+B,IACA/B,EAAEgC,IAAIf,EAAQG,GAAKpB,EAAE8B,OAAS,KAC7B,EACD,EACA9B,EAAE6B,OAAS,EACX,GACA,IAEF,KAGJ7B,EAAEiC,OACAjC,EAAE+B,IAAIhB,GAASK,EAAI,GAAK,IAAK,CAAEc,OAAQ,MAAS,EAAG,EAAGlC,EAAE8B,OAAQ,IAElE,IAAMK,EAAenC,EAAE+B,IACrBf,EAAQG,EAAEiB,OAAQhB,EAAI,EAAG,CAAEc,OAAQ,KAClC,EACD,EACAlC,EAAE4B,MAAQ,EACV5B,EAAE4B,OAEES,EAAgBrC,EAAE+B,IACtBf,EAAQI,EAAI,EAAGD,EAAEiB,OAAQ,CAAEF,OAAQ,KAClC,EACD,EACAlC,EAAE6B,OAAS,EACX7B,EAAE6B,OAAS,GAEb7B,EAAEsC,QAAQ,EAAG,EAAGH,EAAcE,GAC9BrC,EAAEuC,UAGH3C,GAA2B4C,OAAjBxC,EAAEyC,YAAgCzC,EAAE0C,WAUpCC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ5C,OAAQA,O,kCC/EpB,sCAiBM6C,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKpB,IAAIe,GAASC,EAChCK,EAAIP,EAAUM,KAAKE,IAAIP,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE,MAIlB1B,IAzBU,SACvBkB,EACAC,EACAC,EACAQ,EACAL,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACK,EAAQT,EAAOQ,GACxC,OAAOC,EAASJ,KAAKpB,IAAIe,GAASQ,EAYxBE,CAAkBZ,EAASE,EAAOQ,GACtCF,EAXkB,SAACG,EAAQT,EAAOQ,GACxC,OAAOC,EAASJ,KAAKE,IAAIP,GAASQ,EAUxBG,CAAkBZ,EAASC,EAAOQ,GAC5C,OAAOL,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2019-08-23-js-f495f0c6bec2bfea2d1b.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 120;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.noFill();\n    p.blendMode(p.MULTIPLY);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, noise2D, theta } = p.animLoop;\n\n    [\"cyan\", \"magenta\", \"yellow\"].forEach((c, i) => {\n      const clr = p.color(c);\n      clr.setAlpha(16);\n      p.stroke(clr);\n\n      p.push();\n      p.translate(\n        ...polarToCartesian(\n          p.width / 3,\n          p.height / 2,\n          theta + i * (p.TWO_PI / 3),\n          p.map(\n            p.cos(theta + i * (p.TWO_PI / 3)),\n            -1,\n            1,\n            p.height / 2,\n            0,\n            true\n          ),\n          true\n        )\n      );\n      p.rotate(\n        p.map(noise1D((i + 1) / 100, { radius: 0.1 }), -1, 1, p.TWO_PI, 0)\n      );\n      const ellipseWidth = p.map(\n        noise2D(c.length, i + 1, { radius: 2 }),\n        -1,\n        1,\n        p.width / 2,\n        p.width\n      );\n      const ellipseHeight = p.map(\n        noise2D(i + 1, c.length, { radius: 2 }),\n        -1,\n        1,\n        p.height / 4,\n        p.height / 8\n      );\n      p.ellipse(0, 0, ellipseWidth, ellipseHeight);\n      p.pop();\n    });\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}