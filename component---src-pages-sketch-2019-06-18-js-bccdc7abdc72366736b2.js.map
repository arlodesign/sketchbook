{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/18.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","initShape","shapes","setup","pixelDensity","createCanvas","Array","from","_","i","a","random","TWO_PI","d","sort","b","noStroke","draw","background","shape","fill","beginShape","forEach","pt","vertex","width","height","endShape","CLOSE","length","unshift","map","noise","frameCount","pop","SketchPage"],"mappings":"4FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,uhBCVjC,IAAMO,EAAS,SAASC,GACtB,IAGIC,EAAY,GACZC,EAAS,GAEbF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,GACfJ,EAAEK,aAAa,IAAK,MAEpBJ,EAAYK,MAAMC,KAAKD,MAVP,IAUyB,SAACE,EAAGC,GAAJ,MAAW,CAClDC,EAAGV,EAAEW,OAAOX,EAAEY,QAAUH,EAXV,GAW0BT,EAAEY,SAAWH,EAAI,GAX3C,IAYdI,EAAGb,EAAEW,OAAO,SAGJG,MAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEA,EAAIK,EAAEL,KACjCR,EAAS,CAACD,GAEVD,EAAEgB,YAGJhB,EAAEiB,KAAO,WACPjB,EAAEkB,WAAW,GAEb,IAHkB,eAGTT,GACP,IAAMU,EAAQjB,EAAOO,GAAGK,MAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEA,EAAIK,EAAEL,KAE/CV,EAAEoB,KAAKX,EAAI,EAAI,IAAM,GACrBT,EAAEqB,aACFF,EAAMG,SAAQ,SAAAC,GAAE,OACdvB,EAAEwB,OAAF,MAAAxB,EAAC,EACIN,YACDM,EAAEyB,MAAQ,EACVzB,EAAE0B,OAAS,EACXH,EAAGb,EACHa,EAAGV,EAlCD,GAkCKJ,GACP,QAINT,EAAEwB,OAAF,MAAAxB,EAAC,EACIN,YACDM,EAAEyB,MAAQ,EACVzB,EAAE0B,OAAS,EACXP,EAAM,GAAGT,EACTS,EAAM,GAAGN,EA5CL,GA4CSJ,GACb,KAGJT,EAAE2B,SAAS3B,EAAE4B,QAzBNnB,EAAIP,EAAO2B,OAAS,EAAGpB,GAAK,EAAGA,IAAM,EAArCA,GA2BTP,EAAO4B,QACL7B,EAAU8B,KAAI,gBAAGrB,EAAH,EAAGA,EAAGG,EAAN,EAAMA,EAAN,MAAe,CAC3BH,EACEV,EAAEY,QACDF,EAAIV,EAAE+B,IAAI/B,EAAEgC,MAAMtB,EAAGV,EAAEiC,WAAa,KAAM,EAAG,EAAG,GAAK,KACnDjC,EAAEY,OAAS,KAAQZ,EAAEiC,YAC1BpB,EAAGA,EAAIb,EAAE+B,IAAI/B,EAAEgC,MAAMnB,EAAGb,EAAEiC,WAAa,KAAM,EAAG,EAAG,GAAK,QAGxD/B,EAAO2B,OAAS7B,EAAE0B,OA3DZ,IA4DRxB,EAAOgC,QAWEC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQpC,OAAQA","file":"component---src-pages-sketch-2019-06-18-js-bccdc7abdc72366736b2.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const POINT_QTY = 5;\n  const GAP = 20;\n\n  let initShape = [];\n  let shapes = [];\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.createCanvas(660, 840);\n\n    initShape = Array.from(Array(POINT_QTY), (_, i) => ({\n      a: p.random(p.TWO_PI * (i / POINT_QTY), p.TWO_PI * ((i + 1) / POINT_QTY)),\n      d: p.random(10),\n    }));\n\n    initShape.sort((a, b) => a.a - b.a);\n    shapes = [initShape];\n\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    for (let i = shapes.length - 1; i >= 0; i--) {\n      const shape = shapes[i].sort((a, b) => a.a - b.a);\n\n      p.fill(i % 2 ? 255 : 0);\n      p.beginShape();\n      shape.forEach(pt =>\n        p.vertex(\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            pt.a,\n            pt.d + i * GAP,\n            true\n          )\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          shape[0].a,\n          shape[0].d + i * GAP,\n          true\n        )\n      );\n      p.endShape(p.CLOSE);\n    }\n    shapes.unshift(\n      initShape.map(({ a, d }) => ({\n        a:\n          p.TWO_PI -\n          (a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9) +\n            (p.TWO_PI / 1080) * p.frameCount),\n        d: d * p.map(p.noise(d, p.frameCount / 250), 0, 1, 0.1, 2),\n      }))\n    );\n    if (shapes.length > p.height / GAP) {\n      shapes.pop();\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}