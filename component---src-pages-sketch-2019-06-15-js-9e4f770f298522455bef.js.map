{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/15.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","points","setup","createCanvas","noFill","stroke","colorMode","HSB","initPoints","Array","from","a","TWO_PI","d","height","aSpeed","_loop","angle","concat","map","pt","Object","assign","draw","background","beginShape","curveVertex","apply","polarToCartesian","width","length","noise","frameCount","forEach","_ref","i","endShape","push","blendMode","MULTIPLY","x","y","fill","rect","GRID_SIZE","pop","__webpack_exports__","_ref2","location","_emotion_core__WEBPACK_IMPORTED_MODULE_4__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_6__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"iKAIMA,EAAS,SAASC,GACtB,IAEMC,EAAMD,EAAEE,OAAO,IAEjBC,EAAS,GAEbH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBL,EAAEM,SACFN,EAAEO,OAAO,KACTP,EAAEQ,UAAUR,EAAES,IAAK,KAQnB,IANA,IAAMC,EAAaC,MAAMC,KAAKD,MAAM,GAAI,iBAAO,CAC7CE,EAAGb,EAAEE,OAAOF,EAAEc,QACdC,EAAGf,EAAEE,OAAOF,EAAEgB,QACdC,OAAQjB,EAAEE,OAAO,KAAO,KAAQF,EAAEE,OAAO,EAAE,EAAG,OAT7BgB,EAAA,SAYVC,GACPhB,EAASA,EAAOiB,OACdV,EAAWW,IAAI,SAAAC,GAAE,OAAIC,OAAOC,OAAO,GAAIF,EAAI,CAAET,EAAGS,EAAGT,EAAIM,QAFlDA,EAAQ,EAAGA,EAAQnB,EAAEc,OAAQK,GAASnB,EAAEc,OAlBrC,GAkBqDI,EAAxDC,IAOXnB,EAAEyB,KAAO,WACPzB,EAAE0B,WAAW,GAEb1B,EAAE2B,aACF3B,EAAE4B,YAAFC,MAAA7B,EACK8B,YACD9B,EAAE+B,MAAQ,EACV/B,EAAEgB,OAAS,EACXb,EAAOA,EAAO6B,OAAS,GAAGnB,EAC1BV,EAAOA,EAAO6B,OAAS,GAAGjB,EACxBf,EAAEiC,MACA9B,EAAOA,EAAO6B,OAAS,GAAGjB,EAC1BZ,EAAOA,EAAO6B,OAAS,GAAGnB,EAC1Bb,EAAEkC,WAAa,MAEnB,IAGJlC,EAAE4B,YAAFC,MAAA7B,EACK8B,YACD9B,EAAE+B,MAAQ,EACV/B,EAAEgB,OAAS,EACXb,EAAOA,EAAO6B,OAAS,GAAGnB,EAC1BV,EAAOA,EAAO6B,OAAS,GAAGjB,EACxBf,EAAEiC,MACA9B,EAAOA,EAAO6B,OAAS,GAAGjB,EAC1BZ,EAAOA,EAAO6B,OAAS,GAAGnB,EAC1Bb,EAAEkC,WAAa,MAEnB,IAGJlC,EAAE4B,YAAFC,MAAA7B,EACK8B,YACD9B,EAAE+B,MAAQ,EACV/B,EAAEgB,OAAS,EACXb,EAAOA,EAAO6B,OAAS,GAAGnB,EAC1BV,EAAOA,EAAO6B,OAAS,GAAGjB,EACxBf,EAAEiC,MACA9B,EAAOA,EAAO6B,OAAS,GAAGjB,EAC1BZ,EAAOA,EAAO6B,OAAS,GAAGnB,EAC1Bb,EAAEkC,WAAa,MAEnB,IAGJ/B,EAAOgC,QAAQ,SAAAC,EAAmBC,GAAM,IAAtBxB,EAAsBuB,EAAtBvB,EAAGE,EAAmBqB,EAAnBrB,EAAGE,EAAgBmB,EAAhBnB,OACtBjB,EAAE4B,YAAFC,MAAA7B,EACK8B,YACD9B,EAAE+B,MAAQ,EACV/B,EAAEgB,OAAS,EACXH,EACAE,EAAIf,EAAEiC,MAAMlB,EAAGF,EAAGb,EAAEkC,WAAa,MACjC,IAGJ/B,EAAOkC,GAAGxB,GAAKI,IAGjBjB,EAAEsC,WAEFtC,EAAEuC,OACFvC,EAAEwC,UAAUxC,EAAEyC,UACd,IAAK,IAAIC,EAAI,EAAGA,EAAI1C,EAAE+B,MAAOW,GAvFb,GAwFd,IAAK,IAAIC,EAAI,EAAGA,EAAI3C,EAAEgB,OAAQ2B,GAxFhB,GAyFZ3C,EAAE4C,KACA5C,EAAEqB,IAAIrB,EAAEiC,MAAMS,EAAI,EAAGC,EAAI,EAAG3C,EAAEkC,WAAa,IAAK,EAAG,EAAGjC,EAAKA,EAAM,IACjE,IACA,IACA,IAEFD,EAAE6C,KACAH,EAAII,GACJH,EAAIG,GACJA,GACAA,IAIN9C,EAAE+C,QAISC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACb3B,OAAA4B,EAAA,EAAA5B,CAAC6B,EAAA,EAAD,CAAcrD,OAAQA,EAAQsD,KAAMH,EAASI,SAAUC,YAAY,wCClHrEC,EAAAzC,EAAAiC,EAAA,sBAAAS,IAAAD,EAAAzC,EAAAiC,EAAA,sBAAAU,IAAAF,EAAAzC,EAAAiC,EAAA,sBAAAW,IAAA,IAAMF,EAAoB,SAACG,EAAQzC,EAAO0C,GACxC,OAAOD,EAASE,KAAKC,IAAI5C,GAAS0C,GAE9BH,EAAoB,SAACE,EAAQzC,EAAO0C,GACxC,OAAOD,EAASE,KAAKE,IAAI7C,GAAS0C,GAa9BF,EAA0B,SAC9BM,EACAC,EACA/C,EACAgD,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAM3B,EAAIuB,EAAUH,KAAKC,IAAI5C,GAASgD,EAChCxB,EAAIuB,EAAUJ,KAAKE,IAAI7C,GAASiD,EACtC,OAAOC,EAAU,CAAC3B,EAAGC,GAAK,CAAED,IAAGC,MAIlBb,IAzBU,SACvBmC,EACAC,EACA/C,EACA0C,EACAQ,QACG,IADHA,OAAU,GAEV,IAAM3B,EAAIe,EAAkBQ,EAAS9C,EAAO0C,GACtClB,EAAIe,EAAkBQ,EAAS/C,EAAO0C,GAC5C,OAAOQ,EAAU,CAAC3B,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-06-15-js-9e4f770f298522455bef.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const STEPS = 50;\n  const GRID_SIZE = 60;\n  const HUE = p.random(70);\n\n  let points = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.noFill();\n    p.stroke(255);\n    p.colorMode(p.HSB, 100);\n\n    const initPoints = Array.from(Array(3), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.height),\n      aSpeed: p.random(0.005, 0.01) * p.random([-1, 1]),\n    }));\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      points = points.concat(\n        initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\n      );\n    }\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    p.beginShape();\n    p.curveVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[points.length - 3].a,\n        points[points.length - 3].d *\n          p.noise(\n            points[points.length - 3].d,\n            points[points.length - 3].a,\n            p.frameCount / 400\n          ),\n        true\n      )\n    );\n    p.curveVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[points.length - 2].a,\n        points[points.length - 2].d *\n          p.noise(\n            points[points.length - 2].d,\n            points[points.length - 2].a,\n            p.frameCount / 400\n          ),\n        true\n      )\n    );\n    p.curveVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[points.length - 1].a,\n        points[points.length - 1].d *\n          p.noise(\n            points[points.length - 1].d,\n            points[points.length - 1].a,\n            p.frameCount / 400\n          ),\n        true\n      )\n    );\n    points.forEach(({ a, d, aSpeed }, i) => {\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          a,\n          d * p.noise(d, a, p.frameCount / 400),\n          true\n        )\n      );\n      points[i].a += aSpeed;\n    });\n\n    p.endShape();\n\n    p.push();\n    p.blendMode(p.MULTIPLY);\n    for (let x = 0; x < p.width; x += GRID_SIZE) {\n      for (let y = 0; y < p.height; y += GRID_SIZE) {\n        p.fill(\n          p.map(p.noise(x + 1, y + 1, p.frameCount / 10), 0, 1, HUE, HUE + 30),\n          100,\n          100,\n          50\n        );\n        p.rect(\n          x - GRID_SIZE / 3,\n          y - GRID_SIZE / 3,\n          GRID_SIZE + GRID_SIZE / 3,\n          GRID_SIZE + GRID_SIZE / 3\n        );\n      }\n    }\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}