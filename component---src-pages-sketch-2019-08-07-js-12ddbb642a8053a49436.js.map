{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/07.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","color1","color2","HUE","random","setup","frameRate","pixelDensity","colorMode","HSL","createCanvas","background","color","createLoop","gif","render","open","noiseRadius","draw","_p$animLoop","animLoop","noise1D","theta","strokeWeight","HSB","push","translate","width","height","noFill","stroke","lerpColor","map","sin","curve","apply","polarToCartesian","concat","PI","pop","DURATION","frameCount","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"iJAKMA,EAASC,GAAYC,MAAO,EAG5BC,EAAS,SAASC,GACtB,IAGIC,EACAC,EAJEC,EAAMH,EAAEI,OAAO,IAMrBJ,EAAEK,MAAQ,WACRL,EAAEM,UAAU,IACZV,GAAUI,EAAEO,aAAa,GAEzBP,EAAEQ,UAAUR,EAAES,IAAK,KACnBT,EAAEU,aAAa,IAAK,KACpBV,EAAEW,WAAWR,EAAK,GAAI,IAEtBF,EAASD,EAAEY,MAAMT,EAAK,GAAI,GAAI,IAC9BD,EAASF,EAAEY,MAAMT,EAAM,GAAI,IAAK,IAAK,IAErCH,EAAEa,WApBW,GAoBU,CACrBC,MAAKlB,GAAS,CAAEmB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,OAIjBjB,EAAEkB,KAAO,WAAW,IAAAC,EACSnB,EAAEoB,SAArBC,EADUF,EACVE,QAASC,EADCH,EACDG,MAEjBtB,EAAEuB,aAAa,GACfvB,EAAEQ,UAAUR,EAAEwB,IAAK,KACnBxB,EAAEyB,OACFzB,EAAE0B,UAAU1B,EAAE2B,MAAQ,EAAG3B,EAAE4B,OAAS,GACpC5B,EAAE6B,SACF7B,EAAE8B,OAAO9B,EAAE+B,UAAU9B,EAAQC,EAAQF,EAAEgC,IAAIhC,EAAEiC,IAAIX,IAAS,EAAG,EAAG,EAAG,KACnEtB,EAAEkC,MAAFC,MAAAnC,EACKoC,YAAiB,EAAG,EAAGd,EAAOtB,EAAE4B,QAAQ,GAD5CS,OAAA,EAEGrC,EAAE2B,MAAQ,EAAKN,GAASrB,EAAE2B,QAC1B3B,EAAE4B,OAAS,EAAKP,GAASrB,EAAE4B,QAC5B5B,EAAE2B,MAAQ,EAAKN,EAAQrB,EAAE2B,OACzB3B,EAAE4B,OAAS,EAAKP,EAAQrB,EAAE4B,SACxBQ,YAAiB,EAAG,EAAGd,EAAQtB,EAAEsC,GAAItC,EAAE4B,QAAQ,KAEpD5B,EAAEuC,OAED3C,GAA2B4C,OAAjBxC,EAAEyC,YAAgCzC,EAAE0C,WAIpCC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcjD,OAAQA,EAAQkD,KAAMJ,EAASK,SAAUC,YAAY,wCCxDrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAK3B,IAAIyB,GAASC,GAa9BH,EAA0B,SAC9BM,EACAC,EACAL,EACAM,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUF,KAAKC,IAAIH,GAASM,EAChCI,EAAIL,EAAUH,KAAK3B,IAAIyB,GAASO,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBhC,IAzBU,SACvB0B,EACAC,EACAL,EACAC,EACAO,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASJ,EAAOC,GACtCS,EAAIb,EAAkBQ,EAASL,EAAOC,GAC5C,OAAOO,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-08-07-js-12ddbb642a8053a49436.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 60;\n\nconst sketch = function(p) {\n  const HUE = p.random(70);\n\n  let margin;\n  let color1;\n  let color2;\n\n  p.setup = function() {\n    p.frameRate(30);\n    RENDER && p.pixelDensity(1);\n\n    p.colorMode(p.HSL, 100);\n    p.createCanvas(660, 840);\n    p.background(HUE, 20, 10);\n\n    color1 = p.color(HUE, 50, 50, 10);\n    color2 = p.color(HUE + 30, 100, 100, 10);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.31,\n    });\n  };\n\n  p.draw = function() {\n    const { noise1D, theta } = p.animLoop;\n\n    p.strokeWeight(2);\n    p.colorMode(p.HSB, 100);\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n    p.noFill();\n    p.stroke(p.lerpColor(color1, color2, p.map(p.sin(theta), -1, 1, 0, 1)));\n    p.curve(\n      ...polarToCartesian(0, 0, theta, p.height, true),\n      (-p.width / 2) * noise1D(-p.width),\n      (-p.height / 2) * noise1D(-p.height),\n      (p.width / 2) * noise1D(p.width),\n      (p.height / 2) * noise1D(p.height),\n      ...polarToCartesian(0, 0, theta + p.PI, p.height, true)\n    );\n    p.pop();\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}