{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/08/22.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","RENDER","process","DEV","sketch","p","HUE","random","COLORS","Array","from","length","_","i","setup","pixelDensity","frameRate","createCanvas","strokeWeight","colorMode","HSB","createLoop","gif","render","open","noiseRadius","draw","animLoop","noise2D","theta","blendMode","BLEND","background","noFill","MULTIPLY","push","translate","width","height","forEach","c","QUARTER_PI","burstRadius","map","burstLines","floor","stroke","a","TWO_PI","line","SketchPage"],"mappings":"6FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,6gBCTjC,IAAMO,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IACfC,EAASC,MAAMC,KAAK,CAAEC,OAFhB,IAE+B,SAACC,EAAGC,GAAJ,OAAUP,EAAO,GAAaO,KAEzER,EAAES,MAAQ,WACJb,IACFI,EAAEU,aAAa,GACfV,EAAEW,UAAU,KAGdX,EAAEY,aAAa,IAAK,KACpBZ,EAAEa,aAAa,GACfb,EAAEc,UAAUd,EAAEe,IAAK,KAEnBf,EAAEgB,WAAW,GAAI,CACfC,MAAKrB,GAAS,CAAEsB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBpB,EAAEqB,KAAO,WAAY,IAAD,EACSrB,EAAEsB,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MACjBxB,EAAEyB,UAAUzB,EAAE0B,OACd1B,EAAE2B,WAAW,KAEb3B,EAAE4B,SACF5B,EAAEyB,UAAUzB,EAAE6B,UACd7B,EAAEa,aAAa,GAEfb,EAAE8B,OACF9B,EAAE+B,UAAF,MAAA/B,EAAC,EACIT,YAAiBS,EAAEgC,MAAQ,EAAGhC,EAAEiC,OAAS,EAAGT,EAAOxB,EAAEgC,MAAQ,GAAG,KAGrE7B,EAAO+B,SAAQ,SAACC,EAAG3B,GACjB,IAAMf,EAASF,YACb,EACA,EACAiC,EAAQxB,EAAEoC,WAAa5B,EACvBe,EAAQvB,EAAEZ,IAAIoC,GAAQhB,IAAMR,EAAEgC,MAAQ,IACtC,GAEIK,EAAcrC,EAAEsC,IACpBf,EAAQvB,EAAEV,IAAIkC,GAAQhB,IACrB,EACD,EACA,EACAR,EAAEgC,MAAQ,GAENO,EAAavC,EAAEwC,MAAMxC,EAAEsC,IAAID,EAAa,EAAGrC,EAAEgC,MAAQ,EAAG,EAAG,MAEjEhC,EAAEyC,OAAON,EAAG,GAAI,KAEhB,IAAK,IAAIO,EAAIlB,EAAOkB,EAAI1C,EAAE2C,OAASnB,EAAOkB,GAAK1C,EAAE2C,OAASJ,EACxDvC,EAAE4C,KAAF,MAAA5C,EAAC,CACC,EACA,GAFD,SAGIT,IAAgB,WAAhB,IACEE,GADF,QAED+B,EAAQkB,EAAI1C,EAAEoC,WAAa5B,EAC3B6B,GACA,aAcGQ,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ9C,OAAQA","file":"component---src-pages-sketch-2019-08-22-js-5f9bb2c75fe91172a766.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const QTY = 5;\n  const HUE = p.random(100 / QTY);\n  const COLORS = Array.from({ length: QTY }, (_, i) => HUE + (100 / QTY) * i);\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.strokeWeight(2);\n    p.colorMode(p.HSB, 100);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { noise2D, theta } = p.animLoop;\n    p.blendMode(p.BLEND);\n    p.background(255);\n\n    p.noFill();\n    p.blendMode(p.MULTIPLY);\n    p.strokeWeight(4);\n\n    p.push();\n    p.translate(\n      ...polarToCartesian(p.width / 2, p.height / 2, theta, p.width / 5, true)\n    );\n\n    COLORS.forEach((c, i) => {\n      const center = polarToCartesian(\n        0,\n        0,\n        theta + p.QUARTER_PI * i,\n        noise2D(p.cos(theta), i) * (p.width / 2),\n        true\n      );\n      const burstRadius = p.map(\n        noise2D(p.sin(theta), i),\n        -1,\n        1,\n        0,\n        p.width / 3\n      );\n      const burstLines = p.floor(p.map(burstRadius, 0, p.width / 3, 2, 100));\n\n      p.stroke(c, 50, 100);\n\n      for (let a = theta; a < p.TWO_PI + theta; a += p.TWO_PI / burstLines) {\n        p.line(\n          0,\n          0,\n          ...polarToCartesian(\n            ...center,\n            theta + a + p.QUARTER_PI * i,\n            burstRadius,\n            true\n          )\n        );\n      }\n    });\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}