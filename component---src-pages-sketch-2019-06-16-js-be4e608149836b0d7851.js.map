{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/16.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","points","alpha","setup","createCanvas","background","noFill","colorMode","HSL","blendMode","OVERLAY","i","initPoints","Array","from","a","TWO_PI","d","width","length","height","aSpeed","angle","concat","map","pt","Object","assign","draw","pts","stroke","sin","frameCount","cos","beginShape","curveVertex","polarToCartesian","forEach","j","endShape","noLoop","location","path","pathname","description","polarToCartesianX","center","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-06-16-js-be4e608149836b0d7851.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const STEPS = 3;\n  const HUE = p.random(50);\n\n  let points = [[], [], []];\n  let alpha = 15;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(32);\n    p.noFill();\n    p.colorMode(p.HSL, 100);\n    p.blendMode(p.OVERLAY);\n\n    for (let i = 0; i < points.length; i++) {\n      const initPoints = Array.from(Array(3), () => ({\n        a: p.random(p.TWO_PI),\n        d: p.random(\n          (p.width / points.length) * (i + 1),\n          (p.height / points.length) * (i + 1)\n        ),\n        aSpeed: p.random(0.005, 0.01) * p.random([-1, 1]),\n      }));\n\n      for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n        points[i] = points[i].concat(\n          initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\n        );\n      }\n    }\n  };\n\n  p.draw = function() {\n    for (let i = 0; i < points.length; i++) {\n      const pts = points[i];\n\n      p.stroke(\n        p.map(p.sin(p.frameCount / (250 * (i + 1))), -1, 1, HUE, HUE + 50),\n        100,\n        p.map(p.cos(p.frameCount / (750 * (i + 1))), -1, 1, 20, 80),\n        alpha\n      );\n\n      p.beginShape();\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          pts[pts.length - 3].a,\n          pts[pts.length - 3].d,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          pts[pts.length - 2].a,\n          pts[pts.length - 2].d,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          pts[pts.length - 1].a,\n          pts[pts.length - 1].d,\n          true\n        )\n      );\n      pts.forEach(({ a, d, aSpeed }, j) => {\n        p.curveVertex(\n          ...polarToCartesian(p.width / 2, p.height / 2, a, d, true)\n        );\n        points[i][j].a += aSpeed;\n      });\n\n      p.endShape();\n    }\n\n    alpha -= 0.005;\n\n    if (alpha < 0) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}