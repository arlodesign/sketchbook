{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/19.js","webpack:///./node_modules/amp-is-object/is-object.js","webpack:///./node_modules/coordinate-systems/coordinate-systems.js","webpack:///./node_modules/amp-is-array/is-array.js","webpack:///./node_modules/amp-is-number/is-number.js","webpack:///./node_modules/amp-extend/extend.js"],"names":["sketch","p","points","initPoints","setup","createCanvas","WEBGL","Array","from","random","TWO_PI","draw","background","directionalLight","min","frameCount","cos","sin","camera","noStroke","fill","specularMaterial","forEach","pt","i","v","createVector","spherical","cart","normalize","push","translate","map","c","rotateX","atan2","y","z","cylinder","noise","x","pop","location","path","pathname","description","module","exports","obj","type","isArray","isNumber","isObject","extend","degPerRadian","Math","PI","Coordinate","config","isRadian","isDegree","_x","_y","_z","_r","_t","_p","pos","Object","defineProperty","this","get","set","label","coords","Error","initialType","prototype","cartesian","apply","arguments","options","temp","cartesian2d","cartesian3d","polarToCart2d","polar","cylindrical","sphericalToCart3d","cyl","cartesian2dToPolar","center","cartesian3dToCylindrical","sphericalToCylindrical","pol","sph","cartesian3dToSpherical","cylindricalToSpherical","baseCoord","arrToNumeric","length","nums","num","TypeError","parseFloat","rt","r","t","xy","sqrt","xyz","x2","y2","z2","rtz","sr","sp","rtp","cr","toString","nativeIsArray","call","source","prop"],"mappings":"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","file":"component---src-pages-sketch-2019-06-19-js-a3bd05bee85ac43c005f.js","sourcesContent":["import React from \"react\";\nimport { spherical } from \"coordinate-systems\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const SIZE = 200;\n\n  let points = [];\n  let initPoints = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n    initPoints = Array.from(Array(50), () => [\n      SIZE,\n      p.random(p.TWO_PI),\n      p.random(p.TWO_PI),\n    ]);\n    points = [...initPoints];\n  };\n\n  p.draw = function() {\n    p.background(0);\n    p.directionalLight(\n      p.min(p.frameCount, 255),\n      p.min(p.frameCount, 255),\n      p.min(p.frameCount, 255),\n      p.cos(p.frameCount / 100),\n      p.sin(p.frameCount / 200),\n      p.sin(p.frameCount / 100) / 2\n    );\n    p.camera(\n      p.sin(p.frameCount / (SIZE * 5)) * (SIZE * 2),\n      p.cos(p.frameCount / (SIZE * 5)) * (SIZE * 2),\n      SIZE / 3,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    );\n\n    p.noStroke();\n    p.fill(0);\n    p.specularMaterial(255, 255, 255);\n\n    points.forEach((pt, i) => {\n      const v = p.createVector(...spherical(pt).cart());\n      v.normalize();\n\n      p.push();\n      p.translate(\n        ...spherical(pt)\n          .cart()\n          .map(c => c / 2)\n      );\n      p.rotateX(p.atan2(v.y, v.z));\n      p.cylinder(20 * p.noise(v.x, v.y, p.frameCount / 150), SIZE, 50);\n      p.pop();\n\n      points[i] = [\n        SIZE,\n        initPoints[i][1] * p.noise(initPoints[i][1], p.frameCount / 500),\n        initPoints[i][2] * p.noise(initPoints[i][2], p.frameCount / 500),\n      ];\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","module.exports = function isObject(obj) {\n  var type = typeof obj;\n  return !!obj && (type === 'function' || type === 'object');\n};","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nvar isArray = require('amp-is-array');\n\nvar isNumber = require('amp-is-number');\n\nvar isObject = require('amp-is-object');\n\nvar extend = require('amp-extend');\n\nvar degPerRadian = 180 / Math.PI;\n/**\n * @constructor Coordinate\n * @description Defines object which can convert between coordinate systems.\n * It is recommended to use one of the Coodinate.STATIC_CONSTRUCTOR functions\n * to generate your first coordinate before conversions. e.g. Coodinate.spherical(...)\n * @param {Object} config\n * {\n *     label: 'type of initial coordinate',\n *     coords: {\n *         x/y/z/r/t/p: 'k-v pairs'\n *     },\n *     isDegree: Boolean\n * }\n */\n\nvar Coordinate = function Coordinate(config) {\n  var isRadian,\n      isDegree,\n      pos = {},\n      _x,\n      _y,\n      _z,\n      _r,\n      _t,\n      _p; // Override select setters/getts\n\n\n  Object.defineProperty(this, \"isRadian\", {\n    get: function get(x) {\n      return isRadian;\n    },\n    set: function set(x) {\n      isRadian = !!x;\n\n      if (isDegree !== !x) {\n        isDegree = !x;\n      } // jshint ignore:line\n\n    }\n  });\n  Object.defineProperty(this, \"isDegree\", {\n    get: function get(x) {\n      return isDegree;\n    },\n    set: function set(x) {\n      isDegree = x;\n\n      if (isRadian !== !x) {\n        isRadian = !x;\n      } // jshint ignore:line\n\n    }\n  });\n  Object.defineProperty(pos, \"cartesian2d\", {\n    get: function get(x) {\n      return [_x, _y];\n    },\n    set: function set(x) {\n      _x = x[0];\n      _y = x[1];\n    }\n  });\n  Object.defineProperty(pos, \"cartesian3d\", {\n    get: function get(x) {\n      return [_x, _y, _z];\n    },\n    set: function set(x) {\n      _x = x[0];\n      _y = x[1];\n      _z = x[2];\n    }\n  });\n  Object.defineProperty(pos, \"polar\", {\n    get: function get(x) {\n      return [_r, _t];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n    }\n  });\n  Object.defineProperty(pos, \"cylindrical\", {\n    get: function get(x) {\n      return [_r, _t, _z];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n      _z = x[2];\n    }\n  });\n  Object.defineProperty(pos, \"spherical\", {\n    get: function get(x) {\n      return [_r, _t, _p];\n    },\n    set: function set(x) {\n      _r = x[0];\n      _t = x[1];\n      _p = x[2];\n    }\n  }); // init from config\n\n  if (config.isDegree && !config.isRadian) {\n    this.isDegree = true;\n  } else {\n    this.isRadian = true;\n  }\n\n  if (!config.label || !config.coords) {\n    throw new Error(\"no coordinate type defined\");\n  }\n\n  this.initialType = config.label;\n  this.pos = pos;\n  this.pos[config.label] = config.coords;\n};\n/**\n * @method cartesian\n * Converts current coordinate to cartesian\n * @function cartesian\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cartesian = function () {\n  return this.cart.apply(this, arguments);\n};\n/**\n * @method cart\n * Converts current coordinate to cartesian\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cart = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      return this.pos.cartesian2d;\n\n    case 'cartesian3d':\n      return this.pos.cartesian3d;\n\n    case 'polar':\n      this.pos.cartesian2d = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n      return this.pos.cartesian2d;\n\n    case 'cylindrical':\n      temp = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n      this.pos.cartesian3d = [temp[0], temp[1], this.pos.cylindrical[2]];\n      return this.pos.cartesian3d;\n\n    case 'spherical':\n      this.pos.cartesian3d = Coordinate.sphericalToCart3d(this.pos.spherical, this.isDegree);\n      return this.pos.cartesian3d;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method cylindrical\n * Converts current coordinate to cylindrical\n * @function cylindrical\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cylindrical = function () {\n  return this.cyl.apply(this, arguments);\n};\n/**\n * @method cyl\n * Converts current coordinate to cylindrical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.cyl = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      this.pos.cylindrical = [temp[0], temp[1], 0];\n      return this.pos.cylindrical;\n\n    case 'cartesian3d':\n      this.pos.cylindrical = Coordinate.cartesian3dToCylindrical(this.pos.cartesian3d, this.isDegree, options.center);\n      return this.pos.cylindrical;\n\n    case 'polar':\n      temp = this.pos.polar;\n      return [temp[0], temp[1], 0];\n\n    case 'cylindrical':\n      return this.pos.cylindrical;\n\n    case 'spherical':\n      this.pos.cylindrical = Coordinate.sphericalToCylindrical(this.pos.spherical, this.isDegree);\n      return this.pos.cylindrical;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method pol\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.pol = function () {\n  return this.polar.apply(this, arguments);\n};\n/**\n * @method polar\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.polar = function (options) {\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      this.pos.polar = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      return this.pos.polar;\n\n    case 'polar':\n      return this.pos.polar;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n};\n/**\n * @method spherical\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.spherical = function () {\n  return this.sph.apply(this, arguments);\n};\n/**\n * @method sph\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\n\n\nCoordinate.prototype.sph = function (options) {\n  var temp;\n  options = options || {};\n\n  switch (this.initialType) {\n    case 'cartesian2d':\n      temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n      this.pos.spherical = [temp[0], temp[1], 0];\n      return this.pos.spherical;\n\n    case 'cartesian3d':\n      this.pos.spherical = Coordinate.cartesian3dToSpherical(this.pos.cartesian3d, this.isDegree, options.center);\n      return this.pos.spherical;\n\n    case 'polar':\n      temp = this.pos.polar;\n      return [temp[0], temp[1], 0];\n\n    case 'cylindrical':\n      this.pos.spherical = Coordinate.cylindricalToSpherical(this.pos.cylindrical, this.isDegree);\n      return this.pos.spherical;\n\n    case 'spherical':\n      return this.pos.spherical;\n\n    default:\n      throw new Error('cannot convert to/from original/requested types');\n  }\n}; ///\n/// Static Constructor Functions\n///\n\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cartesian = function (x) {\n  return Coordinate.cart(x);\n};\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cart = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length < 2 || options.coords.length > 3) {\n      throw new Error('expected exactly 2 or exactly 3 cartesian options');\n    }\n\n    baseCoord = {\n      label: 'cartesian2d',\n      options: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n\n    if (options.coords.length === 2) {\n      return new Coordinate(baseCoord);\n    }\n\n    baseCoord.label = 'cartesian3d';\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [x,y,(z?)] coords');\n};\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cylindrical = function (x) {\n  return Coordinate.cyl(x);\n};\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.cyl = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 3) {\n      throw new Error('expected exactly 3 params [r, t, z]');\n    }\n\n    baseCoord = {\n      label: 'cylindrical',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [r, t, z] coords');\n};\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.polar = function (x) {\n  return Coordinate.pol(x);\n};\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.pol = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 2) {\n      throw new Error('expected exactly 2 params [r, t]');\n    }\n\n    baseCoord = {\n      label: 'polar',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected array of [r, t] options');\n};\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.spherical = function (options) {\n  return Coordinate.sph(options);\n};\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\n\n\nCoordinate.sph = function (options) {\n  var baseCoord;\n\n  if (isArray(options)) {\n    options = {\n      coords: options\n    };\n  }\n\n  if (isObject(options) && isArray(options.coords)) {\n    Coordinate.arrToNumeric(options.coords);\n\n    if (options.coords.length !== 3) {\n      throw new Error('expected exactly 3 params [r, t, p]');\n    }\n\n    baseCoord = {\n      label: 'spherical',\n      coords: options.coords\n    };\n    baseCoord = extend(baseCoord, options);\n    return new Coordinate(baseCoord);\n  }\n\n  throw new Error('expected options w/ array of [r, t, p] coords');\n};\n/**\n * Mutates an array of number-like looking values to purely numeric array\n * @example\n * [5, '2.4', '0'] => [5, 2.4, 0]\n * @param  {Array} nums\n * @return {undefined}\n */\n\n\nCoordinate.arrToNumeric = function (nums) {\n  var num;\n\n  if (!isArray(nums)) {\n    throw new TypeError(\"expected array of number-like values\");\n  }\n\n  for (var i = nums.length - 1; i >= 0; i--) {\n    num = nums[i];\n\n    if (typeof num === 'string') {\n      num = parseFloat(num);\n    }\n\n    if (!isNumber(num)) {\n      throw new TypeError(num + ' not numeric or numeric-like');\n    }\n  }\n};\n/**\n * Convert polar to 2d cartesian coordinates\n * @param  {Array}   rt        [radis, theta]\n * @param  {Boolean} isDegree specifies units\n * @return {Array}  [x, y]\n */\n\n\nCoordinate.polarToCart2d = function (rt, isDegree) {\n  var r, t, x, y;\n  r = rt[0];\n  t = rt[1];\n\n  if (isDegree) {\n    t = t * (1 / degPerRadian);\n  }\n\n  x = r * Math.cos(t);\n  y = r * Math.sin(t);\n  return [x, y];\n};\n/**\n * Convert cartesian 2d to polar coordinates\n * @param  {Array}  xy\n * @param {Boolean=} isDegree overrides default radian theta assumption\n * @param  {Array=} center [x, y] coords of center of circle.  Defaults to [0, 0],\n * however may be offset.  Note. Such functionality not supported yet for converting\n * polar to cartesian\n * @return {Array}  [radius, theta]\n */\n\n\nCoordinate.cartesian2dToPolar = function (xy, isDegree, center) {\n  var x, y, r, t;\n\n  if (!isArray(xy) && xy.length !== 2) {\n    throw new TypeError('expected [x, y] xy array');\n  }\n\n  x = xy[0];\n  y = xy[1];\n\n  if (center && !isArray(center) && center.length !== 2) {\n    throw new TypeError('expected [x, y] center array');\n  }\n\n  if (center) {\n    x = x - center[0];\n    y = y - center[1];\n  }\n\n  r = Math.sqrt(x * x + y * y);\n  t = Math.atan2(y, x);\n\n  if (isDegree) {\n    t = t * degPerRadian;\n  }\n\n  return [r, t];\n};\n/**\n * Convert 3d cartesian to 3d cylindrical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y] coords of center of circle\n * @return {Array}      [radius, theta, z]\n */\n\n\nCoordinate.cartesian3dToCylindrical = function (xyz, isDegree, center) {\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      rt;\n  rt = Coordinate.cartesian2dToPolar([x, y], isDegree, center);\n  return [rt[0], rt[1], z];\n};\n/**\n * Convert 3d cartesian to 3d spherical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y, z] coords of center of circle\n * @return {Array}      [radius, theta, phi]\n */\n\n\nCoordinate.cartesian3dToSpherical = function (xyz, isDegree, center) {\n  if (center && center.length !== 3) {\n    throw new Error('expected center value to have [x, y, z] coords' + 'for locating sphere center');\n  }\n\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      x2,\n      y2,\n      z2,\n      r,\n      t,\n      p;\n\n  if (center) {\n    x = x - center[0];\n    y = y - center[1];\n    z = z - center[2];\n  }\n\n  x2 = x * x;\n  y2 = y * y;\n  z2 = z * z;\n  r = Math.sqrt(x2 + y2 + z2);\n\n  if (!r) {\n    p = t = 0;\n  } else {\n    t = Math.atan2(y, x);\n    p = Math.atan2(Math.sqrt(x2 + y2), z);\n\n    if (isDegree) {\n      t = t * degPerRadian;\n      p = p * degPerRadian;\n    }\n  }\n\n  return [r, t, p];\n};\n/**\n * Convert a cylindrical to a spherical coordinates\n * @param  {Array}   rtz\n * @param  {Boolean} isDegree\n * @return {Array}   [radius, theta, phi]\n */\n\n\nCoordinate.cylindricalToSpherical = function (rtz, isDegree) {\n  var r = rtz[0],\n      t = rtz[1],\n      z = rtz[2];\n  var sr, sp; // sphere radius, sphere theta...\n\n  if (isDegree) {\n    t = t / degPerRadian;\n  }\n\n  sr = Math.sqrt(r * r + z * z);\n  sp = Math.atan2(r, z);\n\n  if (isDegree) {\n    sp = sp * degPerRadian;\n    t = t * degPerRadian;\n  }\n\n  return [sr, t, sp];\n};\n/**\n * Convert spherical to a cartesian coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\n\n\nCoordinate.sphericalToCart3d = function (rtp, isDegree) {\n  var r = rtp[0],\n      t = rtp[1],\n      p = rtp[2],\n      x,\n      y,\n      z;\n\n  if (isDegree) {\n    t = t / degPerRadian;\n    p = p / degPerRadian;\n  }\n\n  x = r * Math.sin(p) * Math.cos(t);\n  y = r * Math.sin(p) * Math.sin(t);\n  z = r * Math.cos(p);\n  return [x, y, z];\n};\n/**\n * Convert spherical to cylindrical coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\n\n\nCoordinate.sphericalToCylindrical = function (rtp, isDegree) {\n  var r = rtp[0],\n      t = rtp[1],\n      p = rtp[2],\n      cr,\n      z;\n\n  if (isDegree) {\n    t = t / degPerRadian;\n    p = p / degPerRadian;\n  }\n\n  cr = r * Math.sin(p);\n  z = r * Math.cos(p);\n\n  if (isDegree) {\n    t = t * degPerRadian;\n    p = p * degPerRadian;\n  }\n\n  return [cr, t, z];\n};\n\nmodule.exports = Coordinate;","require(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nvar toString = Object.prototype.toString;\nvar nativeIsArray = Array.isArray;\n\nmodule.exports = nativeIsArray || function isArray(obj) {\n  return toString.call(obj) === '[object Array]';\n};","require(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nvar toString = Object.prototype.toString;\n\nmodule.exports = function isNumber(obj) {\n  return toString.call(obj) === '[object Number]';\n};","var isObject = require('amp-is-object');\n\nmodule.exports = function (obj) {\n  if (!isObject(obj)) return obj;\n  var source, prop;\n\n  for (var i = 1, length = arguments.length; i < length; i++) {\n    source = arguments[i];\n\n    for (prop in source) {\n      obj[prop] = source[prop];\n    }\n  }\n\n  return obj;\n};"],"sourceRoot":""}