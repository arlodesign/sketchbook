{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/09.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","COLOR_RANGE","sketch","p","HUE","random","shapes","Shape","x","y","blur","this","size","width","canvas","createGraphics","height","hue","strokeWeight","background","prototype","draw","_p$animLoop","animLoop","noise1D","noise2D","theta","push","colorMode","HSB","translate","cos","stroke","map","SHAPE_COUNT","line","apply","concat","polarToCartesian","sin","pop","DURATION","frameCount","filter","BLUR","image","setup","frameRate","pixelDensity","createCanvas","Array","from","length","_","i","randomGaussian","createLoop","gif","render","open","noiseRadius","blendMode","BLEND","HARD_LIGHT","forEach","s","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_4__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-08-09-js-611067c40e222d07efc1.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && true;\nconst DURATION = 60;\nconst SHAPE_COUNT = 30;\nconst COLOR_RANGE = 30;\n\nconst sketch = function(p) {\n  const HUE = p.random(100 - COLOR_RANGE);\n  let shapes = [];\n\n  class Shape {\n    constructor(x, y, blur) {\n      this.x = x;\n      this.y = y;\n      this.size = p.random(p.width / 2);\n      this.blur = blur;\n      this.canvas = p.createGraphics(p.width, p.height);\n      this.hue = p.random(HUE, HUE + COLOR_RANGE);\n      this.strokeWeight = p.random(3);\n\n      this.canvas.background(128);\n    }\n    draw() {\n      const { x, y, size, blur, canvas, hue, strokeWeight } = this;\n      const { noise1D, noise2D, theta } = p.animLoop;\n\n      canvas.push();\n      canvas.colorMode(p.HSB, 100);\n      canvas.translate(x, y);\n      canvas.translate(\n        (p.width / 10) * noise1D(p.cos(theta)),\n        (p.width / 10) * noise1D(p.cos(theta))\n      );\n      canvas.stroke(hue, 70, p.map(blur, 0, SHAPE_COUNT / 2, 50, 100), 1);\n      canvas.strokeWeight(strokeWeight);\n\n      canvas.line(\n        0,\n        0,\n        ...polarToCartesian(\n          0,\n          0,\n          theta,\n          (p.width / 2) * p.map(noise2D(size, p.sin(theta)), -1, 1, 0.5, 1.5),\n          true\n        )\n      );\n      canvas.pop();\n      p.frameCount === DURATION * 30 && canvas.filter(p.BLUR, blur);\n      p.image(canvas, 0, 0);\n    }\n  }\n\n  p.setup = function() {\n    p.frameRate(30);\n\n    if (RENDER) {\n      p.pixelDensity(1);\n    }\n\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    shapes = Array.from(\n      { length: SHAPE_COUNT },\n      (_, i) =>\n        new Shape(\n          p.randomGaussian(p.width / 2, p.width / 20),\n          p.randomGaussian(p.height / 2, p.height / 20),\n          ((i - SHAPE_COUNT) * (i - SHAPE_COUNT)) / (SHAPE_COUNT * 2)\n        )\n    );\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(HUE, 10, 90);\n    p.blendMode(p.HARD_LIGHT);\n\n    shapes.forEach(s => s.draw());\n\n    !RENDER && p.frameCount === DURATION * 30 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}