{"version":3,"sources":["webpack:///./src/lib/addNoise.js","webpack:///./src/pages/sketch/2019/04/14.js"],"names":["addNoise","p","intensity","PTS","width","height","push","i","fill","noStroke","ellipse","randomGaussian","pixelDensity","pop","sketch","w","h","SIZES","grid","Doodad","x","y","size","this","random","arc","triangle","translate","rotate","HALF_PI","PI","beginShape","vertex","endShape","CLOSE","setup","createCanvas","colorMode","HSB","hue","background","floor","xx","yy","visited","draw","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-04-14-js-afcf42831476c69913de.js","sourcesContent":["const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport addNoise from \"~lib/addNoise\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 60;\n  const SIZES = [1, 2, 3, 5, 8, 13, 21];\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size * GRID_SIZE;\n\n      p.random() < 0.3 ? this.arc() : this.triangle();\n    }\n    arc() {\n      p.push();\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\n      p.arc(\n        -this.size / 2,\n        -this.size / 2,\n        this.size * 2,\n        this.size * 2,\n        0,\n        p.HALF_PI\n      );\n      p.pop();\n    }\n    triangle() {\n      p.push();\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\n      p.beginShape();\n      p.vertex(-this.size / 2, -this.size / 2);\n      p.vertex(this.size / 2, this.size / 2);\n      p.vertex(-this.size / 2, this.size / 2);\n      p.endShape(p.CLOSE);\n      p.pop();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    const hue = p.random(100);\n    p.background(hue, 25, 25);\n    p.fill(100 - hue, 50, 75);\n\n    p.noStroke();\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      addNoise(p, 0.1);\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}