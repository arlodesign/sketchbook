{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/11.js","webpack:///./src/lib/addNoise.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js"],"names":["sketch","p","HUE","random","setup","frameRate","createCanvas","background","colorMode","HSB","createLoop","noiseRadius","blendMode","HARD_LIGHT","noSmooth","addNoise","draw","animLoop","theta","noise","noise1D","i","point","polarToCartesian","width","height","ease","stroke","ITERATIONS","noFill","push","translate","rotate","ellipse","map","pt","Math","max","abs","pop","frameCount","console","log","DURATION","noLoop","location","path","pathname","description","intensity","PTS","fill","noStroke","randomGaussian","pixelDensity","polarToCartesianX","center","angle","distance","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"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","file":"component---src-pages-sketch-2020-01-11-js-90ad8f603bae9542074c.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport addNoise from \"~lib/addNoise\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport { easeInOutQuint as ease } from \"~lib/easing\";\n\nconst sketch = function(p) {\n  const DURATION = 360;\n  const RATE = 60;\n  const ITERATIONS = 2;\n  const HUE = p.random();\n\n  let i = 0;\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.background(192);\n    p.colorMode(p.HSB, ITERATIONS);\n    p.createLoop(DURATION, {\n      noiseRadius: 0.8,\n    });\n    p.blendMode(p.HARD_LIGHT);\n    p.noSmooth();\n    addNoise(p);\n  };\n\n  p.draw = function() {\n    const { theta, noise, noise1D } = p.animLoop;\n\n    for (let i = 0; i < ITERATIONS; i++) {\n      const point = polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        theta,\n        ease(noise1D(10)) * p.width * (i + 1),\n        true\n      );\n      p.stroke(HUE + i, ITERATIONS * 0.75, ITERATIONS, ITERATIONS / 10);\n      p.noFill();\n\n      p.push();\n\n      p.translate(...point);\n      p.rotate((-theta * ITERATIONS) / (i + 1));\n      p.ellipse(\n        0,\n        0,\n        (p.noise(...point.map(pt => pt / 100), i) * p.height) / 2,\n        Math.max(100 * (i + 1) * ease(p.abs(noise())), 1)\n      );\n      p.pop();\n    }\n\n    p.frameCount % 1000 === 0 &&\n      console.log(`${p.frameCount} / ${DURATION * RATE}`);\n    p.frameCount === DURATION * RATE && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n"],"sourceRoot":""}