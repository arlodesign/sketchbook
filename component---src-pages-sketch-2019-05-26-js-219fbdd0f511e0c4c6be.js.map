{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/26.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","setup","createCanvas","noStroke","fill","draw","background","r","START","map","frameCount","SIZE","DIST","sin","a","TWO_PI","polarToCartesian","width","height","x","y","circle","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"kKAIMA,EAAS,SAASC,GAItBA,EAAEC,MAAQ,WACRD,EAAEE,aAAa,IAAK,KACpBF,EAAEG,WACFH,EAAEI,KAAK,IAGTJ,EAAEK,KAAO,WACPL,EAAEM,WAAW,KACb,IAAK,IAAIC,EAAI,EAAGA,GAXJ,GAWgBA,IAW1B,IAVA,IAAMC,EAAQR,EAAES,IACdF,EACA,EAdQ,GAgBRP,EAAEU,WAAF,GACAV,EAAEU,WAAF,KAEIC,EAAOX,EAAES,IAAIF,EAAG,EAnBZ,GAmBsB,GAAI,GAC9BK,EAAOZ,EAAES,IAAIT,EAAEa,IAAIb,EAAEU,WAAF,MAA+B,EAAG,EAAG,EAAG,GAExDI,EAAI,EAAIN,EAAOM,EAAId,EAAEe,OAASP,EAAOM,GAAKd,EAAEe,OAASR,EAAG,CAAC,IAAD,EAC9CS,YACfhB,EAAEiB,MAAQL,EACVZ,EAAEkB,OAASN,EACXE,EACAd,EAAES,IAAIF,EAAG,EA3BH,GA2Ba,EAAc,KAAXP,EAAEkB,SAJlBC,EADuD,EACvDA,EAAGC,EADoD,EACpDA,EAMXpB,EAAEqB,OAAOF,EAAGC,EAAGT,GACfX,EAAEqB,OAAOrB,EAAEiB,MAAQE,EAAGnB,EAAEkB,OAASE,EAAGT,MAM7B,0BAAGW,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcvB,OAAQA,EAAQwB,KAAMD,EAASE,SAAUC,YAAY,O,kCC1CrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKjB,IAAIe,GAASC,GAsB9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMnB,EAAIe,EAAUJ,KAAKC,IAAIH,GAASQ,EAChChB,EAAIe,EAAUL,KAAKjB,IAAIe,GAASS,EACtC,OAAOC,EAAU,CAACnB,EAAGC,GAAK,CAAED,IAAGC,MAIlBJ,IAzBU,SACvBkB,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMnB,EAAIO,EAAkBQ,EAASN,EAAOC,GACtCT,EAAIY,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAACnB,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-05-26-js-219fbdd0f511e0c4c6be.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RINGS = 75;\n  const SPEED = 5;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.fill(0);\n  };\n\n  p.draw = function() {\n    p.background(255);\n    for (let r = 1; r <= RINGS; r++) {\n      const START = p.map(\n        r,\n        1,\n        RINGS,\n        p.frameCount / (SPEED * 10),\n        p.frameCount / (SPEED * 100)\n      );\n      const SIZE = p.map(r, 1, RINGS, 10, 0);\n      const DIST = p.map(p.sin(p.frameCount / (SPEED * 25)), -1, 1, 3, 2);\n\n      for (let a = 0 + START; a < p.TWO_PI + START; a += p.TWO_PI / r) {\n        const { x, y } = polarToCartesian(\n          p.width / DIST,\n          p.height / DIST,\n          a,\n          p.map(r, 1, RINGS, 0, p.height * 0.666)\n        );\n        p.circle(x, y, SIZE);\n        p.circle(p.width - x, p.height - y, SIZE);\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}