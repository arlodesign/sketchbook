{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/06.js"],"names":["sketch","p","img","RENDER","getURLParams","render","preload","loadImage","withPrefix","setup","pixelDensity","frameRate","createCanvas","WEBGL","createLoop","gif","open","noiseRadius","draw","animLoop","theta","noise2D","background","texture","x","width","y","height","push","translate","beginShape","vertex","sin","endShape","CLOSE","pop","location","path","pathname","description"],"mappings":"+FAAA,qEAKMA,EAAS,SAASC,GACtB,IAKIC,EALEC,EAASF,EAAEG,eAAeC,OAOhCJ,EAAEK,QAAU,WACVJ,EAAMD,EAAEM,UAAUC,qBAAW,uBAG/BP,EAAEQ,MAAQ,WACRR,EAAES,aAAaP,EAAS,EAAI,GAC5BF,EAAEU,UAXS,IAYXV,EAAEW,aAAa,IAAK,IAAKX,EAAEY,OAE3BZ,EAAEa,WAfa,GAeQ,CACrBC,MAAKZ,GAAS,CAAEE,QAAQ,EAAOW,MAAM,GACrCC,YAAa,MAIjBhB,EAAEiB,KAAO,WAAY,IAAD,EACSjB,EAAEkB,SAArBC,EADU,EACVA,MAAOC,EADG,EACHA,QAEfpB,EAAEqB,WAAW,GACbrB,EAAEsB,QAAQrB,GAEV,IAAK,IAAIsB,GAAKvB,EAAEwB,MAAQ,EAAGD,EAAIvB,EAAEwB,MAAQ,EAAGD,GAzBjC,GA0BT,IAAK,IAAIE,GAAKzB,EAAE0B,OAAS,EAAGD,EAAIzB,EAAE0B,OAAS,EAAGD,GA1BrC,GA2BPzB,EAAE2B,OACF3B,EAAE4B,UAAUL,EAAGE,GAEfzB,EAAE6B,aACF7B,EAAE8B,OACA,EACA,EACC9B,EAAEwB,MAAQ,EAAKxB,EAAE+B,IAAIZ,GAASC,EAAQG,EAAGE,GAC1CF,EAAIvB,EAAEwB,MAAQ,EACdC,EAAIzB,EAAE0B,OAAS,GAEjB1B,EAAE8B,OAtCK,GAwCL,EACC9B,EAAEwB,MAAQ,EAAKxB,EAAE+B,IAAIZ,GAASC,EAAQG,EAzClC,GAyC4CE,GACjDF,EAAIvB,EAAEwB,MAAQ,EA1CT,GA2CLC,EAAIzB,EAAE0B,OAAS,GAEjB1B,EAAE8B,OA7CK,MAgDJ9B,EAAEwB,MAAQ,EAAKxB,EAAE+B,IAAIZ,GAASC,EAAQG,EAhDlC,GAgD4CE,EAhD5C,IAiDLF,EAAIvB,EAAEwB,MAAQ,EAjDT,GAkDLC,EAAIzB,EAAE0B,OAAS,EAlDV,IAoDP1B,EAAE8B,OACA,EArDK,GAuDJ9B,EAAEwB,MAAQ,EAAKxB,EAAE+B,IAAIZ,GAASC,EAAQG,EAAGE,EAvDrC,IAwDLF,EAAIvB,EAAEwB,MAAQ,EACdC,EAAIzB,EAAE0B,OAAS,EAzDV,IA4DP1B,EAAEgC,SAAShC,EAAEiC,OACbjC,EAAEkC,QAMK,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcpC,OAAQA,EAAQqC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-01-06-js-b727734816a18b5b9ecf.js","sourcesContent":["import React from \"react\";\nimport { withPrefix } from \"gatsby\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 20;\n  const RATE = 30;\n  const GRID = 60;\n\n  let img;\n\n  p.preload = function() {\n    img = p.loadImage(withPrefix(\"/assets/susan.png\"));\n  };\n\n  p.setup = function() {\n    p.pixelDensity(RENDER ? 2 : 1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840, p.WEBGL);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { theta, noise2D } = p.animLoop;\n\n    p.background(0);\n    p.texture(img);\n\n    for (let x = -p.width / 2; x < p.width / 2; x += GRID) {\n      for (let y = -p.height / 2; y < p.height / 2; y += GRID) {\n        p.push();\n        p.translate(x, y);\n\n        p.beginShape();\n        p.vertex(\n          0,\n          0,\n          (p.width / 2) * p.sin(theta) * noise2D(x, y),\n          x + p.width / 2,\n          y + p.height / 2\n        );\n        p.vertex(\n          GRID,\n          0,\n          (p.width / 2) * p.sin(theta) * noise2D(x + GRID, y),\n          x + p.width / 2 + GRID,\n          y + p.height / 2\n        );\n        p.vertex(\n          GRID,\n          GRID,\n          (p.width / 2) * p.sin(theta) * noise2D(x + GRID, y + GRID),\n          x + p.width / 2 + GRID,\n          y + p.height / 2 + GRID\n        );\n        p.vertex(\n          0,\n          GRID,\n          (p.width / 2) * p.sin(theta) * noise2D(x, y + GRID),\n          x + p.width / 2,\n          y + p.height / 2 + GRID\n        );\n\n        p.endShape(p.CLOSE);\n        p.pop();\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}