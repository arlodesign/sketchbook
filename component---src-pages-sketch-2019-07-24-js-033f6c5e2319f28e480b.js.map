{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/24.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","RENDER","process","DEV","sketch","p","setup","pixelDensity","frameRate","createCanvas","noStroke","colorMode","HSB","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","OVERLAY","push","translate","width","height","size","i","rotate","map","animLoop","theta","TWO_PI","fill","beginShape","vertex","noise2D","endShape","CLOSE","pop","SketchPage"],"mappings":"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","file":"component---src-pages-sketch-2019-07-24-js-033f6c5e2319f28e480b.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.colorMode(p.HSB, 1);\n\n    p.createLoop(30, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0.5);\n    p.blendMode(p.OVERLAY);\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n\n    const size = p.width / 2;\n\n    for (let i = 0; i < 1; i += 0.1) {\n      p.push();\n      p.rotate(\n        p.map(p.sin(p.animLoop.theta), -1, 1, -p.TWO_PI, p.TWO_PI) * (i + 0.1)\n      );\n      p.fill(i, 1, 1, 0.5);\n      p.beginShape();\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          0,\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(i * p.cos(p.animLoop.theta), 0),\n              -1,\n              1,\n              0.25,\n              1\n            ),\n          true\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * (2 / 5),\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(\n                i * p.cos(p.animLoop.theta),\n                p.TWO_PI * (2 / 5)\n              ),\n              -1,\n              1,\n              0.5,\n              2\n            ),\n          true\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * (4 / 5),\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(\n                i * p.cos(p.animLoop.theta),\n                p.TWO_PI * (4 / 5)\n              ),\n              -1,\n              1,\n              0.5,\n              3\n            ),\n          true\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * (1 / 5),\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(\n                i * p.cos(p.animLoop.theta),\n                p.TWO_PI * (1 / 5)\n              ),\n              -1,\n              1,\n              0.5,\n              4\n            ),\n          true\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * (3 / 5),\n          size *\n            i *\n            p.map(\n              p.animLoop.noise2D(\n                i * p.cos(p.animLoop.theta),\n                p.TWO_PI * (3 / 5)\n              ),\n              -1,\n              1,\n              0.5,\n              5\n            ),\n          true\n        )\n      );\n      p.endShape(p.CLOSE);\n      p.pop();\n    }\n    p.pop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}