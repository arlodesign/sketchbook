{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/15.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js"],"names":["sketch","p","cols","rows","gridWidth","gridHeight","RENDER","getURLParams","render","HEX_WIDTH","sqrt","hexagons","getColor","x","y","animLoop","theta","noise","ease","cos","dist","polarToCartesian","width","height","Hexagon","this","draw","stroke","fill","beginShape","a","TWO_PI","vertex","endShape","setup","pixelDensity","frameRate","createCanvas","background","createLoop","gif","open","noiseRadius","floor","HEX_HEIGHT","hexX","hexY","HEX_RADIUS","push","forEach","hex","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"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","file":"component---src-pages-sketch-2020-02-15-js-c9bd438faf30089d74b9.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport { easeInOutQuad as ease } from \"~lib/easing\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 60;\n  const RATE = 30;\n  const HEX_RADIUS = 15;\n  const HEX_WIDTH = p.sqrt(3) * HEX_RADIUS;\n  const HEX_HEIGHT = HEX_RADIUS * 2;\n\n  let hexagons = [];\n  let cols;\n  let rows;\n  let gridWidth;\n  let gridHeight;\n\n  const getColor = (x, y) => {\n    const { theta, noise } = p.animLoop;\n    return (\n      ease(\n        (p.cos(\n          p.dist(\n            x,\n            y,\n            ...polarToCartesian(\n              p.width / 2,\n              p.height / 2,\n              theta,\n              (p.width / 3) * noise(),\n              true\n            )\n          ) + theta\n        ) +\n          1) /\n          2\n      ) * 255\n    );\n  };\n\n  class Hexagon {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    draw() {\n      p.stroke(getColor(this.x, this.y));\n      p.fill(getColor(this.x, this.y));\n      p.beginShape();\n      for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 6) {\n        p.vertex(\n          ...polarToCartesian(\n            this.x,\n            this.y,\n            a + p.TWO_PI / 12,\n            HEX_RADIUS,\n            true\n          )\n        );\n      }\n      p.endShape();\n    }\n  }\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n\n    cols = p.floor((p.width - HEX_WIDTH / 2) / HEX_WIDTH);\n    rows = p.floor((p.width - HEX_HEIGHT / 4) / (HEX_HEIGHT * 0.75));\n    gridWidth = cols * HEX_WIDTH + HEX_WIDTH / 2;\n    gridHeight = rows * (HEX_HEIGHT * 0.75) + HEX_HEIGHT / 4;\n\n    for (let x = 0; x < cols; x++) {\n      for (let y = 0; y < rows; y++) {\n        const hexX =\n          x * HEX_WIDTH +\n          (y % 2 ? HEX_WIDTH : HEX_WIDTH / 2) +\n          (p.width - gridWidth) / 2;\n        const hexY =\n          y * HEX_HEIGHT * 0.75 + HEX_HEIGHT / 2 + (p.height - gridHeight) / 2;\n        hexagons.push(new Hexagon(hexX, hexY));\n      }\n    }\n  };\n\n  p.draw = function() {\n    p.background(0);\n    hexagons.forEach(hex => hex.draw());\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n"],"sourceRoot":""}