{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/15.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","SPEEDS","Array","from","TWO_PI","random","ANGLES","HALF_PI","PI","setup","createCanvas","noStroke","draw","DIST","height","blendMode","BLEND","background","MULTIPLY","fill","quad","polarToCartesian","width","i","length","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-05-15-js-549ecd994da38d074d28.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const SPEEDS = Array.from(Array(4), () => (p.TWO_PI * p.random()) / 750);\n  const ANGLES = [0, p.HALF_PI, p.PI, p.PI + p.HALF_PI];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    const DIST = p.height / 2;\n\n    p.blendMode(p.BLEND);\n    p.background(255);\n\n    p.blendMode(p.MULTIPLY);\n\n    p.fill(\"yellow\");\n    p.quad(\n      ...polarToCartesian(p.width / 2, p.height / 2, ANGLES[0], DIST, true),\n      ...polarToCartesian(p.width / 2, p.height / 2, ANGLES[1], DIST, true),\n      ...polarToCartesian(p.width / 2, p.height / 2, ANGLES[2], DIST, true),\n      ...polarToCartesian(p.width / 2, p.height / 2, ANGLES[3], DIST, true)\n    );\n\n    p.fill(\"magenta\");\n    p.quad(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        p.TWO_PI / 3 + ANGLES[0],\n        DIST,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        p.TWO_PI / 3 + ANGLES[1],\n        DIST,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        p.TWO_PI / 3 + ANGLES[2],\n        DIST,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        p.TWO_PI / 3 + ANGLES[3],\n        DIST,\n        true\n      )\n    );\n\n    p.fill(\"cyan\");\n    p.quad(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        (p.TWO_PI / 3) * 2 + ANGLES[0],\n        DIST,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        (p.TWO_PI / 3) * 2 + ANGLES[1],\n        DIST,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        (p.TWO_PI / 3) * 2 + ANGLES[2],\n        DIST,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        (p.TWO_PI / 3) * 2 + ANGLES[3],\n        DIST,\n        true\n      )\n    );\n\n    for (let i = 0; i < ANGLES.length; i++) {\n      ANGLES[i] += SPEEDS[i];\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}