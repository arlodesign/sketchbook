{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/18.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","aElement","i","aPosition","setup","createCanvas","colorMode","HSL","background","noFill","blendMode","OVERLAY","ellipseMode","CENTER","draw","NOISE","noise","frameCount","push","stroke","map","cos","sin","translate","polarToCartesian","width","height","rotate","arc","PI","pop","TWO_PI","HALF_PI","noLoop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","y","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"6jBAKA,IAAMA,EAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,IAIjBC,EAAW,EACXC,EAAI,EACJC,EAAY,EAEhBL,EAAEM,MAAQ,WACRN,EAAEO,aAAa,IAAK,KACpBP,EAAEQ,UAAUR,EAAES,IAAK,KACnBT,EAAEU,WAAWT,EAAK,GAAI,IACtBD,EAAEW,SACFX,EAAEY,UAAUZ,EAAEa,SACdb,EAAEc,YAAYd,EAAEe,SAGlBf,EAAEgB,KAAO,WACP,IAAMC,EAAQjB,EAAEkB,MAAMlB,EAAEmB,WAAF,KAAmCd,GAEzDL,EAAEoB,OACFpB,EAAEqB,OACArB,EAAEsB,IAAItB,EAAEuB,IAAIvB,EAAEmB,WAAF,MAAoC,EAAG,EAAGlB,EAAKA,EAAM,IACjE,GACAD,EAAEsB,IAAItB,EAAEwB,IAAInB,IAAa,EAAG,EAAG,GAAI,IACnC,IAAM,EAAIY,IAEZjB,EAAEyB,UAAF,MAAAzB,EAAC,EACI0B,YACD1B,EAAE2B,MAAQ,EACV3B,EAAE4B,OAAS,EACXvB,EACCL,EAAE2B,MAAQ,EAAKV,GAChB,KAGJjB,EAAE6B,OAAO1B,GACTH,EAAE8B,IACA,EACA,EACA9B,EAAE2B,MAAQV,EACV,GACAjB,EAAEmB,WAzCa,GA0CfnB,EAAEmB,WA1Ca,GA0CanB,EAAE+B,IAEhC/B,EAAEgC,MACF3B,GAAaL,EAAEiC,OA5CH,IA8CZ9B,GAAYH,EAAEkC,QAAF,MACR7B,EAAYL,EAAEiC,SAChB5B,EAAY,IACZD,EAlDe,IAoDbJ,EAAEmC,YAYKC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQrC,OAAQA,O,kCCnEpB,sCAiBMsC,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKtB,IAAIiB,GAASC,EAChCK,EAAIP,EAAUM,KAAKrB,IAAIgB,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE,MAIlBpB,IAzBU,SACvBY,EACAC,EACAC,EACAO,EACAJ,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACI,EAAQR,EAAOO,GACxC,OAAOC,EAASH,KAAKtB,IAAIiB,GAASO,EAYxBE,CAAkBX,EAASE,EAAOO,GACtCD,EAXkB,SAACE,EAAQR,EAAOO,GACxC,OAAOC,EAASH,KAAKrB,IAAIgB,GAASO,EAUxBG,CAAkBX,EAASC,EAAOO,GAC5C,OAAOJ,EAAU,CAACC,EAAGE,GAAK,CAAEF,IAAGE","file":"component---src-pages-sketch-2019-07-18-js-6f5d39e077b19a97c48c.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const HUE = p.random(80);\n  const ITERATIONS = 15;\n  const COUNT = 720;\n\n  let aElement = 0;\n  let i = 1;\n  let aPosition = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 100);\n    p.background(HUE, 30, 80);\n    p.noFill();\n    p.blendMode(p.OVERLAY);\n    p.ellipseMode(p.CENTER);\n  };\n\n  p.draw = function() {\n    const NOISE = p.noise(p.frameCount / (ITERATIONS * 100), aPosition);\n\n    p.push();\n    p.stroke(\n      p.map(p.cos(p.frameCount / (ITERATIONS * 10)), -1, 1, HUE, HUE + 20),\n      50,\n      p.map(p.sin(aPosition), -1, 1, 90, 25),\n      20 * (1 - NOISE)\n    );\n    p.translate(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        aPosition,\n        (p.width / 3) * NOISE,\n        true\n      )\n    );\n    p.rotate(aElement);\n    p.arc(\n      0,\n      0,\n      p.width * NOISE,\n      50,\n      p.frameCount / ITERATIONS,\n      p.frameCount / ITERATIONS + p.PI\n    );\n    p.pop();\n    aPosition += p.TWO_PI / COUNT;\n\n    aElement -= p.HALF_PI / (COUNT * ITERATIONS);\n    if (aPosition > p.TWO_PI) {\n      aPosition = 0;\n      i++;\n      if (i > ITERATIONS) {\n        p.noLoop();\n      }\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}