{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/17.js"],"names":["sketch","p","w","h","GRID_SIZE","SIZES","LINES","grid","Doodad","x","y","size","this","lines","drawFunc","random","squareH","squareV","arc","push","translate","i","line","pop","rotate","HALF_PI","PI","setup","createCanvas","colorMode","HSB","hue","background","stroke","strokeWeight","strokeCap","PROJECT","noFill","floor","width","height","xx","yy","visited","draw","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-04-17-js-91e68d4450c1aac46f3f.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 30;\n  const SIZES = [1, 2, 5];\n  const LINES = 3;\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size * GRID_SIZE;\n      this.lines = size * LINES;\n\n      this.drawFunc = p.random([\n        this.squareH,\n        this.squareV,\n        this.arc,\n        this.arc,\n      ]);\n      this.drawFunc();\n    }\n    squareH() {\n      p.push();\n      p.translate(this.x, this.y);\n      for (let i = 0; i <= this.size; i += this.size / this.lines) {\n        p.line(0, i, this.size, i);\n      }\n      p.pop();\n    }\n    squareV() {\n      p.push();\n      p.translate(this.x, this.y);\n      for (let i = 0; i <= this.size; i += this.size / this.lines) {\n        p.line(i, 0, i, this.size);\n      }\n      p.pop();\n    }\n\n    arc() {\n      p.push();\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\n      for (let i = 0; i <= this.size * 2; i += (this.size * 2) / this.lines) {\n        p.arc(-this.size / 2, -this.size / 2, i, i, 0, p.HALF_PI);\n      }\n      p.pop();\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    p.colorMode(p.HSB, 100);\n\n    const hue = p.random(100);\n    p.background(hue, 75, 100);\n    p.stroke(hue, 50, 15);\n    p.strokeWeight(2);\n    p.strokeCap(p.PROJECT);\n\n    p.noFill();\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}