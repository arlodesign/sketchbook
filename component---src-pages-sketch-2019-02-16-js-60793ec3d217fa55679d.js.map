{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/02/16.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","getColor","color","abs","PI","setup","createCanvas","WEBGL","stroke","noFill","noiseDetail","rectMode","CENTER","camera","width","height","draw","background","points","col","N","noise","frameCount","push","map","forEach","point","line","GRID_SIZE","translate","noStroke","fill","sphere","pop","location","path","pathname"],"mappings":"4FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,+5BCpBjC,IAAME,EAAS,SAASC,GAItB,SAASC,EAASjB,GAChB,OAAOgB,EAAEE,MACe,IAAtBF,EAAEG,IAAIH,EAAEb,IAAIH,IACkB,IAA9BgB,EAAEG,IAAIH,EAAEX,KAAKL,EAAQgB,EAAEI,KACvB,KAIJJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,IAAKN,EAAEO,OAC3BP,EAAEQ,OAAO,KACTR,EAAES,SACFT,EAAEU,YAAY,EAAG,IACjBV,EAAEW,SAASX,EAAEY,QACbZ,EAAEa,QACCb,EAAEc,MAAQ,GACVd,EAAEe,OAAS,EAlBF,KAoBTf,EAAEc,MAAQ,GACVd,EAAEe,OAAS,EACZ,EACA,EACA,EACA,IAIJf,EAAEgB,KAAO,WACPhB,EAAEiB,WAAW,GAIb,IAHA,IAAIrB,EAhCY,GAgCII,EAAEc,MAAQ,EAC1BjB,EAjCY,GAiCIG,EAAEe,OAAS,EAC3BG,EAAS,GACNtB,EAAI,GAAG,CAEZ,IADA,IAAIuB,EAAM,GACHtB,EAAI,GAAG,CACZ,IAAMuB,EAAIpB,EAAEqB,MACT,IAADzB,EACC,IAADC,EACAG,EAAEsB,WAAa,KAEjBH,EAAII,KAAK,CAAC3B,EAAGC,EAAGG,EAAEwB,IAAIJ,EAAG,EAAG,GA1CpB,WA2CRvB,GA5CY,GA8CdqB,EAAOK,KAAKJ,GACZvB,GA/Cc,GAgDdC,EAhDc,GAgDEG,EAAEe,OAAS,EAE7BG,EAAOO,SAAQ,SAAAN,GACbA,EAAIM,SAAQ,SAAAC,GACV1B,EAAEQ,OAAOP,EAASyB,EAAM,GAAK,MAC7B1B,EAAE2B,KAAF,MAAA3B,EAAC,EACI0B,GADJ,QAEC5C,aAAmBkB,EAAEc,MAAQ,EAAGd,EAAEsB,WAAa,IAAKM,KACpDxC,aAAmBY,EAAEe,OAAS,EAAGf,EAAEsB,WAAa,IAAKM,MAvD/C,OA0DR5B,EAAEuB,OACFvB,EAAE6B,UAAF,MAAA7B,EAAC,EAAc0B,IACf1B,EAAE8B,WACF9B,EAAE+B,KAAK9B,EAASyB,EAAM,GAAK,MAC3B1B,EAAEgC,OAAOJ,GACT5B,EAAEiC,cAMK,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcnC,OAAQA,EAAQoC,KAAMD,EAASE","file":"component---src-pages-sketch-2019-02-16-js-60793ec3d217fa55679d.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport { polarToCartesianX, polarToCartesianY } from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 20;\n  const MAX_Z = 400;\n\n  function getColor(angle) {\n    return p.color(\n      p.abs(p.cos(angle)) * 100,\n      p.abs(p.sin(-angle + p.PI)) * 100,\n      100\n    );\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n    p.stroke(255);\n    p.noFill();\n    p.noiseDetail(4, 0.5);\n    p.rectMode(p.CENTER);\n    p.camera(\n      -p.width / 4,\n      -p.height / 4,\n      MAX_Z,\n      -p.width / 4,\n      -p.height / 4,\n      0,\n      0,\n      1,\n      0\n    );\n  };\n\n  p.draw = function() {\n    p.background(0);\n    let x = GRID_SIZE - p.width / 2;\n    let y = GRID_SIZE - p.height / 2;\n    let points = [];\n    while (x < 0) {\n      let col = [];\n      while (y < 0) {\n        const N = p.noise(\n          x * (GRID_SIZE / 1000),\n          y * (GRID_SIZE / 1000),\n          p.frameCount / 100\n        );\n        col.push([x, y, p.map(N, 0, 1, -MAX_Z, MAX_Z)]);\n        y += GRID_SIZE;\n      }\n      points.push(col);\n      x += GRID_SIZE;\n      y = GRID_SIZE - p.height / 2;\n    }\n    points.forEach(col => {\n      col.forEach(point => {\n        p.stroke(getColor(point[2] / 100));\n        p.line(\n          ...point,\n          polarToCartesianX(-p.width / 4, p.frameCount / 100, GRID_SIZE * 10),\n          polarToCartesianY(-p.height / 4, p.frameCount / 100, GRID_SIZE * 10),\n          -MAX_Z\n        );\n        p.push();\n        p.translate(...point);\n        p.noStroke();\n        p.fill(getColor(point[2] / 100));\n        p.sphere(GRID_SIZE / 10);\n        p.pop();\n      });\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n"],"sourceRoot":""}