{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/13.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","setup","pixelDensity","frameRate","createCanvas","strokeWeight","createLoop","gif","render","open","noiseRadius","draw","prevPoint","blendMode","BLEND","background","MULTIPLY","a","TWO_PI","push","stroke","floor","map","translate","width","height","rotate","animLoop","theta","newPoint","line","pop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,m6BCnBjC,IAAME,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtBA,EAAEC,MAAQ,WACJL,IACFI,EAAEE,aAAa,GACfF,EAAEG,UAAU,KAGdH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,aAAa,IAEfL,EAAEM,WAAW,GAAI,CACfC,MAAKX,GAAS,CAAEY,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBV,EAAEW,KAAO,WAKP,IAAIC,EAJJZ,EAAEa,UAAUb,EAAEc,OACdd,EAAEe,WAAW,KACbf,EAAEa,UAAUb,EAAEgB,UAId,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAEkB,OAAQD,GAAKjB,EAAEkB,OAAS,IAAM,CAClDlB,EAAEmB,OACFnB,EAAEoB,OACA,CAAC,UAAW,SAAU,QACpBpB,EAAEqB,MAAMrB,EAAEsB,IAAItB,EAAEhB,IAAIiC,IAAK,EAAG,EAAG,EAAG,kBAGtCjB,EAAEuB,UAAUvB,EAAEwB,MAAQ,EAAGxB,EAAEyB,OAAS,GACpCzB,EAAE0B,OAAOT,EAAIjB,EAAEsB,IAAItB,EAAEhB,IAAIgB,EAAE2B,SAASC,QAAS,EAAG,EAAG,EAAG,IACtD,IAAIC,EAAWlC,YACb,EACA,EACAsB,EACAjB,EAAEwB,MAAQxB,EAAEhB,IAAIgB,EAAEsB,IAAItB,EAAEd,IAAIc,EAAE2B,SAASC,QAAS,EAAG,EAAG,EAAG,IAAMX,IAC/D,GAEEL,GACFZ,EAAE8B,KAAF,MAAA9B,EAAC,EAASY,GAAT,SAAuBiB,KAE1B7B,EAAE+B,MACFnB,EAAYiB,KAKH,0BAAGG,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcjC,OAAQA,EAAQkC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-07-13-js-251763e9cee386146175.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && true;\n\nconst sketch = function(p) {\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(15);\n    }\n\n    p.createCanvas(660, 660);\n    p.strokeWeight(20);\n\n    p.createLoop(40, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.MULTIPLY);\n\n    let prevPoint;\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 1000) {\n      p.push();\n      p.stroke(\n        [\"magenta\", \"yellow\", \"cyan\"][\n          p.floor(p.map(p.cos(a), -1, 1, 0, 2.99999999999))\n        ]\n      );\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(a * p.map(p.cos(p.animLoop.theta), -1, 1, 1, 3));\n      let newPoint = polarToCartesian(\n        0,\n        0,\n        a,\n        p.width * p.cos(p.map(p.sin(p.animLoop.theta), -1, 1, 1, 10) * a),\n        true\n      );\n      if (prevPoint) {\n        p.line(...prevPoint, ...newPoint);\n      }\n      p.pop();\n      prevPoint = newPoint;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}