{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/12/19.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","RENDER","getURLParams","render","COLORS","shuffle","setup","pixelDensity","frameRate","createCanvas","createLoop","gif","open","strokeWeight","strokeJoin","ROUND","draw","theta","animLoop","blendMode","BLEND","background","MULTIPLY","x1","forEach","c","i","stroke","beginShape","pt","map","POINTS","height","width","floor","dist","curveVertex","endShape","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,i6BCnBjC,IAAME,EAAS,SAASC,GACtB,IAAMC,EAASD,EAAEE,eAAeC,OAE1BC,EAASJ,EAAEK,QAAQ,CAAC,OAAQ,UAAW,WAE7CL,EAAEM,MAAQ,WACRN,EAAEO,aAAa,GACfP,EAAEQ,UAAU,IAEZR,EAAES,aAAa,IAAK,KACpBT,EAAEU,WAAW,GAAI,CACfC,MAAKV,GAAS,CAAEE,QAAQ,EAAOS,MAAM,KAEvCZ,EAAEa,aAAa,GACfb,EAAEc,WAAWd,EAAEe,QAGjBf,EAAEgB,KAAO,WAAY,IACXC,EAAUjB,EAAEkB,SAAZD,MACRjB,EAAEmB,UAAUnB,EAAEoB,OACdpB,EAAEqB,WAAW,KACbrB,EAAEmB,UAAUnB,EAAEsB,UAEd,IANkB,eAMTC,GACPnB,EAAOoB,SAAQ,SAACC,EAAGC,GACjB1B,EAAE2B,OAAOF,GACTzB,EAAE4B,aAEF,IAAK,IAAIC,EAAK,EAAGA,EA1BR,EA0BqBA,IAAM,CAClC,IAAMhC,EAAIG,EAAE8B,IAAID,EAAI,EAAGE,EAAY,EAAG/B,EAAEgC,QAClCpC,EACJ2B,EACCvB,EAAEiC,OAASP,EA9BP,GA+BH1B,EAAEb,IACA8B,EACEjB,EAAEkC,MACAlC,EAAEmC,KAAF,MAAAnC,EAAC,CACCuB,EACA1B,GAFD,SAGIC,YACDE,EAAEiC,MAAQ,EACVjC,EAAEgC,OAAS,GACVf,EACAjB,EAAEiC,MAAQ,EAAKjC,EAAEX,IAAY,EAAR4B,IACtB,MAEA,MAGdjB,EAAEoC,YAAYxC,EAAGC,GAGnBG,EAAEqC,eA7BGd,EAAK,GAAIA,GAAMvB,EAAEiC,MAAQ,GAAIV,IAAOvB,EAAEiC,MAAQ,KAAO,IAAM,EAA3DV,KAmCE,0BAAGe,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcvC,OAAQA,EAAQwC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-12-19-js-19d5a7b16fc729875d48.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const POINTS = 5;\n  const COLORS = p.shuffle([\"cyan\", \"magenta\", \"yellow\"]);\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.frameRate(30);\n\n    p.createCanvas(660, 840);\n    p.createLoop(40, {\n      gif: RENDER ? { render: false, open: true } : false,\n    });\n    p.strokeWeight(2);\n    p.strokeJoin(p.ROUND);\n  };\n\n  p.draw = function() {\n    const { theta } = p.animLoop;\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.MULTIPLY);\n\n    for (let x1 = 50; x1 <= p.width - 50; x1 += (p.width - 100) / 100) {\n      COLORS.forEach((c, i) => {\n        p.stroke(c);\n        p.beginShape();\n\n        for (let pt = 0; pt < POINTS; pt++) {\n          const y = p.map(pt, 0, POINTS - 1, 0, p.height);\n          const x =\n            x1 +\n            (p.width / (i + POINTS)) *\n              p.cos(\n                theta *\n                  p.floor(\n                    p.dist(\n                      x1,\n                      y,\n                      ...polarToCartesian(\n                        p.width / 2,\n                        p.height / 2,\n                        -theta,\n                        (p.width / 2) * p.sin(theta * 2),\n                        true\n                      )\n                    ) / 100\n                  )\n              );\n          p.curveVertex(x, y);\n        }\n\n        p.endShape();\n      });\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}