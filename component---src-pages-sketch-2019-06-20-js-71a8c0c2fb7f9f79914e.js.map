{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/20.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","initShape","shapes","setup","createCanvas","WEBGL","Array","from","a","random","TWO_PI","d","sort","b","noFill","draw","background","camera","sin","frameCount","cos","map","_loop","i","shape","stroke","length","rotateX","HALF_PI","beginShape","forEach","pt","vertex","apply","polarToCartesian","endShape","CLOSE","unshift","_ref","constrain","noise","height","pop","__webpack_exports__","_ref2","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_5__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"4JAIMA,EAAS,SAASC,GACtB,IAEIC,EAAY,GACZC,EAAS,GAEbF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,IAAK,IAAKJ,EAAEK,QAE3BJ,EAAYK,MAAMC,KAAKD,MAAM,IAAK,iBAAO,CACvCE,EAAGR,EAAES,OAAOT,EAAEU,QACdC,EAAGX,EAAES,aAGGG,KAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEA,EAAIK,EAAEL,IACjCN,EAAS,CAACD,GAEVD,EAAEc,UAGJd,EAAEe,KAAO,WACPf,EAAEgB,WAAW,GAEbhB,EAAEiB,OAC4B,IAA5BjB,EAAEkB,IAAIlB,EAAEmB,WAAa,KACO,IAA5BnB,EAAEoB,IAAIpB,EAAEmB,WAAa,KAC4B,IAAjDnB,EAAEqB,IAAIrB,EAAEoB,IAAIpB,EAAEmB,WAAa,MAAQ,EAAG,EAAG,EAAG,GAC5C,EACA,EACA,EACA,EACA,EACA,GAGF,IAfkB,IAAAG,EAAA,SAeTC,GACP,IAAMC,EAAQtB,EAAOqB,GAErBvB,EAAEyB,OAAO,IAAKzB,EAAEqB,IAAIE,EAAG,EAAGrB,EAAOwB,OAAQ,IAAK,IAC9C1B,EAAE2B,QAAQ3B,EAAEqB,IAAIE,EAAG,EAAGrB,EAAOwB,OAAQ,EAAG1B,EAAE4B,UAC1C5B,EAAE6B,aACFL,EAAMM,QAAQ,SAAAC,GAAE,OACd/B,EAAEgC,OAAFC,MAAAjC,EAAYkC,YAAiB,EAAG,EAAGH,EAAGvB,EAAGuB,EAAGpB,EAzCtC,GAyC0CY,GAAS,MAE3DvB,EAAEmC,SAASnC,EAAEoC,QATNb,EAAIrB,EAAOwB,OAAS,EAAGH,GAAK,EAAGA,IAAKD,EAApCC,GAWTrB,EAAOmC,QACLpC,EAAUoB,IAAI,SAAAiB,GAAA,IAAG9B,EAAH8B,EAAG9B,EAAGG,EAAN2B,EAAM3B,EAAN,MAAe,CAC3BH,EAAGR,EAAEuC,UACH/B,EAAIR,EAAEqB,IAAIrB,EAAEwC,MAAMhC,EAAGR,EAAEmB,WAAa,KAAM,EAAG,EAAG,GAAK,KACrD,EACAnB,EAAEU,QAEJC,EAAGA,EAAIX,EAAEwC,MAAM7B,EAAGX,EAAEmB,WAAa,KAAO,OAGxCjB,EAAOwB,OAAS1B,EAAEyC,OAAF,IAClBvC,EAAOwC,QAKEC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcjD,OAAQA,EAAQkD,KAAMJ,EAASK,SAAUC,YAAY,wCCnErEC,EAAAzC,EAAAgC,EAAA,sBAAAU,IAAAD,EAAAzC,EAAAgC,EAAA,sBAAAW,IAAAF,EAAAzC,EAAAgC,EAAA,sBAAAY,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKvC,IAAIqC,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKzC,IAAIuC,GAASC,GAa9BH,EAA0B,SAC9BK,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUD,KAAKvC,IAAIqC,GAASK,EAChCI,EAAIL,EAAUF,KAAKzC,IAAIuC,GAASM,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBhC,IAzBU,SACvB0B,EACAC,EACAJ,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASH,EAAOC,GACtCQ,EAAIZ,EAAkBO,EAASJ,EAAOC,GAC5C,OAAOM,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-06-20-js-71a8c0c2fb7f9f79914e.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GAP = 10;\n\n  let initShape = [];\n  let shapes = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n\n    initShape = Array.from(Array(10), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(),\n    }));\n\n    initShape.sort((a, b) => a.a - b.a);\n    shapes = [initShape];\n\n    p.noFill();\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    p.camera(\n      p.sin(p.frameCount / 200) * 200,\n      p.cos(p.frameCount / 200) * 200,\n      p.map(p.cos(p.frameCount / 1000), -1, 1, 0, 1) * 500,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    );\n\n    for (let i = shapes.length - 1; i >= 0; i--) {\n      const shape = shapes[i];\n\n      p.stroke(255, p.map(i, 0, shapes.length, 255, 0));\n      p.rotateX(p.map(i, 0, shapes.length, 0, p.HALF_PI));\n      p.beginShape();\n      shape.forEach(pt =>\n        p.vertex(...polarToCartesian(0, 0, pt.a, pt.d + i * GAP, true))\n      );\n      p.endShape(p.CLOSE);\n    }\n    shapes.unshift(\n      initShape.map(({ a, d }) => ({\n        a: p.constrain(\n          a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9),\n          0,\n          p.TWO_PI\n        ),\n        d: d * p.noise(d, p.frameCount / 500) * 10,\n      }))\n    );\n    if (shapes.length > p.height / (GAP * 2)) {\n      shapes.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}