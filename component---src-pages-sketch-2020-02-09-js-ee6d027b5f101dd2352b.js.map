{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2020/02/09.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","RENDER","getURLParams","render","HUE","random","TWO_PI","setup","pixelDensity","frameRate","createCanvas","colorMode","HSB","background","QUARTER_PI","fill","HALF_PI","translate","width","height","rectMode","CORNERS","rect","blendMode","OVERLAY","createLoop","gif","open","noiseRadius","getCoord","pt","constrain","draw","animLoop","progress","theta","noise1D","noise","noStroke","asin","PI","acos","points","Array","map","_","i","sort","a","b","beginShape","forEach","curveVertex","endShape","frameCount","console","info","floor","DURATION","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-02-09-js-ee6d027b5f101dd2352b.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 120;\n  const RATE = 30;\n  const HUE = p.random(0.5, p.TWO_PI - 0.5);\n  const POINT_COUNT = 4;\n\n  p.setup = function() {\n    p.pixelDensity(RENDER ? 2 : 1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, p.TWO_PI);\n    p.background(p.TWO_PI - HUE, p.QUARTER_PI, p.QUARTER_PI);\n    p.fill(p.TWO_PI - HUE, p.QUARTER_PI, p.HALF_PI);\n    p.translate(p.width / 2, p.height / 2);\n    p.rectMode(p.CORNERS);\n    p.rect(-p.width / 3, -p.width / 3, p.width / 3, p.width / 3);\n    p.blendMode(p.OVERLAY);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.6,\n    });\n  };\n\n  const getCoord = pt => {\n    const { x, y } = polarToCartesian(0, 0, ...pt);\n\n    return [\n      p.constrain(x, -p.width / 3, p.width / 3),\n      p.constrain(y, -p.width / 3, p.width / 3),\n    ];\n  };\n\n  p.draw = function() {\n    const { progress, theta, noise1D, noise } = p.animLoop;\n\n    p.translate(p.width / 2, p.height / 2);\n    p.noStroke();\n    p.fill(\n      HUE + noise() / 2,\n      p.asin(p.sin(theta * 3)) + p.PI / 2,\n      p.acos(p.cos(theta * 5)) + p.PI / 2,\n      ((-(2 * progress * progress) + 2 * progress) / 2) * p.PI\n    );\n\n    let points = Array(POINT_COUNT)\n      .fill()\n      .map((_, i) => [p.TWO_PI * noise1D(i), (p.height / 2) * noise1D(i + 1)])\n      .sort((a, b) => a[0] - b[0]);\n\n    p.beginShape();\n    points.forEach(pt => p.curveVertex(...getCoord(pt)));\n    p.curveVertex(...getCoord(points[0]));\n    p.curveVertex(...getCoord(points[1]));\n    p.curveVertex(...getCoord(points[2]));\n    p.endShape();\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}