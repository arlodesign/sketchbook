{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/18.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","initShape","shapes","setup","pixelDensity","createCanvas","Array","from","_","i","a","random","TWO_PI","d","sort","b","noStroke","draw","background","_loop","shape","fill","beginShape","forEach","pt","vertex","apply","polarToCartesian","width","height","endShape","CLOSE","length","unshift","map","_ref","noise","frameCount","pop","__webpack_exports__","_ref2","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_4__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_6__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"kKAIMA,EAAS,SAASC,GACtB,IAGIC,EAAY,GACZC,EAAS,GAEbF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,GACfJ,EAAEK,aAAa,IAAK,MAEpBJ,EAAYK,MAAMC,KAAKD,MAVP,GAUyB,SAACE,EAAGC,GAAJ,MAAW,CAClDC,EAAGV,EAAEW,OAAOX,EAAEY,QAAUH,EAXV,GAW0BT,EAAEY,SAAWH,EAAI,GAX3C,IAYdI,EAAGb,EAAEW,OAAO,QAGJG,KAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEA,EAAIK,EAAEL,IACjCR,EAAS,CAACD,GAEVD,EAAEgB,YAGJhB,EAAEiB,KAAO,WACPjB,EAAEkB,WAAW,GAIb,IALkB,IAAAC,EAAA,SAKTV,GACP,IAAMW,EAAQlB,EAAOO,GAAGK,KAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEA,EAAIK,EAAEL,IAE/CV,EAAEqB,KAAKZ,EAAI,EAAI,IAAM,GACrBT,EAAEsB,aACFF,EAAMG,QAAQ,SAAAC,GAAE,OACdxB,EAAEyB,OAAFC,MAAA1B,EACK2B,YACD3B,EAAE4B,MAAQ,EACV5B,EAAE6B,OAAS,EACXL,EAAGd,EACHc,EAAGX,EApCD,GAoCKJ,GACP,MAINT,EAAEyB,OAAFC,MAAA1B,EACK2B,YACD3B,EAAE4B,MAAQ,EACV5B,EAAE6B,OAAS,EACXT,EAAM,GAAGV,EACTU,EAAM,GAAGP,EA9CL,GA8CSJ,GACb,IAGJT,EAAE8B,SAAS9B,EAAE+B,QAzBNtB,EAAIP,EAAO8B,OAAS,EAAGvB,GAAK,EAAGA,IAAKU,EAApCV,GA2BTP,EAAO+B,QACLhC,EAAUiC,IAAI,SAAAC,GAAA,IAAGzB,EAAHyB,EAAGzB,EAAGG,EAANsB,EAAMtB,EAAN,MAAe,CAC3BH,EACEV,EAAEY,QACDF,EAAIV,EAAEkC,IAAIlC,EAAEoC,MAAM1B,EAAGV,EAAEqC,WAAa,KAAM,EAAG,EAAG,GAAK,KACnDrC,EAAEY,OAAS,KAAQZ,EAAEqC,YAC1BxB,EAAGA,EAAIb,EAAEkC,IAAIlC,EAAEoC,MAAMvB,EAAGb,EAAEqC,WAAa,KAAM,EAAG,EAAG,GAAK,OAGxDnC,EAAO8B,OAAShC,EAAE6B,OA7DZ,IA8DR3B,EAAOoC,QAKEC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAc7C,OAAQA,EAAQ8C,KAAMJ,EAASK,SAAUC,YAAY,wCC1ErEC,EAAAnC,EAAA0B,EAAA,sBAAAU,IAAAD,EAAAnC,EAAA0B,EAAA,sBAAAW,IAAAF,EAAAnC,EAAA0B,EAAA,sBAAAY,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKE,IAAIJ,GAASC,GAa9BH,EAA0B,SAC9BO,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKC,IAAIH,GAASO,EAChCI,EAAIL,EAAUJ,KAAKE,IAAIJ,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBrC,IAzBU,SACvB+B,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASL,EAAOC,GACtCU,EAAId,EAAkBS,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-06-18-js-7499eca98bab2a5f36f5.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const POINT_QTY = 5;\n  const GAP = 20;\n\n  let initShape = [];\n  let shapes = [];\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.createCanvas(660, 840);\n\n    initShape = Array.from(Array(POINT_QTY), (_, i) => ({\n      a: p.random(p.TWO_PI * (i / POINT_QTY), p.TWO_PI * ((i + 1) / POINT_QTY)),\n      d: p.random(10),\n    }));\n\n    initShape.sort((a, b) => a.a - b.a);\n    shapes = [initShape];\n\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    let aPrev;\n\n    for (let i = shapes.length - 1; i >= 0; i--) {\n      const shape = shapes[i].sort((a, b) => a.a - b.a);\n\n      p.fill(i % 2 ? 255 : 0);\n      p.beginShape();\n      shape.forEach(pt =>\n        p.vertex(\n          ...polarToCartesian(\n            p.width / 2,\n            p.height / 2,\n            pt.a,\n            pt.d + i * GAP,\n            true\n          )\n        )\n      );\n      p.vertex(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          shape[0].a,\n          shape[0].d + i * GAP,\n          true\n        )\n      );\n      p.endShape(p.CLOSE);\n    }\n    shapes.unshift(\n      initShape.map(({ a, d }) => ({\n        a:\n          p.TWO_PI -\n          (a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9) +\n            (p.TWO_PI / 1080) * p.frameCount),\n        d: d * p.map(p.noise(d, p.frameCount / 250), 0, 1, 0.1, 2),\n      }))\n    );\n    if (shapes.length > p.height / GAP) {\n      shapes.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}