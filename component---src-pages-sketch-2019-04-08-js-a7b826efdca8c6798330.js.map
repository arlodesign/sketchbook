{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/04/08.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","Doodad","this","freq","TWO_PI","floor","random","drawFunc","pinwheel","horizontalLines","verticalLines","spiralClockwise","spiralCounterclockwise","draw","push","translate","pop","strokeWeight","r","line","GRID","start","end","offset","noStroke","fill","circle","map","doodads","setup","createCanvas","width","height","background","forEach","d","noLoop","SketchPage"],"mappings":"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","file":"component---src-pages-sketch-2019-04-08-js-a7b826efdca8c6798330.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GRID = 60;\n  const MARGIN = 5;\n\n  class Doodad {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n      this.freq = p.TWO_PI / (p.floor(p.random(10, 15)) * 2);\n      this.drawFunc = p.random([\n        this.pinwheel,\n        this.horizontalLines,\n        this.verticalLines,\n        this.spiralClockwise,\n        this.spiralCounterclockwise,\n      ]);\n    }\n    draw() {\n      p.push();\n      p.translate(this.x, this.y);\n      this.drawFunc();\n      p.pop();\n    }\n    pinwheel() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        p.line(\n          ...polarToCartesian(0, 0, r, (GRID / 2 - MARGIN) / 3, true),\n          ...polarToCartesian(0, 0, r, GRID / 2 - MARGIN, true)\n        );\n      }\n    }\n    horizontalLines() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        const start = polarToCartesian(0, 0, r, GRID / 2 - (MARGIN + 2), true);\n        const end = [-start[0], start[1]];\n        p.line(...start, ...end);\n      }\n    }\n    verticalLines() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        const start = polarToCartesian(0, 0, r, GRID / 2 - (MARGIN + 2), true);\n        const end = [start[0], -start[1]];\n        p.line(...start, ...end);\n      }\n    }\n    spiralClockwise() {\n      const offset = p.random(p.TWO_PI);\n      p.noStroke();\n      p.fill(0);\n      for (let r = 0; r < p.TWO_PI * 2; r += this.freq) {\n        p.circle(\n          ...polarToCartesian(\n            0,\n            0,\n            r + offset,\n            p.map(r, 0, p.TWO_PI * 2, 0, GRID / 2 - MARGIN),\n            true\n          ),\n          2\n        );\n      }\n    }\n    spiralCounterclockwise() {\n      const offset = p.random(p.TWO_PI);\n      p.noStroke();\n      p.fill(0);\n      for (let r = p.TWO_PI; r > -p.TWO_PI; r -= this.freq) {\n        p.circle(\n          ...polarToCartesian(\n            0,\n            0,\n            r + offset,\n            p.map(r, p.TWO_PI, -p.TWO_PI, 0, GRID / 2 - MARGIN),\n            true\n          ),\n          2\n        );\n      }\n    }\n  }\n\n  let doodads = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    for (let x = GRID / 2; x < p.width; x += GRID) {\n      for (let y = GRID / 2; y < p.height; y += GRID) {\n        doodads.push(new Doodad(x, y));\n      }\n    }\n  };\n\n  p.draw = function() {\n    p.background(255);\n    doodads.forEach(d => d.draw());\n    p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}