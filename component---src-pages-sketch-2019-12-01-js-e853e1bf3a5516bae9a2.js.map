{"version":3,"sources":["webpack:///./src/pages/sketch/2019/12/01.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js"],"names":["sketch","p","maxR","RENDER","getURLParams","render","HUE","random","setup","pixelDensity","frameRate","createCanvas","noStroke","createLoop","gif","open","noiseRadius","colorMode","HSB","dist","width","height","draw","animLoop","theta","noise1D","push","translate","rotate","scale","map","a","TWO_PI","QUARTER_PI","offsetA","direction","r","offsetB","ease","fill","lerpColor","color","abs","sin","quad","polarToCartesian","pop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"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","file":"component---src-pages-sketch-2019-12-01-js-e853e1bf3a5516bae9a2.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport { easeInOutQuad as ease } from \"~lib/easing\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const HUE = p.random();\n\n  let maxR;\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.createLoop(40, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 2,\n    });\n    p.colorMode(p.HSB, 1);\n\n    maxR = p.dist(0, 0, p.width / 2, p.height / 2);\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n    p.rotate(theta * 2);\n    p.scale(p.map(noise1D(0.1), -1, 1, 1, 2));\n\n    for (let a = 0; a < p.TWO_PI; a += p.QUARTER_PI / 30) {\n      let offsetA = 0;\n      let direction = 1;\n      for (let r = 0; r < maxR; r += 50) {\n        let offsetB =\n          offsetA +\n          ease((noise1D(offsetA + 1) + 1) / 2) * (p.QUARTER_PI / 2) * direction;\n        p.fill(\n          p.lerpColor(\n            p.color(HUE, 1, 1),\n            p.color(HUE + 0.5 > 1 ? HUE + 0.5 - 1 : HUE + 0.5, 0.75, 0.25),\n            ease(p.abs(p.sin(a * 5)))\n          )\n        );\n        p.quad(\n          ...polarToCartesian(0, 0, a + offsetA, r, true),\n          ...polarToCartesian(0, 0, a + offsetB, r + 50, true),\n          ...polarToCartesian(\n            0,\n            0,\n            a + offsetB + p.QUARTER_PI / 30,\n            r + 50,\n            true\n          ),\n          ...polarToCartesian(0, 0, a + offsetA + p.QUARTER_PI / 30, r, true)\n        );\n        offsetA = offsetB;\n        direction = -direction;\n      }\n    }\n\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n"],"sourceRoot":""}