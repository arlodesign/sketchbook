{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/13.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","points","setup","createCanvas","stroke","strokeWeight","noFill","colorMode","HSB","initPoints","Array","from","a","random","TWO_PI","d","height","aSpeed","_loop","angle","concat","map","pt","Object","assign","draw","background","beginShape","curveVertex","apply","polarToCartesian","width","length","forEach","_ref","i","endShape","push","blendMode","MULTIPLY","fill","sin","frameCount","rect","pop","__webpack_exports__","_ref2","location","_emotion_core__WEBPACK_IMPORTED_MODULE_4__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_6__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-06-13-js-c1c3cb5364e1edefb8a8.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const STEPS = 50;\n\n  let points = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.stroke(255);\n    p.strokeWeight(2);\n    p.noFill();\n    p.colorMode(p.HSB, 100);\n\n    const initPoints = Array.from(Array(3), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.height),\n      aSpeed: p.random(0.01) * p.random([-1, 1]),\n    }));\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      points = points.concat(\n        initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\n      );\n    }\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    p.beginShape();\n    p.curveVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[points.length - 3].a,\n        points[points.length - 3].d,\n        true\n      )\n    );\n    p.curveVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[points.length - 2].a,\n        points[points.length - 2].d,\n        true\n      )\n    );\n    p.curveVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[points.length - 1].a,\n        points[points.length - 1].d,\n        true\n      )\n    );\n    points.forEach(({ a, d, aSpeed }, i) => {\n      p.curveVertex(...polarToCartesian(p.width / 2, p.height / 2, a, d, true));\n      points[i].a += aSpeed;\n    });\n\n    p.endShape();\n\n    p.push();\n    p.blendMode(p.MULTIPLY);\n    p.fill(p.map(p.sin(p.frameCount / 500), -1, 1, 0, 100), 100, 100);\n    p.rect(0, 0, p.width, p.height);\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}