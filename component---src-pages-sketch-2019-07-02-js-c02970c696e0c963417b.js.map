{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/02.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","initShape","shapes","setup","pixelDensity","createCanvas","colorMode","HSB","Array","from","x","mouseX","y","mouseY","a","TWO_PI","d","sort","b","noStroke","draw","background","_loop","i","shape","fill","map","length","beginShape","curveVertex","apply","polarToCartesian","forEach","pt","endShape","unshift","_ref","constrain","noise","frameCount","height","pop","touchMoved","width","__webpack_exports__","_ref2","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_4__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_6__","path","pathname","description","__webpack_require__","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-07-02-js-c02970c696e0c963417b.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GAP = 6;\n  const HUE = p.random(80);\n\n  let initShape = [];\n  let shapes = [];\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    initShape = Array.from(Array(15), () => ({\n      x: p.mouseX,\n      y: p.mouseY,\n      a: p.random(p.TWO_PI),\n      d: p.random(GAP),\n    }));\n\n    initShape.sort((a, b) => a.a - b.a);\n    shapes = [initShape];\n\n    p.noStroke();\n    // p.strokeWeight(GAP);\n  };\n\n  p.draw = function() {\n    p.background(HUE + 20, 100, 20);\n\n    for (let i = shapes.length - 1; i >= 0; i--) {\n      const shape = shapes[i];\n\n      p.fill(\n        p.map(i, 0, shapes.length, HUE, HUE + 20),\n        100,\n        p.map(i, 0, shapes.length, 100, 20)\n      );\n      p.beginShape();\n      p.curveVertex(\n        ...polarToCartesian(\n          shape[shape.length - 3].x,\n          shape[shape.length - 3].y,\n          shape[shape.length - 3].a,\n          shape[shape.length - 3].d + i * GAP,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          shape[shape.length - 2].x,\n          shape[shape.length - 2].y,\n          shape[shape.length - 2].a,\n          shape[shape.length - 2].d + i * GAP,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          shape[shape.length - 1].x,\n          shape[shape.length - 1].y,\n          shape[shape.length - 1].a,\n          shape[shape.length - 1].d + i * GAP,\n          true\n        )\n      );\n      shape.forEach(pt =>\n        p.curveVertex(\n          ...polarToCartesian(pt.x, pt.y, pt.a, pt.d + i * GAP, true)\n        )\n      );\n      p.endShape();\n    }\n    shapes.unshift(\n      initShape.map(({ a, d }) => ({\n        x: p.mouseX,\n        y: p.mouseY,\n        a: p.constrain(\n          a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9),\n          0,\n          p.TWO_PI\n        ),\n        d: d * p.noise(d, p.frameCount / 500) * 10,\n      }))\n    );\n    if (shapes.length > p.height / (GAP * 2)) {\n      shapes.pop();\n    }\n  };\n\n  p.touchMoved = function() {\n    if (\n      p.mouseX >= 0 &&\n      p.mouseY >= 0 &&\n      p.mouseX <= p.width &&\n      p.mouseY <= p.height\n    ) {\n      return false;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Move pointer or finger over sketch.\"\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}