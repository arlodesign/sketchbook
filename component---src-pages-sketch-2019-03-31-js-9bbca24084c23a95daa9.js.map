{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/31.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/addNoise.js"],"names":["sketch","p","setup","createCanvas","colorMode","HSB","draw","background","i","HUE","map","j","outerEllipsePoint","polarToCartesianEllipse","width","height","TWO_PI","frameCount","innerEllipsePoint","sin","distMap","dist","strokeWeight","stroke","line","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","addNoise","intensity","PTS","console","log","push","fill","noStroke","ellipse","randomGaussian","pixelDensity","pop"],"mappings":"uIAOMA,G,OAAS,SAASC,GAMtBA,EAAEC,MAAQ,WACRD,EAAEE,aAAa,IAAK,KACpBF,EAAEG,UAAUH,EAAEI,IAAK,MAIrBJ,EAAEK,KAAO,WACPL,EAAEM,WAAW,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAdG,EAceA,IAEhC,IADA,IAAMC,EAAMR,EAAES,IAAIF,EAAG,EAfJ,EAeqB,EAAG,KAChCG,EAAI,EAAGA,EAfC,GAeiBA,IAAK,CACrC,IAAMC,EAAoBC,YACxBZ,EAAEa,MAAQ,EACVb,EAAEc,OAAS,EACVd,EAAEe,OApBU,EAoBeR,EAAIP,EAAEgB,WAAa,IACrC,IAAVhB,EAAEa,MACS,IAAXb,EAAEc,QACF,GAEIG,EAAoBL,YACxBZ,EAAEa,MAAQ,EACVb,EAAEc,OAAS,EACVd,EAAEe,OA3BU,GA2BeL,EAAIV,EAAEgB,WAAa,GAC/ChB,EAAES,IAAIT,EAAEkB,IAAIlB,EAAEgB,WAAa,MAAQ,EAAG,EAAG,EAAG,IAAMhB,EAAEa,MAAQ,GAAK,GACjEb,EAAEc,OAAS,IACX,GAEIK,EAAUnB,EAAES,IAChBQ,EAAkB,GAClBjB,EAAEc,OAAS,EAAId,EAAEc,OAAS,GAC1Bd,EAAEc,OAAS,EAAId,EAAEc,OAAS,GAC1B,GACA,GAEcd,EAAEoB,KAAF,MAAApB,EAAUW,EAAR,OAA8BM,IAChDjB,EAAEqB,aAAa,EAAIF,GACnBnB,EAAEsB,OAAOd,EAAK,GAAI,IAAMW,EAAS,IAAMA,GACvCnB,EAAEuB,KAAF,MAAAvB,EAAUW,EAAR,OAA8BM,QAMzB,0BAAGO,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAczB,OAAQA,EAAQ0B,KAAMD,EAASE,SAAUC,YAAY,O,iCC1DrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKd,IAAIY,GAASC,GAa9BnB,EAA0B,SAC9BuB,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKC,IAAIH,GAASO,EAChCI,EAAIL,EAAUJ,KAAKd,IAAIY,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASL,EAAOC,GACtCU,EAAIP,EAAkBE,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,wCCOlBE,IAtBE,SAAC3C,EAAG4C,QAAoB,IAApBA,MAAY,IAC/B,IAAMC,EAAM7C,EAAEa,MAAQb,EAAEc,OAAS,IAEjCgC,QAAQC,IAAIF,GAEZ7C,EAAEgD,OACF,IAAK,IAAIzC,EAAI,EAAGA,EAAIsC,EAAKtC,IACvBP,EAAEiD,KACA1C,EAAI,EAAJ,iBACqBqC,EADrB,2BAE2BA,EAF3B,KAIF5C,EAAEkD,WACFlD,EAAEmD,QACAnD,EAAEoD,eAAepD,EAAEa,MAAQ,EAAGb,EAAEa,MAAQ,GACxCb,EAAEoD,eAAepD,EAAEc,OAAS,EAAGd,EAAEc,OAAS,GAC1C,GAAKd,EAAEqD,eAAiB,IAG5BrD,EAAEsD","file":"component---src-pages-sketch-2019-03-31-js-9bbca24084c23a95daa9.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian, {\n  polarToCartesianEllipse,\n} from \"~lib/polarToCartesian\";\nimport addNoise from \"~lib/addNoise\";\n\nconst sketch = function(p) {\n  const OUTER_POINTS = 3;\n  const INNER_POINTS = 50;\n\n  let maxDist;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    // p.blendMode(p.HARD_LIGHT);\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    for (let i = 0; i < OUTER_POINTS; i++) {\n      const HUE = p.map(i, 0, OUTER_POINTS, 0, 100);\n      for (let j = 0; j < INNER_POINTS; j++) {\n        const outerEllipsePoint = polarToCartesianEllipse(\n          p.width / 2,\n          p.height / 2,\n          (p.TWO_PI / OUTER_POINTS) * i + p.frameCount / 500,\n          p.width * 1.5,\n          p.height * 1.5,\n          true\n        );\n        const innerEllipsePoint = polarToCartesianEllipse(\n          p.width / 2,\n          p.height / 2,\n          (p.TWO_PI / INNER_POINTS) * j + p.frameCount / 75,\n          p.map(p.sin(p.frameCount / 1000), -1, 1, 0, 1) * (p.width / 2) - 40,\n          p.height / 10,\n          true\n        );\n        const distMap = p.map(\n          innerEllipsePoint[1],\n          p.height / 2 - p.height / 10,\n          p.height / 2 + p.height / 10,\n          0.2,\n          1\n        );\n        const distVal = p.dist(...outerEllipsePoint, ...innerEllipsePoint);\n        p.strokeWeight(3 * distMap);\n        p.stroke(HUE, 75, 100 * distMap, 100 * distMap);\n        p.line(...outerEllipsePoint, ...innerEllipsePoint);\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  console.log(PTS);\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n"],"sourceRoot":""}