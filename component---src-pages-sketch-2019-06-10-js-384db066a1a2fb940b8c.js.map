{"version":3,"sources":["webpack:///./src/lib/lerpLine.js","webpack:///./src/pages/sketch/2019/06/10.js"],"names":["p","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","Math","max","dist","l","random","point","lerp","noise","OpenSimplexNoise","Date","now","sketch","setup","createCanvas","noStroke","rectMode","CENTER","draw","background","yPoints","x","width","y","noiseVal","map","noise4D","frameCount","cos","TWO_PI","sin","push","height","forEach","col","i","thisY","size","rect","location","path","pathname","description"],"mappings":"+FAYe,aACbA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QACA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAIR,IAFA,IAAMC,EAAWC,KAAKC,IAAIL,EAAM,IAAOL,EAAEW,KAAKV,EAAIC,EAAIC,EAAIC,IAEjDQ,EAAI,EAAGA,EAAI,EAAGA,GAAKJ,GAChB,IAANI,GAAYN,KACXC,GAASP,EAAEa,SAAWD,IAAOL,IAChCP,EAAEc,MAAMd,EAAEe,KAAKd,EAAIE,EAAIS,GAAIZ,EAAEe,KAAKb,EAAIE,EAAIQ,M,kCC3BhD,8EAKMI,EAAQ,IAAIC,IAAiBC,KAAKC,OAElCC,EAAS,SAASpB,GAItBA,EAAEqB,MAAQ,WACRrB,EAAEsB,aAAa,IAAK,KACpBtB,EAAEuB,WACFvB,EAAEwB,SAASxB,EAAEyB,SAGfzB,EAAE0B,KAAO,WACP1B,EAAE2B,WAAW,GAGb,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAI7B,EAAE8B,MAAOD,GAbb,GAa6B,CAc3C,IAbA,IAAIE,EAAI,GACFC,EAAWhC,EAAEiC,IACjBjB,EAAMkB,QACJlC,EAAEmC,WAAa,IACfnC,EAAEmC,WAAa,IACfnC,EAAEoC,IAAIpC,EAAEqC,QAAUR,EAAI7B,EAAE8B,QACxB9B,EAAEsC,IAAItC,EAAEqC,QAAUR,EAAI7B,EAAE8B,UAEzB,EACD,EACA,EACA,IAEOlB,EAAI,EAAGA,EAAI,EAAGA,GAAKoB,EAC1BD,EAAEQ,KAAKvC,EAAEe,KAAK,EAAGf,EAAEwC,OAAS,EAAG5B,IAEjCgB,EAAQW,KAAKR,GAGfH,EAAQa,SAAQ,SAACC,EAAKC,GACpBD,EAAID,SAAQ,SAAAV,GACV,IAAIa,EAAQb,EAAI/B,EAAEwC,OAAS,EACvBK,EAAO7C,EAAEiC,IAAIF,EAAG,EAAG/B,EAAEwC,OAAS,EAAG,EAAG,GAExCxC,EAAE8C,KAtCU,GAsCLH,EAAeC,EAAOC,EAAMA,GACnC7C,EAAE8C,KAvCU,GAuCLH,EAAe3C,EAAEwC,OAASI,EAAOC,EAAMA,WAMvC,0BAAGE,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc3B,OAAQA,EAAQ4B,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-06-10-js-384db066a1a2fb940b8c.js","sourcesContent":["/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport OpenSimplexNoise from \"open-simplex-noise\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst noise = new OpenSimplexNoise(Date.now());\n\nconst sketch = function(p) {\n  const GRID_SIZE = 15;\n  let max = 0.1;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.rectMode(p.CENTER);\n  };\n\n  p.draw = function() {\n    p.background(0);\n    let yPoints = [];\n\n    for (let x = 0; x < p.width; x += GRID_SIZE) {\n      let y = [];\n      const noiseVal = p.map(\n        noise.noise4D(\n          p.frameCount / 100,\n          p.frameCount / 200,\n          p.cos(p.TWO_PI * (x / p.width)),\n          p.sin(p.TWO_PI * (x / p.width))\n        ),\n        -1,\n        1,\n        0,\n        0.1\n      );\n      for (let l = 0; l < 1; l += noiseVal) {\n        y.push(p.lerp(0, p.height / 2, l));\n      }\n      yPoints.push(y);\n    }\n\n    yPoints.forEach((col, i) => {\n      col.forEach(y => {\n        let thisY = y + p.height / 2;\n        let size = p.map(y, 0, p.height / 2, 5, 0);\n\n        p.rect(i * GRID_SIZE, thisY, size, size);\n        p.rect(i * GRID_SIZE, p.height - thisY, size, size);\n      });\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}