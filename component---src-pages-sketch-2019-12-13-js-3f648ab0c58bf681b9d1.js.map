{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/12/13.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","RENDER","getURLParams","render","spirals","Spiral","color","spin","direction","this","setAlpha","noiseA","random","noiseB","func","draw","animLoop","noise1D","theta","c","map","a","TWO_PI","fill","noStroke","push","translate","width","height","rotate","n","coord","sqrt","rectMode","CENTER","square","dist","pop","setup","pixelDensity","frameRate","createCanvas","createLoop","gif","open","noiseRadius","spinRates","shuffle","Array","_","i","forEach","blendMode","BLEND","background","MULTIPLY","spiral","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-12-13-js-3f648ab0c58bf681b9d1.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n\n  let spirals = [];\n\n  class Spiral {\n    constructor(color, spin, direction) {\n      this.color = p.color(color);\n      this.color.setAlpha(216);\n      this.noiseA = p.random();\n      this.noiseB = p.random();\n      this.spin = spin;\n      this.direction = direction ? -1 : 1;\n      this.func = direction ? Math.sin : Math.cos;\n    }\n    draw() {\n      const { noise1D, theta } = p.animLoop;\n      const c = p.map(noise1D(this.noiseA), -1, 1, 10, 35);\n      const a = (137.5 / 360) * p.TWO_PI + noise1D(this.noiseB) * 0.01;\n\n      p.fill(this.color);\n      p.noStroke();\n      p.push();\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(theta * this.direction);\n\n      for (let n = 1; n < 3000; n++) {\n        const coord = polarToCartesian(0, 0, n * a, c * p.sqrt(n), true);\n        p.push();\n        p.translate(...coord);\n        p.rotate(theta * this.spin * -this.direction);\n        p.rectMode(p.CENTER);\n        p.square(\n          0,\n          0,\n          p.map(\n            p.dist(0, 0, ...coord),\n            0,\n            p.sqrt(\n              (p.width / 2) * (p.width / 2) + (p.height / 2) * (p.height / 2)\n            ),\n            p.map(this.func(theta), -1, 1, 40, 10),\n            p.map(this.func(theta * 2), -1, 1, 10, 40)\n          )\n        );\n        p.pop();\n      }\n      p.pop();\n    }\n  }\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.frameRate(30);\n    p.createCanvas(660, 840);\n    p.createLoop(20, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n\n    const spinRates = p.shuffle(\n      Array(9)\n        .fill()\n        .map((_, i) => i + 3)\n    );\n    p.shuffle([\"cyan\", \"yellow\", \"magenta\"]).forEach((c, i) => {\n      spirals.push(new Spiral(c, spinRates[i], i % 2));\n    });\n\n    spirals = [new Spiral(\"cyan\"), new Spiral(\"yellow\"), new Spiral(\"magenta\")];\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(255);\n    p.blendMode(p.MULTIPLY);\n    spirals.forEach(spiral => spiral.draw());\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}