{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/22.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js","webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./node_modules/amp-is-object/is-object.js","webpack:///./node_modules/coordinate-systems/coordinate-systems.js","webpack:///./node_modules/amp-is-array/is-array.js","webpack:///./node_modules/amp-is-number/is-number.js","webpack:///./node_modules/amp-extend/extend.js"],"names":["sketch","p","setup","createCanvas","WEBGL","noStroke","draw","background","directionalLight","min","frameCount","cos","sin","camera","apply","spherical","height","cart","concat","fill","specularMaterial","i","push","rotateX","TWO_PI","rotateY","rotateZ","torus","pop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_4__","path","pathname","description","$export","__webpack_require__","P","toObject","toAbsoluteIndex","toLength","module","exports","value","O","this","length","aLen","arguments","index","undefined","end","endPos","obj","type","isArray","isNumber","isObject","extend","degPerRadian","Math","PI","Coordinate","config","isRadian","isDegree","_x","_y","_z","_r","_t","_p","pos","defineProperty","get","x","set","label","coords","Error","initialType","prototype","cartesian","options","temp","cartesian2d","cartesian3d","polarToCart2d","polar","cylindrical","sphericalToCart3d","cyl","cartesian2dToPolar","center","cartesian3dToCylindrical","sphericalToCylindrical","pol","sph","cartesian3dToSpherical","cylindricalToSpherical","baseCoord","arrToNumeric","nums","num","TypeError","parseFloat","rt","r","t","xy","y","sqrt","atan2","xyz","z","x2","y2","z2","rtz","sr","sp","rtp","cr","toString","nativeIsArray","Array","call","source","prop"],"mappings":"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","file":"component---src-pages-sketch-2019-06-22-js-91706694a9524de2722b.js","sourcesContent":["import React from \"react\";\nimport { spherical } from \"coordinate-systems\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const SIZE = 20;\n\n  p.setup = function() {\n    p.createCanvas(660, 840, p.WEBGL);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    p.background(0);\n    p.directionalLight(\n      p.min(p.frameCount, 255),\n      p.min(p.frameCount, 255),\n      p.min(p.frameCount, 255),\n      p.cos(p.frameCount / 100),\n      p.sin(p.frameCount / 200),\n      p.sin(p.frameCount / 100) / 2\n    );\n    p.camera(\n      ...spherical([p.height, p.frameCount / 750, p.frameCount / 1000]).cart(),\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    );\n\n    p.noStroke();\n    p.fill(0);\n    p.specularMaterial(255, 255, 255);\n\n    for (let i = 0; i < SIZE; i++) {\n      p.push();\n      p.rotateX((p.TWO_PI / SIZE) * i * p.cos(p.frameCount / 500));\n      p.rotateY((p.TWO_PI / SIZE) * i * p.cos(p.frameCount / 500));\n      p.rotateZ((p.TWO_PI / SIZE) * i * p.cos(p.frameCount / 500));\n      p.torus(SIZE * i, SIZE / 3, 24 + i * 2);\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","module.exports = function isObject(obj) {\n    var type = typeof obj;\n    return !!obj && (type === 'function' || type === 'object');\n};\n","\"use strict\";\nvar isArray = require('amp-is-array');\nvar isNumber = require('amp-is-number');\nvar isObject = require('amp-is-object');\nvar extend = require('amp-extend');\nvar degPerRadian = 180 / Math.PI;\n\n/**\n * @constructor Coordinate\n * @description Defines object which can convert between coordinate systems.\n * It is recommended to use one of the Coodinate.STATIC_CONSTRUCTOR functions\n * to generate your first coordinate before conversions. e.g. Coodinate.spherical(...)\n * @param {Object} config\n * {\n *     label: 'type of initial coordinate',\n *     coords: {\n *         x/y/z/r/t/p: 'k-v pairs'\n *     },\n *     isDegree: Boolean\n * }\n */\nvar Coordinate = function (config) {\n    var isRadian,\n        isDegree,\n        pos = {},\n        _x, _y, _z, _r, _t, _p;\n\n    // Override select setters/getts\n    Object.defineProperty(this, \"isRadian\", {\n        get: function (x) { return isRadian; },\n        set: function (x) {\n            isRadian = !!x;\n            if (isDegree !== !x) { isDegree = !x; } // jshint ignore:line\n        }\n    });\n    Object.defineProperty(this, \"isDegree\", {\n        get: function (x) { return isDegree; },\n        set: function (x) {\n            isDegree = x;\n            if (isRadian !== !x) { isRadian = !x; } // jshint ignore:line\n        }\n    });\n    Object.defineProperty(pos, \"cartesian2d\", {\n        get: function (x) { return [_x, _y]; },\n        set: function (x) { _x = x[0]; _y = x[1]; }\n    });\n    Object.defineProperty(pos, \"cartesian3d\", {\n        get: function (x) { return [_x, _y, _z]; },\n        set: function (x) { _x = x[0]; _y = x[1]; _z = x[2]; }\n    });\n    Object.defineProperty(pos, \"polar\", {\n        get: function (x) { return [_r, _t]; },\n        set: function (x) { _r = x[0]; _t = x[1]; }\n    });\n    Object.defineProperty(pos, \"cylindrical\", {\n        get: function (x) { return [_r, _t, _z]; },\n        set: function (x) { _r = x[0]; _t = x[1]; _z = x[2]; }\n    });\n    Object.defineProperty(pos, \"spherical\", {\n        get: function (x) { return [_r, _t, _p]; },\n        set: function (x) { _r = x[0]; _t = x[1]; _p = x[2]; }\n    });\n\n    // init from config\n    if (config.isDegree && !config.isRadian) {\n        this.isDegree = true;\n    } else {\n        this.isRadian = true;\n    }\n    if (!config.label || !config.coords) {\n        throw new Error(\"no coordinate type defined\");\n    }\n    this.initialType = config.label;\n    this.pos = pos;\n    this.pos[config.label] = config.coords;\n};\n\n\n\n/**\n * @method cartesian\n * Converts current coordinate to cartesian\n * @function cartesian\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.cartesian = function () { return this.cart.apply(this, arguments); };\n/**\n * @method cart\n * Converts current coordinate to cartesian\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.cart = function (options) {\n    var temp;\n    options = options || {};\n    switch (this.initialType) {\n        case 'cartesian2d':\n            return this.pos.cartesian2d;\n        case 'cartesian3d':\n            return this.pos.cartesian3d;\n        case 'polar':\n            this.pos.cartesian2d = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n            return this.pos.cartesian2d;\n        case 'cylindrical':\n            temp = Coordinate.polarToCart2d(this.pos.polar, this.isDegree);\n            this.pos.cartesian3d = [temp[0], temp[1], this.pos.cylindrical[2]];\n            return this.pos.cartesian3d;\n        case 'spherical':\n            this.pos.cartesian3d = Coordinate.sphericalToCart3d(this.pos.spherical, this.isDegree);\n            return this.pos.cartesian3d;\n        default:\n            throw new Error('cannot convert to/from original/requested types');\n    }\n};\n\n\n\n/**\n * @method cylindrical\n * Converts current coordinate to cylindrical\n * @function cylindrical\n * @memberof Coordinate\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.cylindrical = function () { return this.cyl.apply(this, arguments); };\n/**\n * @method cyl\n * Converts current coordinate to cylindrical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.cyl = function (options) {\n    var temp;\n    options = options || {};\n    switch (this.initialType) {\n        case 'cartesian2d':\n            temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n            this.pos.cylindrical = [temp[0], temp[1], 0];\n            return this.pos.cylindrical;\n        case 'cartesian3d':\n            this.pos.cylindrical = Coordinate.cartesian3dToCylindrical(this.pos.cartesian3d, this.isDegree, options.center);\n            return this.pos.cylindrical;\n        case 'polar':\n            temp = this.pos.polar;\n            return [temp[0], temp[1], 0];\n        case 'cylindrical':\n            return this.pos.cylindrical;\n        case 'spherical':\n            this.pos.cylindrical = Coordinate.sphericalToCylindrical(this.pos.spherical, this.isDegree);\n            return this.pos.cylindrical;\n        default:\n            throw new Error('cannot convert to/from original/requested types');\n    }\n};\n\n/**\n * @method pol\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.pol = function () { return this.polar.apply(this, arguments); };\n/**\n * @method polar\n * Converts current coordinate to polar\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.polar = function (options) {\n    options = options || {};\n    switch (this.initialType) {\n        case 'cartesian2d':\n            this.pos.polar = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n            return this.pos.polar;\n        case 'polar':\n            return this.pos.polar;\n        default:\n            throw new Error('cannot convert to/from original/requested types');\n    }\n};\n\n\n\n/**\n * @method spherical\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.spherical = function () { return this.sph.apply(this, arguments); };\n/**\n * @method sph\n * Converts current coordinate to spherical\n * @param  {Object} options\n * @return {Array}  coordinates in respective coordinate format\n */\nCoordinate.prototype.sph = function (options) {\n    var temp;\n    options = options || {};\n    switch (this.initialType) {\n        case 'cartesian2d':\n            temp = Coordinate.cartesian2dToPolar(this.pos.cartesian2d, this.isDegree, options.center);\n            this.pos.spherical = [temp[0], temp[1], 0];\n            return this.pos.spherical;\n        case 'cartesian3d':\n            this.pos.spherical = Coordinate.cartesian3dToSpherical(this.pos.cartesian3d, this.isDegree, options.center);\n            return this.pos.spherical;\n        case 'polar':\n            temp = this.pos.polar;\n            return [temp[0], temp[1], 0];\n        case 'cylindrical':\n            this.pos.spherical = Coordinate.cylindricalToSpherical(this.pos.cylindrical, this.isDegree);\n            return this.pos.spherical;\n        case 'spherical':\n            return this.pos.spherical;\n        default:\n            throw new Error('cannot convert to/from original/requested types');\n    }\n};\n\n\n///\n/// Static Constructor Functions\n///\n\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.cartesian = function(x) { return Coordinate.cart(x); };\n/**\n * Create a point provided x, y, and optionally z coordinates\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.cart = function(options) {\n    var baseCoord;\n    if (isArray(options)) {\n        options = {coords: options};\n    }\n    if (isObject(options) && isArray(options.coords)) {\n        Coordinate.arrToNumeric(options.coords);\n        if (options.coords.length < 2 || options.coords.length > 3) {\n            throw new Error('expected exactly 2 or exactly 3 cartesian options');\n        }\n        baseCoord = {\n            label: 'cartesian2d',\n            options: options.coords\n        };\n        baseCoord = extend(baseCoord, options);\n        if (options.coords.length === 2) {\n            return new Coordinate(baseCoord);\n        }\n        baseCoord.label = 'cartesian3d';\n        return new Coordinate(baseCoord);\n    }\n    throw new Error('expected options w/ array of [x,y,(z?)] coords');\n};\n\n\n\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.cylindrical = function(x) { return Coordinate.cyl(x); };\n/**\n * Create point provided [radius, theta, z]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.cyl = function(options) {\n    var baseCoord;\n    if (isArray(options)) {\n        options = {coords: options};\n    }\n    if (isObject(options) && isArray(options.coords)) {\n        Coordinate.arrToNumeric(options.coords);\n        if (options.coords.length !== 3) {\n            throw new Error('expected exactly 3 params [r, t, z]');\n        }\n        baseCoord = {\n            label: 'cylindrical',\n            coords: options.coords\n        };\n        baseCoord = extend(baseCoord, options);\n        return new Coordinate(baseCoord);\n    }\n    throw new Error('expected options w/ array of [r, t, z] coords');\n};\n\n\n\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.polar = function(x) { return Coordinate.pol(x); };\n/**\n * Create point provided [radius, theta]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.pol = function(options) {\n    var baseCoord;\n    if (isArray(options)) {\n        options = {coords: options};\n    }\n    if (isObject(options) && isArray(options.coords)) {\n        Coordinate.arrToNumeric(options.coords);\n        if (options.coords.length !== 2) {\n            throw new Error('expected exactly 2 params [r, t]');\n        }\n        baseCoord = {\n            label: 'polar',\n            coords: options.coords\n        };\n        baseCoord = extend(baseCoord, options);\n        return new Coordinate(baseCoord);\n    }\n    throw new Error('expected array of [r, t] options');\n};\n\n\n\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.spherical = function(options) { return Coordinate.sph(options); };\n/**\n * Create point provided [radius, theta, phi]\n * @param  {Object} coordinates\n * @return {Coordinate}\n */\nCoordinate.sph = function(options) {\n    var baseCoord;\n    if (isArray(options)) {\n        options = {coords: options};\n    }\n    if (isObject(options) && isArray(options.coords)) {\n        Coordinate.arrToNumeric(options.coords);\n        if (options.coords.length !== 3) {\n            throw new Error('expected exactly 3 params [r, t, p]');\n        }\n        baseCoord = {\n            label: 'spherical',\n            coords: options.coords\n        };\n        baseCoord = extend(baseCoord, options);\n        return new Coordinate(baseCoord);\n    }\n    throw new Error('expected options w/ array of [r, t, p] coords');\n};\n\n\n\n/**\n * Mutates an array of number-like looking values to purely numeric array\n * @example\n * [5, '2.4', '0'] => [5, 2.4, 0]\n * @param  {Array} nums\n * @return {undefined}\n */\nCoordinate.arrToNumeric = function(nums) {\n    var num;\n    if (!isArray(nums)) {\n        throw new TypeError(\"expected array of number-like values\");\n    }\n    for (var i = nums.length - 1; i >= 0; i--) {\n        num = nums[i];\n        if (typeof num === 'string') {\n            num = parseFloat(num);\n        }\n        if (!isNumber(num)) {\n            throw new TypeError(num + ' not numeric or numeric-like');\n        }\n    }\n};\n\n\n\n/**\n * Convert polar to 2d cartesian coordinates\n * @param  {Array}   rt        [radis, theta]\n * @param  {Boolean} isDegree specifies units\n * @return {Array}  [x, y]\n */\nCoordinate.polarToCart2d = function(rt, isDegree) {\n    var r, t, x, y;\n    r = rt[0];\n    t = rt[1];\n    if (isDegree) {\n        t = t * (1/degPerRadian);\n    }\n    x = r * Math.cos(t);\n    y = r * Math.sin(t);\n    return [x, y];\n};\n\n\n\n/**\n * Convert cartesian 2d to polar coordinates\n * @param  {Array}  xy\n * @param {Boolean=} isDegree overrides default radian theta assumption\n * @param  {Array=} center [x, y] coords of center of circle.  Defaults to [0, 0],\n * however may be offset.  Note. Such functionality not supported yet for converting\n * polar to cartesian\n * @return {Array}  [radius, theta]\n */\nCoordinate.cartesian2dToPolar = function(xy, isDegree, center) {\n    var x, y, r, t;\n    if (!isArray(xy) && xy.length !== 2) {\n        throw new TypeError('expected [x, y] xy array');\n    }\n    x = xy[0];\n    y = xy[1];\n    if (center && !isArray(center) && center.length !== 2) {\n        throw new TypeError('expected [x, y] center array');\n    }\n    if (center) {\n        x = x - center[0];\n        y = y - center[1];\n    }\n    r = Math.sqrt(x*x + y*y);\n    t = Math.atan2(y, x);\n    if (isDegree) {\n        t = t * degPerRadian;\n    }\n    return [r, t];\n};\n\n\n\n/**\n * Convert 3d cartesian to 3d cylindrical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y] coords of center of circle\n * @return {Array}      [radius, theta, z]\n */\nCoordinate.cartesian3dToCylindrical = function (xyz, isDegree, center) {\n    var x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        rt;\n    rt = Coordinate.cartesian2dToPolar([x, y], isDegree, center);\n    return [rt[0], rt[1], z];\n};\n\n\n\n/**\n * Convert 3d cartesian to 3d spherical coordinates\n * @param  {Array}      argument [x, y, z] coords\n * @param  {Boolean=}   isDegree overrides default radian theta assumption\n * @param  {Array=}     center [x, y, z] coords of center of circle\n * @return {Array}      [radius, theta, phi]\n */\nCoordinate.cartesian3dToSpherical = function (xyz, isDegree, center) {\n    if (center && center.length !== 3) {\n        throw new Error('expected center value to have [x, y, z] coords' +\n            'for locating sphere center');\n    }\n    var x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        x2, y2, z2,\n        r, t, p;\n    if (center) {\n        x = x - center[0];\n        y = y - center[1];\n        z = z - center[2];\n    }\n    x2 = x*x; y2 = y*y; z2 = z*z;\n    r = Math.sqrt(x2 + y2 + z2);\n    if (!r) {\n        p = t = 0;\n    } else {\n        t = Math.atan2(y,x);\n        p = Math.atan2(Math.sqrt(x2 + y2), z);\n        if (isDegree) {\n            t = t * degPerRadian;\n            p = p * degPerRadian;\n        }\n    }\n    return [r, t, p];\n};\n\n\n\n/**\n * Convert a cylindrical to a spherical coordinates\n * @param  {Array}   rtz\n * @param  {Boolean} isDegree\n * @return {Array}   [radius, theta, phi]\n */\nCoordinate.cylindricalToSpherical = function(rtz, isDegree) {\n    var r = rtz[0], t = rtz[1], z = rtz[2];\n    var sr, sp; // sphere radius, sphere theta...\n    if (isDegree) {\n        t = t / degPerRadian;\n    }\n    sr = Math.sqrt(r*r + z*z);\n    sp = Math.atan2(r, z);\n    if (isDegree) {\n        sp = sp * degPerRadian;\n        t = t * degPerRadian;\n    }\n    return [sr, t, sp];\n};\n\n\n\n/**\n * Convert spherical to a cartesian coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\nCoordinate.sphericalToCart3d = function (rtp, isDegree) {\n    var r = rtp[0], t = rtp[1], p = rtp[2],\n        x,y,z;\n    if (isDegree) {\n        t = t / degPerRadian;\n        p = p / degPerRadian;\n    }\n    x = r * Math.sin(p) * Math.cos(t);\n    y = r * Math.sin(p) * Math.sin(t);\n    z = r * Math.cos(p);\n    return [x, y, z];\n};\n\n\n\n/**\n * Convert spherical to cylindrical coordinates\n * @param  {Array}  rtz\n * @param  {Boolean} isDegree\n * @return {Array}\n */\nCoordinate.sphericalToCylindrical = function (rtp, isDegree) {\n    var r = rtp[0], t = rtp[1], p = rtp[2],\n        cr, z;\n    if (isDegree) {\n        t = t / degPerRadian;\n        p = p / degPerRadian;\n    }\n    cr = r * Math.sin(p);\n    z = r * Math.cos(p);\n    if (isDegree) {\n        t = t * degPerRadian;\n        p = p * degPerRadian;\n    }\n    return [cr, t, z];\n};\n\nmodule.exports = Coordinate;\n","var toString = Object.prototype.toString;\nvar nativeIsArray = Array.isArray;\n\n\nmodule.exports = nativeIsArray || function isArray(obj) {\n    return toString.call(obj) === '[object Array]';\n};\n","var toString = Object.prototype.toString;\n\n\nmodule.exports = function isNumber(obj) {\n    return toString.call(obj) === '[object Number]';\n};\n","var isObject = require('amp-is-object');\n\n\nmodule.exports = function(obj) {\n    if (!isObject(obj)) return obj;\n    var source, prop;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n        source = arguments[i];\n        for (prop in source) {\n            obj[prop] = source[prop];\n        }\n    }\n    return obj;\n};\n"],"sourceRoot":""}