{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/09/03.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","RENDER","process","DEV","sketch","p","HUE","random","setup","frameRate","pixelDensity","createCanvas","background","colorMode","HSB","blendMode","SCREEN","strokeWeight","createLoop","gif","render","open","noiseRadius","draw","animLoop","noise2D","theta","translate","width","height","i","d","l","a","TWO_PI","stroke","line","DURATION","frameCount","noLoop","SketchPage"],"mappings":"6FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,6gBCTjC,IAAMO,EAASC,GAAYC,MAAO,EAI5BC,EAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,IAHR,GAKbF,EAAEG,MAAQ,WACRH,EAAEI,UAAU,IACZR,GAAUI,EAAEK,aAAa,GACzBL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,WAAW,GACbP,EAAEQ,UAAUR,EAAES,IAAK,KACnBT,EAAEU,UAAUV,EAAEW,QACdX,EAAEY,aAAa,GAEfZ,EAAEa,WAfW,GAeU,CACrBC,MAAKlB,GAAS,CAAEmB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBjB,EAAEkB,KAAO,WAAY,IAAD,EACSlB,EAAEmB,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MACjBrB,EAAEsB,UAAF,MAAAtB,EAAC,EACIT,YACDS,EAAEuB,MAAQ,EACVvB,EAAEwB,OAAS,GACVH,EACDD,EAAQ,IAAM,MAASpB,EAAEuB,MAAQ,IACjC,KAGJ,IAAK,IAAIE,EAAI,EAAGA,GA/BL,EA+BkBA,IAAK,CAChC,IAAMC,EAAIN,EAAQ,IAAOK,EAAG,IAAOA,GAAKzB,EAAEwB,OACpCG,GAAKP,EAAQ,IAAOK,EAAG,IAAOA,GAAK,GAAK,EACxCG,EAAIP,EAAQrB,EAAE6B,QAAUJ,EAlCrB,GA+BuB,EAIflC,YAAiB,EAAG,EAAGqC,EAAGF,GAAnCxC,EAJwB,EAIxBA,EAAGG,EAJqB,EAIrBA,EACXW,EAAE8B,OAAO7B,EAAO,IApCP,GAoCwBwB,EAAI,GAAI,GAAI,GAAI,IACjDzB,EAAE+B,KAAK7C,EAAIyC,EAAGtC,EAAIsC,EAAGzC,EAAGG,GAET2C,OAAjBhC,EAAEiC,aAAiCrC,GAAUI,EAAEkC,WAUpCC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQpC,OAAQA","file":"component---src-pages-sketch-2019-09-03-js-a1ab71ac6588e59a2b1a.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\nconst DURATION = 60;\nconst PETALS = 7;\n\nconst sketch = function(p) {\n  const HUE = p.random(100 / PETALS);\n\n  p.setup = function() {\n    p.frameRate(60);\n    RENDER && p.pixelDensity(1);\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.SCREEN);\n    p.strokeWeight(2);\n\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { noise2D, theta } = p.animLoop;\n    p.translate(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        -theta,\n        noise2D(0.01, 0.02) * (p.width / 2),\n        true\n      )\n    );\n    for (let i = 1; i <= PETALS; i++) {\n      const d = noise2D(0.06 * i, 0.08 * i) * p.height;\n      const l = (noise2D(0.05 * i, 0.07 * i) + 1) / 3;\n      const a = theta + p.TWO_PI * (i / PETALS);\n      const { x, y } = polarToCartesian(0, 0, a, d);\n      p.stroke(HUE + (100 / PETALS) * (i - 1), 50, 25, 50);\n      p.line(x * l, y * l, x, y);\n    }\n    p.frameCount === DURATION * 60 && !RENDER && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}