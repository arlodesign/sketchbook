{"version":3,"sources":["webpack:///./src/pages/sketch/2019/11/30.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","w","h","p","maxR","RENDER","getURLParams","render","setup","pixelDensity","frameRate","min","windowWidth","floor","windowHeight","createCanvas","dist","width","height","noStroke","createLoop","gif","open","noiseRadius","draw","animLoop","theta","noise1D","background","push","translate","rotate","scale","map","fill","a","TWO_PI","QUARTER_PI","offsetA","direction","r","Math","pow","offsetB","quad","polarToCartesian","pop","location","path","pathname","description","polarToCartesianX","center","angle","distance","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"+gCAKA,IAAMA,EAAS,SAACC,EAAGC,GAAJ,OACb,SAASC,GACP,IAEIC,EAFEC,EAASF,EAAEG,eAAeC,OAIhCJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,GACfN,EAAEO,UAAU,IAEZT,EAAIA,GAAKE,EAAEQ,IAAIR,EAAES,YAAa,MAC9BV,EAAIA,GAAKC,EAAEU,MAAMZ,GAAKE,EAAEW,aAAeX,EAAES,cAEzCT,EAAEY,aAAad,EAAGC,GAElBE,EAAOD,EAAEa,KAAK,EAAG,EAAGb,EAAEc,MAAQ,EAAGd,EAAEe,OAAS,GAC5Cf,EAAEgB,WAEFhB,EAAEiB,WAAW,GAAI,CACfC,MAAKhB,GAAS,CAAEE,QAAQ,EAAOe,MAAM,GACrCC,YAAa,KAIjBpB,EAAEqB,KAAO,WAAY,IAAD,EACSrB,EAAEsB,SAArBC,EADU,EACVA,MAAOC,EADG,EACHA,QAEfxB,EAAEyB,WAAW,KACbzB,EAAE0B,OACF1B,EAAE2B,UAAU3B,EAAEc,MAAQ,EAAGd,EAAEe,OAAS,GACpCf,EAAE4B,OAAOL,GACTvB,EAAE6B,MAAM7B,EAAE8B,IAAIN,EAAQ,KAAO,EAAG,EAAG,EAAG,IAEtCxB,EAAE+B,KAAK,GACP,IAAK,IAAIC,EAAI,EAAGA,EAAIhC,EAAEiC,OAAQD,GAAKhC,EAAEkC,WAAa,EAGhD,IAFA,IAAIC,EAAU,EACVC,EAAY,EACPC,EAAIrC,EAAEc,MAAQ,IAAMuB,GAAKpC,EAAMoC,GAAKC,KAAKC,IAAIF,EAAG,OAAQ,CAC/D,IAAIG,EAAUL,EAAUX,EAAQ,KAAQY,EAExCpC,EAAEyC,KAAF,MAAAzC,EAAC,EACI0C,YAAiB,EAAG,EAAGV,EAAIG,EAASE,GAAG,IAD3C,SAEIK,YACD,EACA,EACAV,EAAIQ,EACJH,EAAIC,KAAKC,IAAIF,EAAG,QAChB,IAPH,EASIK,YACD,EACA,EACAV,EAAIQ,EAAUxC,EAAEkC,WAAa,GAC7BG,EAAIC,KAAKC,IAAIF,EAAG,QAChB,IAdH,EAgBIK,YAAiB,EAAG,EAAGV,EAAIG,EAAUnC,EAAEkC,WAAa,GAAIG,GAAG,MAEhEF,EAAUK,EACVJ,GAAaA,EAIjBpC,EAAE2C,SAIO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACE/C,OAAQA,EAAO,IAAK,KACpBgD,KAAMD,EAASE,SACfC,YAAY,O,kCC5EhB,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASX,KAAKc,IAAIF,GAASC,GAE9BE,EAAoB,SAACJ,EAAQC,EAAOC,GACxC,OAAOF,EAASX,KAAKgB,IAAIJ,GAASC,GAsB9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUlB,KAAKc,IAAIF,GAASQ,EAChCI,EAAIL,EAAUnB,KAAKgB,IAAIJ,GAASS,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBpB,IAzBU,SACvBc,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASN,EAAOC,GACtCW,EAAIT,EAAkBI,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-11-30-js-a369a9963c79e4bcc818.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst sketch = (w, h) =>\n  function(p) {\n    const RENDER = p.getURLParams().render;\n\n    let maxR;\n\n    p.setup = function() {\n      p.pixelDensity(1);\n      p.frameRate(30);\n\n      w = w || p.min(p.windowWidth, 1280);\n      h = h || p.floor(w * (p.windowHeight / p.windowWidth));\n\n      p.createCanvas(w, h);\n\n      maxR = p.dist(0, 0, p.width / 2, p.height / 2);\n      p.noStroke();\n\n      p.createLoop(40, {\n        gif: RENDER ? { render: false, open: true } : false,\n        noiseRadius: 1,\n      });\n    };\n\n    p.draw = function() {\n      const { theta, noise1D } = p.animLoop;\n\n      p.background(255);\n      p.push();\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(theta);\n      p.scale(p.map(noise1D(0.1), -1, 1, 1, 4));\n\n      p.fill(0);\n      for (let a = 0; a < p.TWO_PI; a += p.QUARTER_PI / 6) {\n        let offsetA = 0;\n        let direction = 1;\n        for (let r = p.width / 1000; r <= maxR; r += Math.pow(r, 1.001)) {\n          let offsetB = offsetA + noise1D(0.05) * direction;\n\n          p.quad(\n            ...polarToCartesian(0, 0, a + offsetA, r, true),\n            ...polarToCartesian(\n              0,\n              0,\n              a + offsetB,\n              r + Math.pow(r, 1.001),\n              true\n            ),\n            ...polarToCartesian(\n              0,\n              0,\n              a + offsetB + p.QUARTER_PI / 10,\n              r + Math.pow(r, 1.001),\n              true\n            ),\n            ...polarToCartesian(0, 0, a + offsetA + p.QUARTER_PI / 10, r, true)\n          );\n          offsetA = offsetB;\n          direction = -direction;\n        }\n      }\n\n      p.pop();\n    };\n  };\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch(660, 840)}\n    path={location.pathname}\n    description=\"\"\n  />\n);\n\nexport { sketch };\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}