{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/20.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","r","g","b","CF","angle","abs","sin","cos","tan","PI","distance","size","axis","a","getColor","setup","pixelDensity","createCanvas","background","x","width","y","height","Array","from","Set","length","random","color","blendMode","HARD_LIGHT","draw","noFill","strokeWeight","map","noise","stroke","beginShape","i","TWO_PI","thisAngle","polarToCartesian","vertex","endShape","CLOSE","noLoop","location","path","pathname","polarToCartesianX","center","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-02-20-js-b21fb00f62efc8ee6786.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const CF = [\n    angle => p.abs(p.sin(angle)) * 240,\n    angle => p.abs(p.cos(angle)) * 240,\n    angle => p.abs(p.tan(angle)) * 240,\n    angle => p.abs(p.sin(angle + p.PI)) * 240,\n    angle => p.abs(p.cos(angle + p.PI)) * 240,\n    angle => p.abs(p.tan(angle + p.PI)) * 240,\n    angle => p.abs(p.sin(-angle)) * 240,\n    angle => p.abs(p.cos(-angle)) * 240,\n    angle => p.abs(p.tan(-angle)) * 240,\n    angle => p.abs(p.sin(-angle + p.PI)) * 240,\n    angle => p.abs(p.cos(-angle + p.PI)) * 240,\n    angle => p.abs(p.tan(-angle + p.PI)) * 240,\n  ];\n  const Q = 3;\n  let distance = 0;\n  let angle = 0;\n  let size = 10;\n  let axis = {};\n  let r;\n  let g;\n  let b;\n  let a = 32;\n  let getColor = () => {};\n\n  p.setup = function() {\n    p.pixelDensity(4);\n    p.createCanvas(660, 840);\n    p.background(0);\n    axis = {\n      x: p.width / 2,\n      y: p.height / 2,\n    };\n    while (Array.from(new Set([r, g, b])).length < 3) {\n      r = p.random(CF);\n      g = p.random(CF);\n      b = p.random(CF);\n    }\n    getColor = angle => p.color(r(angle), g(angle), b(angle), a);\n    p.blendMode(p.HARD_LIGHT);\n  };\n\n  p.draw = function() {\n    p.noFill();\n    p.strokeWeight(\n      p.map(p.noise(angle / 5, distance / 5) * size, 0, p.width, 1, Q)\n    );\n    p.stroke(getColor(angle / (Q * 1.5)));\n    p.beginShape();\n    for (let i = 0; i < p.TWO_PI; i += p.TWO_PI / Q) {\n      const thisAngle = angle + i;\n      const { x, y } = polarToCartesian(\n        axis.x,\n        axis.y,\n        thisAngle,\n        p.noise(angle / 5, distance / 5) * size\n      );\n      p.vertex(x, y);\n    }\n    p.endShape(p.CLOSE);\n    angle += 0.01;\n    distance += 0.01;\n    size += 0.05;\n    a = size > p.width ? a - 0.1 : a;\n    axis = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      angle / Q,\n      distance * (Q / 2)\n    );\n    if (a === 0) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}