{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/25.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","bounds","allBounds","cells","strokeHue","Point","x","y","animLoop","noise2D","noiseVal","noise","this","centerX","centerY","onBoundary","has","dist","map","width","dir","offset","update","theta","polarToCartesian","getArray","Cell","pts","pt","random","TWO_PI","forEach","cellCanvas","createGraphics","cellMask","background","noFill","colorMode","HSB","stroke","fill","push","translate","height","rotate","strokeWeight","line","STROKEWEIGHT","pop","ctx","strokeJoin","BEVEL","beginShape","vertex","endShape","CLOSE","cellImage","get","mask","image","setup","pixelDensity","frameRate","createCanvas","createLoop","gif","render","open","noiseDetail","Set","flat","points","Array","mesh","DVMesh","voronoi","c","draw","sin","square","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-08-25-js-be4b41380489e0a427cd.js","sourcesContent":["import React from \"react\";\nimport { DVMesh } from \"@thi.ng/geom-voronoi\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const STROKEWEIGHT = 20;\n\n  let bounds;\n  let allBounds;\n  let cells;\n  let strokeHue = 0;\n\n  class Point {\n    constructor(x, y) {\n      const { noise2D } = p.animLoop;\n\n      const noiseVal = p.noise(x, y);\n\n      this.centerX = x;\n      this.centerY = y;\n      this.x = x;\n      this.y = y;\n      this.onBoundary = allBounds.has(x) || allBounds.has(y);\n      this.dist = p.map(noiseVal, -1, 1, 0, p.width / 10);\n      this.dir = noiseVal < 0 ? -1 : 1;\n      this.offset = p.map(noiseVal, -1, 1, 0, p.width / 10);\n    }\n\n    update() {\n      if (this.onBoundary) {\n        // never update if on a boundary\n        return;\n      }\n      const { noise2D, theta } = p.animLoop;\n      const { x, y } = polarToCartesian(\n        this.centerX,\n        this.centerY,\n        (this.offset + theta) * this.dir,\n        this.dist * noise2D(this.x / 1000, this.y / 1000)\n      );\n      this.x = x;\n      this.y = y;\n    }\n\n    getArray() {\n      return [this.x, this.y];\n    }\n  }\n\n  class Cell {\n    constructor(pts) {\n      this.pts = pts.map(pt => new Point(...pt));\n      this.dir = p.random([1, -1]);\n      this.offset = p.random(p.TWO_PI);\n    }\n    update() {\n      const { theta } = p.animLoop;\n\n      this.pts.forEach(pt => pt.update());\n\n      const cellCanvas = p.createGraphics(\n        p.width - STROKEWEIGHT,\n        p.width - STROKEWEIGHT\n      );\n      const cellMask = p.createGraphics(\n        p.width - STROKEWEIGHT,\n        p.width - STROKEWEIGHT\n      );\n\n      cellCanvas.background(255);\n      cellCanvas.noFill();\n      cellCanvas.colorMode(p.HSB, 1);\n      cellCanvas.stroke(strokeHue, 1, 1);\n\n      cellMask.fill(0);\n\n      cellCanvas.push();\n      cellCanvas.translate(cellCanvas.width / 2, cellCanvas.height / 2);\n      cellCanvas.rotate((this.offset + theta) * this.dir);\n      cellCanvas.stroke(1 - strokeHue, 1, 1);\n      cellCanvas.strokeWeight(STROKEWEIGHT);\n      let y = -p.width / 2;\n      while (y < p.width * 2) {\n        cellCanvas.line(-p.width, y - p.width, p.width, y - p.width);\n        y += STROKEWEIGHT * 2;\n      }\n      cellCanvas.pop();\n\n      [cellCanvas, cellMask].forEach(ctx => {\n        ctx.strokeWeight(STROKEWEIGHT);\n        ctx.strokeJoin(p.BEVEL);\n        ctx.translate(ctx.width / 2, ctx.height / 2);\n        ctx.beginShape();\n\n        this.pts.forEach(pt => ctx.vertex(...pt.getArray()));\n        ctx.endShape(p.CLOSE);\n      });\n\n      const cellImage = cellCanvas.get();\n      cellImage.mask(cellMask);\n      p.image(\n        cellImage,\n        bounds[0][0] - STROKEWEIGHT / 2,\n        bounds[0][1] - STROKEWEIGHT / 2\n      );\n    }\n  }\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.frameRate(30);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n    p.createLoop(30, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseDetail: 0.5,\n    });\n\n    bounds = [\n      [-p.width / 2 + STROKEWEIGHT, -p.width / 2 + STROKEWEIGHT],\n      [p.width / 2 - STROKEWEIGHT, -p.width / 2 + STROKEWEIGHT],\n      [p.width / 2 - STROKEWEIGHT, p.width / 2 - STROKEWEIGHT],\n      [-p.width / 2 + STROKEWEIGHT, p.width / 2 - STROKEWEIGHT],\n    ];\n    allBounds = new Set(bounds.flat());\n\n    const points = new Array(10)\n      .fill()\n      .map(() => [p.random(...bounds[3]), p.random(...bounds[3])]);\n\n    let mesh = new DVMesh(points);\n    cells = mesh.voronoi(bounds).map(c => new Cell(c));\n  };\n\n  p.draw = function() {\n    strokeHue = p.map(p.sin(p.animLoop.theta), -1, 1, 0, 1);\n\n    p.background(255);\n    p.translate(p.width / 2, p.height / 2);\n    cells.forEach(c => c.update());\n    p.noFill();\n    p.stroke(strokeHue, 1, 1);\n    p.strokeWeight(STROKEWEIGHT);\n    p.square(...bounds[0], p.width - STROKEWEIGHT * 2);\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description={\n      <>\n        Improved version of yesterdayâ€™s. Still pokey in browser, but the GIF it\n        makes is <code>:chefkiss:</code>.\n      </>\n    }\n  />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}