{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/easing.js","webpack:///./src/pages/sketch/2020/03/22.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","sketch","p","RENDER","getURLParams","render","HUE","random","attractors","particles","alpha","Attractor","dir","this","randomGaussian","width","height","start","TWO_PI","createVector","animLoop","theta","Particle","sat","pos","vel","p5","Vector","random2D","acc","prev","update","add","show","closestAttractorDist","closestAttractor","forEach","attractor","thisDist","dist","stroke","map","line","attracted","target","force","sub","mult","dsquared","magSq","strength","min","G","setMag","setup","pixelDensity","frameRate","createCanvas","colorMode","HSB","background","blendMode","HARD_LIGHT","createLoop","gif","open","noiseRadius","Array","fill","_","i","draw","progress","easedProgress","ease","particle","frameCount","console","info","floor","DURATION","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-03-22-js-78d173b7265d0b56b9d2.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","// https://gist.github.com/gre/1650294\n\n// no easing, no acceleration\nconst linear = t => t;\n\n// accelerating from zero velocity\nconst easeInQuad = t => t * t;\n\n// decelerating to zero velocity\nconst easeOutQuad = t => t * (2 - t);\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuad = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n\n// accelerating from zero velocity\nconst easeInCubic = t => t * t * t;\n\n// decelerating to zero velocity\nconst easeOutCubic = t => --t * t * t + 1;\n\n// acceleration until halfway, then deceleration\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\n// accelerating from zero velocity\nconst easeInQuart = t => t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuart = t => 1 - --t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuart = t =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\n// accelerating from zero velocity\nconst easeInQuint = t => t * t * t * t * t;\n\n// decelerating to zero velocity\nconst easeOutQuint = t => 1 + --t * t * t * t * t;\n\n// acceleration until halfway, then deceleration\nconst easeInOutQuint = t =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport {\n  linear,\n  easeInQuad,\n  easeOutQuad,\n  easeInOutQuad,\n  easeInCubic,\n  easeOutCubic,\n  easeInOutCubic,\n  easeInQuart,\n  easeOutQuart,\n  easeInOutQuart,\n  easeInQuint,\n  easeOutQuint,\n  easeInOutQuint,\n};\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport { easeOutQuad as ease } from \"~lib/easing\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 60;\n  const RATE = 30;\n  const G = 25;\n  const HUE = p.random();\n\n  let attractors = [];\n  let particles = [];\n  let alpha = 0;\n\n  class Attractor {\n    constructor(dir) {\n      this.x = p.randomGaussian(p.width / 2, p.width / 20);\n      this.y = p.randomGaussian(p.height / 2, p.width / 20);\n      this.dir = dir;\n      this.start = p.random(p.TWO_PI);\n    }\n    get pos() {\n      return p.createVector(\n        ...polarToCartesian(\n          this.x,\n          this.y,\n          p.animLoop.theta * this.dir + this.start,\n          p.width / 3,\n          true\n        )\n      );\n    }\n  }\n\n  class Particle {\n    constructor(x, y, sat) {\n      this.pos = p.createVector(\n        p.randomGaussian(p.width / 2, p.width / 3),\n        p.randomGaussian(p.height / 2, p.width / 3)\n      );\n      this.vel = p5.Vector.random2D();\n      this.acc = p.createVector();\n      this.prev = null;\n      this.sat = p.random();\n    }\n    update() {\n      this.pos.add(this.vel);\n      this.vel.add(this.acc);\n    }\n    show() {\n      if (this.prev) {\n        let closestAttractorDist = 100000;\n        let closestAttractor = null;\n        attractors.forEach(attractor => {\n          const thisDist = p.dist(\n            attractor.pos.x,\n            attractor.pos.y,\n            this.pos.x,\n            this.pos.y\n          );\n          if (thisDist < closestAttractorDist) {\n            closestAttractorDist = thisDist;\n            closestAttractor = attractor;\n          }\n        });\n        p.stroke(\n          HUE,\n          this.sat,\n          p.map(closestAttractorDist, 0, p.width / 2, 1, 0, true),\n          alpha\n        );\n        p.line(\n          this.pos.x,\n          this.pos.y,\n          closestAttractor.pos.x,\n          closestAttractor.pos.y\n        );\n        p.line(this.pos.x, this.pos.y, this.prev.x, this.prev.y);\n      }\n      this.prev = { x: this.pos.x, y: this.pos.y };\n    }\n    attracted(target) {\n      let force = p5.Vector.sub(target.pos, this.pos);\n      force.mult(target.dir);\n      let dsquared = force.magSq();\n      dsquared = p.min(dsquared, G * 20);\n      const strength = G / dsquared;\n      force.setMag(strength);\n      this.acc = force;\n    }\n  }\n\n  p.setup = function() {\n    p.pixelDensity(RENDER ? 1 : 2);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n    p.background(1 - HUE, 0.2, 0.2);\n    p.blendMode(p.HARD_LIGHT);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n\n    attractors = Array(3)\n      .fill()\n      .map((_, i) => new Attractor(i % 2 ? -1 : 1));\n    particles = Array(10)\n      .fill()\n      .map(_ => new Particle());\n  };\n\n  p.draw = function() {\n    const { progress } = p.animLoop;\n    const easedProgress = ease(progress);\n    alpha = -1 * easedProgress * easedProgress + easedProgress;\n\n    particles.forEach(particle => {\n      attractors.forEach(attractor => {\n        particle.attracted(attractor);\n      });\n      particle.update();\n      particle.show();\n    });\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (!RENDER && p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}