{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/20.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","HUE","random","a","i","setup","createCanvas","colorMode","HSB","background","noFill","strokeWeight","blendMode","OVERLAY","ellipseMode","CENTER","draw","thisHue","NOISE","noise","frameCount","push","stroke","translate","polarToCartesian","width","height","rotate","bezier","pop","console","log","TWO_PI","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","l","dist","point","lerp"],"mappings":"6jBAKA,IAAMA,EAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,EAAG,EAAI,GAGxBC,EAAI,EACJC,EAAI,EAERJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,GACnBR,EAAES,WAAWR,EAAK,GAAK,IACvBD,EAAEU,SACFV,EAAEW,aAAa,GACfX,EAAEY,UAAUZ,EAAEa,SACdb,EAAEc,YAAYd,EAAEe,SAGlBf,EAAEgB,KAAO,WACP,IAEIC,EAFEC,EAAQlB,EAAEmB,MAAMnB,EAAEoB,WAAF,IAAmCjB,GAKvDc,EADEC,EAAQ,EAAI,EACJjB,EACDiB,EAAQ,EAAI,EACXjB,EAAM,EAAI,EAEVA,EAAM,EAAI,EAGtBD,EAAEqB,OACFrB,EAAEsB,OAAOL,EAASb,EA7BD,IA6BiB,GAAK,IACvCJ,EAAEuB,UAAF,MAAAvB,EAAC,EACIwB,YACDxB,EAAEyB,MAAQ,EACVzB,EAAE0B,OAAS,EACXvB,EACCH,EAAEyB,MAAQ,GAAM,EAAIP,IACrB,KAGJlB,EAAE2B,OAAOxB,GACTH,EAAE4B,OACA,EACA,EACC5B,EAAEyB,MAAQP,EAAS,GACnBlB,EAAEyB,MAAQ,GACVzB,EAAEyB,MAAQP,EAAS,EACpBlB,EAAEyB,MAAQ,GACTzB,EAAEyB,MAAQ,EAAKP,EAChB,GAEFlB,EAAE6B,MAEFC,QAAQC,IAAI3B,IAEZD,GAAKH,EAAEgC,OAtDU,IAsDYhC,EAAEgC,OAtDd,SAuDThC,EAAEgC,OAAS5B,KACjBA,EAxDe,MA0DbJ,EAAEiC,SACFH,QAAQC,IAAI,WAML,0BAAGG,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcnC,OAAQA,EAAQoC,KAAMD,EAASE,SAAUC,YAAY,O,kCCzErE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB7B,IAzBU,SACvBuB,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,oCCflB,aAASrD,EAAGsD,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,QAAqB,IAArBA,OAAe,GAC9D,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKF,EAAO,EAAIA,EAAO,EAAI1D,EAAE6D,KAAKP,EAAIC,EAAIC,EAAIC,IACzD,IAANG,GAAYD,IAChB3D,EAAEE,SAAW0D,GAAK5D,EAAE8D,MAAM9D,EAAE+D,KAAKT,EAAIE,EAAII,GAAI5D,EAAE+D,KAAKR,EAAIE,EAAIG","file":"component---src-pages-sketch-2019-07-20-js-0379c55ac62bd7b0c01c.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const HUE = p.random(0, 1 / 3);\n  const ITERATIONS = 100;\n\n  let a = 0;\n  let i = 1;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n    p.background(HUE, 0.5, 0.9);\n    p.noFill();\n    p.strokeWeight(2);\n    p.blendMode(p.OVERLAY);\n    p.ellipseMode(p.CENTER);\n  };\n\n  p.draw = function() {\n    const NOISE = p.noise(p.frameCount / (ITERATIONS * 100), a);\n\n    let thisHue;\n\n    if (NOISE < 1 / 3) {\n      thisHue = HUE;\n    } else if (NOISE > 2 / 3) {\n      thisHue = HUE + 2 / 3;\n    } else {\n      thisHue = HUE + 1 / 3;\n    }\n\n    p.push();\n    p.stroke(thisHue, i / ITERATIONS, 0.9, 0.2);\n    p.translate(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        a,\n        (p.width / 3) * (1 - NOISE),\n        true\n      )\n    );\n    p.rotate(a);\n    p.bezier(\n      0,\n      0,\n      (p.width * NOISE) / 2,\n      -p.width / 10,\n      (p.width * NOISE) / 2,\n      p.width / 10,\n      (p.width / 2) * NOISE,\n      0\n    );\n    p.pop();\n\n    console.log(i);\n\n    a += p.TWO_PI / ITERATIONS + p.TWO_PI / ITERATIONS / ITERATIONS;\n    if (a > p.TWO_PI * i) {\n      i++;\n      if (i > ITERATIONS) {\n        p.noLoop();\n        console.log(\"done\");\n      }\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  for (let l = 0; l < 1; l += rate > 0 ? rate : 1 / p.dist(x1, y1, x2, y2)) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}