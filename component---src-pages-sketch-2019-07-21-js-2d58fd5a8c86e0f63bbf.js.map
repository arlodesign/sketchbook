{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/21.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","HUE","random","setup","pixelDensity","frameRate","createCanvas","colorMode","HSB","noFill","strokeWeight","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","OVERLAY","push","translate","width","height","a","HALF_PI","PI","stroke","map","polarToCartesian","x","y","offset","sin","animLoop","theta","noise2D","bezier","cos","pop","SketchPage","polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","Math","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"4FAAA,oEAMMA,GANN,UAMeC,GAAYC,MAAO,GAE5BC,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,SAEdF,EAAEG,MAAQ,WACJP,IACFI,EAAEI,aAAa,GACfJ,EAAEK,UAAU,KAGdL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,GACnBR,EAAES,SACFT,EAAEU,aAAa,GAEfV,EAAEW,WAAW,GAAI,CACfC,MAAKhB,GAAS,CAAEiB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,KAIjBf,EAAEgB,KAAO,WACPhB,EAAEiB,UAAUjB,EAAEkB,OACdlB,EAAEmB,WAAWlB,EAAK,GAAK,IACvBD,EAAEiB,UAAUjB,EAAEoB,SAEdpB,EAAEqB,OACFrB,EAAEsB,UAAUtB,EAAEuB,MAAQ,EAAGvB,EAAEwB,OAAS,GAEpC,IAAK,IAAIC,GAAKzB,EAAE0B,QAAU1B,EAAE2B,GA5BhB,GA4B4BF,EAAIzB,EAAE0B,QAASD,GAAKzB,EAAE2B,GA5BlD,GA4B8D,CACxE3B,EAAE4B,OACA,EAAI3B,EACJD,EAAE6B,IAAIJ,GAAIzB,EAAE0B,QAAS1B,EAAE0B,QAAS,GAAK,IACrC1B,EAAE6B,IAAIJ,GAAIzB,EAAE0B,QAAS1B,EAAE0B,QAAS,EAAG,IAJmC,MAOvDI,YAAiB,EAAG,EAAGL,EAAGzB,EAAEuB,MAAQ,GAA7CQ,EAPgE,EAOhEA,EAAGC,EAP6D,EAO7DA,EACLC,EAASjC,EAAE6B,IACf7B,EAAEkC,IAAIlC,EAAEmC,SAASC,QAChB,EACD,EACA,EACApC,EAAEmC,SAASE,QAAQZ,EAAGO,IAAMhC,EAAEuB,MAAQ,IAGxCvB,EAAEsC,OACAP,EACAC,EACAhC,EAAE6B,IAAI7B,EAAEkC,IAAIlC,EAAEmC,SAASC,QAAS,EAAG,EAAGL,EAAGE,GACzCjC,EAAE6B,IAAI7B,EAAEkC,IAAIlC,EAAEmC,SAASC,QAAS,EAAG,EAAGJ,EAAGA,EAAIC,GAC7CjC,EAAE6B,IAAI7B,EAAEuC,IAAIvC,EAAEmC,SAASC,QAAS,EAAG,GAAIH,GAASF,GAChD/B,EAAE6B,IAAI7B,EAAEuC,IAAIvC,EAAEmC,SAASC,QAAS,EAAG,EAAGJ,EAAIC,EAAQD,IACjDD,EACDC,GAIJhC,EAAEwC,QAUSC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ1C,OAAQA,O,kCCvEpB,sCAiBM2C,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMjB,EAAIY,EAAUM,KAAKV,IAAIM,GAASC,EAChCd,EAAIY,EAAUK,KAAKf,IAAIW,GAASE,EACtC,OAAOC,EAAU,CAACjB,EAAGC,GAAK,CAAED,IAAGC,MAIlBF,IAzBU,SACvBa,EACAC,EACAC,EACAK,EACAF,QACG,IADHA,OAAU,GAEV,IAAMjB,EAbkB,SAACoB,EAAQN,EAAOK,GACxC,OAAOC,EAASF,KAAKV,IAAIM,GAASK,EAYxBE,CAAkBT,EAASE,EAAOK,GACtClB,EAXkB,SAACmB,EAAQN,EAAOK,GACxC,OAAOC,EAASF,KAAKf,IAAIW,GAASK,EAUxBG,CAAkBT,EAASC,EAAOK,GAC5C,OAAOF,EAAU,CAACjB,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-07-21-js-2d58fd5a8c86e0f63bbf.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const COUNT = 75;\n  const HUE = p.random();\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n    p.noFill();\n    p.strokeWeight(2);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(HUE, 0.5, 0.5);\n    p.blendMode(p.OVERLAY);\n\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n\n    for (let a = -p.HALF_PI + p.PI / COUNT; a < p.HALF_PI; a += p.PI / COUNT) {\n      p.stroke(\n        1 - HUE,\n        p.map(a, -p.HALF_PI, p.HALF_PI, 0.2, 0.8),\n        p.map(a, -p.HALF_PI, p.HALF_PI, 0, 1)\n      );\n\n      const { x, y } = polarToCartesian(0, 0, a, p.width / 3);\n      const offset = p.map(\n        p.sin(p.animLoop.theta),\n        -1,\n        1,\n        0,\n        p.animLoop.noise2D(a, y) * (p.width / 2)\n      );\n\n      p.bezier(\n        x,\n        y,\n        p.map(p.sin(p.animLoop.theta), -1, 1, x, offset),\n        p.map(p.sin(p.animLoop.theta), -1, 1, y, y - offset),\n        p.map(p.cos(p.animLoop.theta), -1, 1, -offset, -x),\n        p.map(p.cos(p.animLoop.theta), -1, 1, y + offset, y),\n        -x,\n        y\n      );\n    }\n\n    p.pop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}