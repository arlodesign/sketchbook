{"version":3,"sources":["webpack:///./src/pages/sketch/2019/10/08.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["RENDER","process","DEV","sketch","p","maxDist","HUE","random","HUES","SCALARS","Array","fill","map","_","i","floor","setup","createCanvas","colorMode","HSL","blendMode","HARD_LIGHT","background","strokeWeight","createLoop","noiseRadius","dist","width","height","draw","animLoop","theta","noise1D","pointA","polarToCartesian","pointB","pointC","pointD","translate","rotate","stroke","sin","cos","noFill","lerpLine","abs","DURATION","frameCount","noLoop","alert","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","max","l","point","lerp"],"mappings":"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","file":"component---src-pages-sketch-2019-10-08-js-5ec5aa0049e2d8d132e4.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst RENDER = process.env.DEV && true;\nconst DURATION = 360;\n\nconst sketch = function(p) {\n  let th = 0;\n  let phi = 0;\n  let maxDist;\n\n  const HUE = p.random(33);\n  const HUES = [HUE, HUE + 33, HUE + 33];\n  const SCALARS = Array(8)\n    .fill()\n    .map((_, i) => p.floor(p.random(i, i + 3)));\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 100);\n    p.blendMode(p.HARD_LIGHT);\n    p.background(p.random(HUES), 100, 10);\n    p.strokeWeight(2);\n    p.createLoop(DURATION, {\n      noiseRadius: 1,\n    });\n\n    maxDist = p.dist(0, 0, p.width / 2, p.height / 2);\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n    const pointA = polarToCartesian(0, 0, theta * 2, maxDist, true);\n    const pointB = polarToCartesian(\n      0,\n      0,\n      -theta * SCALARS[0],\n      p.height * noise1D(SCALARS[0] / 100),\n      true\n    );\n    const pointC = polarToCartesian(\n      0,\n      0,\n      theta * SCALARS[1],\n      p.width * noise1D(SCALARS[1] / 100),\n      true\n    );\n    const pointD = polarToCartesian(0, 0, -theta * 2, p.height / 2, true);\n    p.translate(p.width / 2, p.height / 2);\n    p.rotate(theta);\n    p.stroke(\n      HUES[p.floor(p.map(p.sin(theta * SCALARS[2]), -1, 1, 0, 3))],\n      100,\n      p.map(p.sin(theta * SCALARS[3]), -1, 1, 50, 100),\n      p.map(p.cos(theta * SCALARS[4]), -1, 1, 50, 0)\n    );\n    p.noFill();\n    lerpLine(\n      p,\n      ...pointA,\n      ...pointB,\n      p.abs(noise1D(SCALARS[5] / 100)) + 0.0000001\n    );\n    lerpLine(\n      p,\n      ...pointB,\n      ...pointC,\n      p.abs(noise1D(SCALARS[6] / 100)) + 0.0000001\n    );\n    lerpLine(\n      p,\n      ...pointC,\n      ...pointD,\n      p.abs(noise1D(SCALARS[7] / 100)) + 0.0000001\n    );\n\n    if (p.frameCount === DURATION * 60) {\n      p.noLoop();\n      RENDER && alert(\"done\");\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n"],"sourceRoot":""}