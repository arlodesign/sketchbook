{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/03.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","sketch","p","alpha","particles","Particle","this","velocity","createVector","random","position","move","prev","add","map","noise","frameCount","mult","setup","createCanvas","a","TWO_PI","push","width","height","background","noStroke","draw","fill","beginShape","forEach","particle","vertex","endShape","CLOSE","noLoop","SketchPage"],"mappings":"4FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,2iCCVjC,IAAMO,EAAS,SAASC,GACtB,IAAIC,EAAQ,EAERC,EAAY,GAEVC,EALmB,WAMvB,WAAYd,EAAGG,GACbY,KAAKf,EAAIA,EACTe,KAAKZ,EAAIA,EAETY,KAAKC,SAAWL,EAAEM,aAAaN,EAAEO,QAAQ,EAAG,GAAIP,EAAEO,QAAQ,EAAG,IAC7DH,KAAKI,SAAWR,EAAEM,aAAaF,KAAKf,EAAGe,KAAKZ,GAXvB,mBAcvBiB,KAAA,WACEL,KAAKM,KAAO,CAAErB,EAAGe,KAAKI,SAASnB,EAAGG,EAAGY,KAAKI,SAAShB,GACnDY,KAAKC,SAASM,IACZX,EAAEM,aACAN,EAAEY,IACAZ,EAAEa,MACAT,KAAKI,SAASnB,EAAI,IAClBe,KAAKI,SAAShB,EAAI,IAClBQ,EAAEc,WAAa,KAEjB,EACA,GACC,GACD,IAEFd,EAAEY,IACAZ,EAAEa,MACAT,KAAKI,SAASnB,EAAI,IAClBe,KAAKI,SAAShB,EAAI,IAClBQ,EAAEc,WAAa,KAEjB,EACA,GACC,GACD,MAINV,KAAKC,SAASU,KAxCD,SAyCbX,KAAKI,SAASG,IAAIP,KAAKC,WA3CF,KA+CzBL,EAAEgB,MAAQ,WACRhB,EAAEiB,aAAa,IAAK,KACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAEmB,OAAQD,GAAKlB,EAAEmB,OAAS,GAC5CjB,EAAUkB,KAAV,EACMjB,EADN,EAEOT,YAAiBM,EAAEqB,MAAQ,EAAGrB,EAAEsB,OAAS,EAAGJ,EAAG,KAAK,MAI7DlB,EAAEuB,WAAW,GACbvB,EAAEwB,YAGJxB,EAAEyB,KAAO,WACPzB,EAAE0B,KAAK1B,EAAEY,IAAIZ,EAAET,IAAIS,EAAEc,WAAa,MAAO,EAAG,EAAG,EAAG,KAAMb,GAExDD,EAAE2B,aACFzB,EAAU0B,SAAQ,SAAAC,GAChBA,EAASpB,OACTT,EAAE8B,OAAOD,EAASrB,SAASnB,EAAGwC,EAASrB,SAAShB,MAElDQ,EAAE+B,SAAS/B,EAAEgC,QAIL,KADV/B,GAAS,OACMD,EAAEiC,UAUJC,UAPI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQnC,OAAQA,IAChB","file":"component---src-pages-sketch-2019-06-03-js-23e5dd5458bd9ee74762.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let alpha = 5;\n  let multiplier = 0.99;\n  let particles = [];\n\n  class Particle {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n\n      this.velocity = p.createVector(p.random(-1, 1), p.random(-1, 1));\n      this.position = p.createVector(this.x, this.y);\n    }\n\n    move() {\n      this.prev = { x: this.position.x, y: this.position.y };\n      this.velocity.add(\n        p.createVector(\n          p.map(\n            p.noise(\n              this.position.x / 300,\n              this.position.y / 200,\n              p.frameCount / 400\n            ),\n            0,\n            1,\n            -0.1,\n            0.1\n          ),\n          p.map(\n            p.noise(\n              this.position.x / 200,\n              this.position.y / 300,\n              p.frameCount / 400\n            ),\n            0,\n            1,\n            -0.1,\n            0.1\n          )\n        )\n      );\n      this.velocity.mult(multiplier, multiplier);\n      this.position.add(this.velocity);\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 50) {\n      particles.push(\n        new Particle(\n          ...polarToCartesian(p.width / 2, p.height / 2, a, 100, true)\n        )\n      );\n    }\n    p.background(0);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    p.fill(p.map(p.cos(p.frameCount / 100), -1, 1, 0, 255), alpha);\n\n    p.beginShape();\n    particles.forEach(particle => {\n      particle.move();\n      p.vertex(particle.position.x, particle.position.y);\n    });\n    p.endShape(p.CLOSE);\n  };\n\n  alpha -= 0.0005;\n  alpha === 0 && p.noLoop();\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n    <p>Reload page for a different variation.</p>\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}