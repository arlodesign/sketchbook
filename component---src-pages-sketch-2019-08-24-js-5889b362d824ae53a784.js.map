{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/08/24.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","points","bounds","Point","this","dist","random","width","dir","offset","TWO_PI","update","animLoop","noise2D","theta","getArray","setup","pixelDensity","frameRate","createCanvas","createLoop","gif","render","open","noiseDetail","Array","fill","map","draw","background","forEach","pt","translate","height","cells","DVMesh","voronoi","cell","i","cellCanvas","createGraphics","cellMask","ctx","strokeWeight","strokeJoin","BEVEL","beginShape","vertex","endShape","CLOSE","rotate","length","line","STROKEWEIGHT","cellImage","get","mask","image","noFill","square","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-08-24-js-5889b362d824ae53a784.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport { DVMesh } from \"@thi.ng/geom-voronoi\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const STROKEWEIGHT = 20;\n\n  let points;\n  let bounds;\n\n  class Point {\n    constructor(x, y) {\n      this.centerX = x;\n      this.centerY = y;\n      this.x = x;\n      this.y = y;\n      this.dist = p.random(p.width / 10);\n      this.dir = p.random([1, -1]);\n      this.offset = p.random(p.TWO_PI);\n    }\n\n    update() {\n      const { noise2D, theta } = p.animLoop;\n      const { x, y } = polarToCartesian(\n        this.centerX,\n        this.centerY,\n        (this.offset + theta) * this.dir,\n        this.dist * noise2D(this.x / 1000, this.y / 1000)\n      );\n      this.x = x;\n      this.y = y;\n    }\n\n    getArray() {\n      return [this.x, this.y];\n    }\n  }\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.frameRate(30);\n    p.createCanvas(660, 840);\n\n    p.createLoop(30, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseDetail: 0.5,\n    });\n\n    bounds = [\n      [-p.width / 2 + STROKEWEIGHT, -p.width / 2 + STROKEWEIGHT],\n      [p.width / 2 - STROKEWEIGHT, -p.width / 2 + STROKEWEIGHT],\n      [p.width / 2 - STROKEWEIGHT, p.width / 2 - STROKEWEIGHT],\n      [-p.width / 2 + STROKEWEIGHT, p.width / 2 - STROKEWEIGHT],\n    ];\n\n    points = new Array(10)\n      .fill()\n      .map(() => new Point(p.random(...bounds[3]), p.random(...bounds[3])));\n  };\n\n  p.draw = function() {\n    const { theta } = p.animLoop;\n    p.background(255);\n\n    points.forEach(pt => pt.update());\n\n    p.translate(p.width / 2, p.height / 2);\n\n    let mesh = new DVMesh(points.map(pt => pt.getArray()));\n    let cells = mesh.voronoi(bounds);\n\n    cells.forEach((cell, i) => {\n      const cellCanvas = p.createGraphics(\n        p.width - STROKEWEIGHT,\n        p.width - STROKEWEIGHT\n      );\n      const cellMask = p.createGraphics(\n        p.width - STROKEWEIGHT,\n        p.width - STROKEWEIGHT\n      );\n\n      cellCanvas.fill(255);\n      cellMask.fill(0);\n\n      [cellCanvas, cellMask].forEach(ctx => {\n        ctx.strokeWeight(STROKEWEIGHT);\n        ctx.strokeJoin(p.BEVEL);\n        ctx.translate(cellCanvas.width / 2, cellCanvas.height / 2);\n        ctx.beginShape();\n        cell.forEach(pt => ctx.vertex(...pt));\n        ctx.endShape(p.CLOSE);\n      });\n\n      cellCanvas.rotate((i + 1) * (p.TWO_PI / cells.length) + theta);\n\n      let y = -p.width / 2;\n      while (y < p.width * 2) {\n        cellCanvas.line(-p.width, y - p.width, p.width, y - p.width);\n        y += STROKEWEIGHT * 3;\n      }\n\n      const cellImage = cellCanvas.get();\n      cellImage.mask(cellMask);\n      p.image(\n        cellImage,\n        bounds[0][0] - STROKEWEIGHT / 2,\n        bounds[0][1] - STROKEWEIGHT / 2\n      );\n    });\n\n    p.noFill();\n    p.strokeWeight(STROKEWEIGHT);\n    p.square(...bounds[0], p.width - STROKEWEIGHT * 2);\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"This one runs SUUUUUUUPER slow in the browser, but it makes a pretty rad GIF.\"\n  />\n);\n"],"sourceRoot":""}