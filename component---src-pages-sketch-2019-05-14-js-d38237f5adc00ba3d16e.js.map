{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/14.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","distance","HUE","random","theta","center","setup","createCanvas","width","height","dist","colorMode","HSB","background","draw","strokeWeight","stroke","map","sin","lerpLine","polarToCartesian","noise","frameCount","TWO_PI","noLoop","location","path","pathname","description","polarToCartesianX","angle","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"sJAMMA,EAAS,SAASC,GACtB,IACIC,EADEC,EAAMF,EAAEG,OAAO,IAEjBC,EAAQ,EACRC,EAAS,GAEbL,EAAEM,MAAQ,WACRN,EAAEO,aAAa,IAAK,KACpBF,EAAS,CAACL,EAAEQ,MAAQ,EAAGR,EAAES,OAAS,GAClCR,EAAWD,EAAEU,KAAF,MAAAV,EAAUK,EAAR,OAAD,CAAiBL,EAAEQ,MAAOR,EAAES,UACxCT,EAAEW,UAAUX,EAAEY,IAAK,KACnBZ,EAAEa,WAAWX,EAAK,GAAI,KAGxBF,EAAEc,KAAO,WACPd,EAAEe,aAAa,GACff,EAAEgB,OAAOhB,EAAEiB,IAAIjB,EAAEkB,IAAId,IAAS,EAAG,EAAGF,EAAM,GAAIA,GAAM,GAAI,IACxDiB,IAAQ,WAAR,GACEnB,GADF,OAEKK,EACAe,IAAgB,WAAhB,EAAoBf,EAApB,QAA4BD,EAAOH,EAAW,GAAG,KAHtD,CAIED,EAAEqB,MAAMrB,EAAEsB,WAAa,GAAIrB,EAAUG,GAAS,IAC9C,KAEFJ,EAAEgB,OAAOhB,EAAEiB,IAAIjB,EAAEkB,IAAId,IAAS,EAAG,EAAGF,EAAKA,EAAM,IAAK,GAAI,IACxDiB,IAAQ,WAAR,GACEnB,GADF,OAEKK,EACAe,IAAgB,WAAhB,EAAoBf,EAApB,QAA4BD,EAAOH,GAAU,KAHlD,CAIED,EAAEqB,MAAMrB,EAAEsB,WAAa,GAAIrB,EAAUG,GAAS,IAC9C,MAGFA,GAASJ,EAAEuB,OAAS,KACRvB,EAAEuB,QACZvB,EAAEwB,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc1B,OAAQA,EAAQ2B,KAAMD,EAASE,SAAUC,YAAY,O,iCC/CrE,0GAAMC,EAAoB,SAACxB,EAAQyB,EAAO7B,GACxC,OAAOI,EAAS0B,KAAKC,IAAIF,GAAS7B,GAE9BgC,EAAoB,SAAC5B,EAAQyB,EAAO7B,GACxC,OAAOI,EAAS0B,KAAKb,IAAIY,GAAS7B,GAa9BiC,EAA0B,SAC9BC,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUJ,KAAKC,IAAIF,GAASO,EAChCI,EAAIL,EAAUL,KAAKb,IAAIY,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBrB,IAzBU,SACvBe,EACAC,EACAN,EACA7B,EACAsC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIX,EAAkBM,EAASL,EAAO7B,GACtCwC,EAAIR,EAAkBG,EAASN,EAAO7B,GAC5C,OAAOsC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,iCCflB,aAASzC,EAAG0C,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChB/C,EAAEG,SAAW8C,GAAKjD,EAAEkD,MAAMlD,EAAEmD,KAAKT,EAAIE,EAAIK,GAAIjD,EAAEmD,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-05-14-js-d38237f5adc00ba3d16e.js","sourcesContent":["import React from \"react\";\nimport { withPrefix } from \"gatsby\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport lerpLine from \"~lib/lerpLine\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const HUE = p.random(50);\n  let distance;\n  let theta = 0;\n  let center = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    center = [p.width / 3, p.height / 3];\n    distance = p.dist(...center, p.width, p.height);\n    p.colorMode(p.HSB, 100);\n    p.background(HUE, 10, 40);\n  };\n\n  p.draw = function() {\n    p.strokeWeight(2);\n    p.stroke(p.map(p.sin(theta), -1, 1, HUE + 50, HUE), 30, 80);\n    lerpLine(\n      p,\n      ...center,\n      ...polarToCartesian(...center, theta, distance / 2, true),\n      p.noise(p.frameCount / 50, distance, theta) / 20,\n      false\n    );\n    p.stroke(p.map(p.sin(theta), -1, 1, HUE, HUE + 50), 50, 80);\n    lerpLine(\n      p,\n      ...center,\n      ...polarToCartesian(...center, theta, distance, true),\n      p.noise(p.frameCount / 10, distance, theta) / 10,\n      false\n    );\n\n    theta += p.TWO_PI / 2000;\n    if (theta > p.TWO_PI) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}