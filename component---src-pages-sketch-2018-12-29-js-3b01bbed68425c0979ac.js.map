{"version":3,"sources":["webpack:///./src/pages/sketch/2018/12/29.js"],"names":["sketch","p","circleSize","gridGap","focusX","focusY","circles","distance","direction","userControl","Circle","x","y","this","draw","noFill","i","stroke","ellipse","lerp","map","dist","width","height","setup","createCanvas","random","CIRCLES_X","floor","CIRCLES_Y","GRIDGAP_X","GRIDGAP_Y","push","background","mouseX","cos","frameCount","mouseY","sin","forEach","circle","mouseClicked","touchMoved","location","path","pathname","description"],"mappings":"8FAAA,6CAGMA,EAAS,SAASC,GACtB,IAAIC,EAEAC,EACAC,EACAC,EAHAC,EAAU,GAIVC,EAAW,EACXC,EAAY,EACZC,GAAc,EAEZC,EAVmB,WAWvB,WAAYC,EAAGC,GACbC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EAbY,mBAevBE,KAAA,WACEb,EAAEc,SACF,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAASa,IAC3Bf,EAAEgB,OAAF,iBAA0BD,EAAIb,EAA9B,KACAF,EAAEiB,QACAjB,EAAEkB,KAAKN,KAAKF,EAAGP,EAAQY,EAAIb,EAAU,GACrCF,EAAEkB,KAAKN,KAAKD,EAAGP,EAAQW,EAAIb,EAAU,GACrCD,EACEc,EAAIb,EACJF,EAAEmB,IACAnB,EAAEoB,KAAKR,KAAKF,EAAGE,KAAKD,EAAGR,EAAQC,GAC/B,EACAJ,EAAEoB,KAAK,EAAG,EAAGpB,EAAEqB,MAAOrB,EAAEsB,QACX,EAAbrB,GACCA,GACD,KA9Ba,KAqCzBD,EAAEuB,MAAQ,WACRvB,EAAEwB,aAAa,IAAK,KACpBvB,EAAaD,EAAEyB,OAAO,IAAK,KAC3BvB,EAAUD,EAAa,GACvBE,EAASH,EAAEqB,MAAQ,EACnBjB,EAASJ,EAAEsB,OAAS,EAKpB,IAJA,IAAMI,EAAY1B,EAAE2B,OAAO3B,EAAEqB,MAAQnB,IAAYD,EAAaC,IACxD0B,EAAY5B,EAAE2B,OAAO3B,EAAEsB,OAASpB,IAAYD,EAAaC,IACzD2B,GAAa7B,EAAEqB,MAAQK,EAAYzB,IAAeyB,EAAY,GAC9DI,GAAa9B,EAAEsB,OAASM,EAAY3B,IAAe2B,EAAY,GAE/DlB,GAAKmB,EAAY5B,EAAa,EAClCS,GAAKV,EAAEqB,MAAQpB,EACfS,GAAKT,EAAa4B,EAElB,IACE,IAAIlB,GAAKmB,EAAY7B,EAAa,EAClCU,GAAKX,EAAEsB,OAASrB,EAChBU,GAAKV,EAAa6B,EAElBzB,EAAQ0B,KAAK,IAAItB,EAAOC,EAAGC,KAKjCX,EAAEa,KAAO,WACPb,EAAEgC,WAAW,KACb7B,EAASK,EACLR,EAAEiC,OACFjC,EAAEqB,MAAQ,EAAIrB,EAAEkC,IAAIlC,EAAEmC,YAAwB,EAAVjC,IAAgBI,EACxDF,EAASI,EACLR,EAAEoC,OACFpC,EAAEsB,OAAS,EAAItB,EAAEqC,IAAIrC,EAAEmC,YAAwB,EAAVjC,IAAgBI,EACzDD,EAAQiC,SAAQ,SAAAC,GAAM,OAAIA,EAAO1B,WACjCP,GAAYC,KACKP,EAAEqB,MAAQ,IAAGd,GAAa,GACvCD,EAAWL,IAAYM,EAAY,IAGzCP,EAAEwC,aAAe,WACfhC,GAAeA,GAGjBR,EAAEyC,WAAa,WACb,GACEzC,EAAEiC,QAAU,GACZjC,EAAEoC,QAAU,GACZpC,EAAEiC,QAAUjC,EAAEqB,OACdrB,EAAEoC,QAAUpC,EAAEsB,OAEd,OAAO,IAKE,0BAAGoB,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACE3C,OAAQA,EACR4C,KAAMD,EAASE,SACfC,YAAY","file":"component---src-pages-sketch-2018-12-29-js-3b01bbed68425c0979ac.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  let circleSize;\n  let circles = [];\n  let gridGap;\n  let focusX;\n  let focusY;\n  let distance = 0;\n  let direction = 1;\n  let userControl = false;\n\n  class Circle {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n    draw() {\n      p.noFill();\n      for (let i = 0; i < gridGap; i++) {\n        p.stroke(`rgba(0, 0, 0, ${i / gridGap})`);\n        p.ellipse(\n          p.lerp(this.x, focusX, i / gridGap / 2),\n          p.lerp(this.y, focusY, i / gridGap / 2),\n          circleSize -\n            i * gridGap +\n            p.map(\n              p.dist(this.x, this.y, focusX, focusY),\n              0,\n              p.dist(0, 0, p.width, p.height),\n              circleSize * 2,\n              -circleSize,\n              true\n            )\n        );\n      }\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    circleSize = p.random(100, 250);\n    gridGap = circleSize / 10;\n    focusX = p.width / 2;\n    focusY = p.height / 2;\n    const CIRCLES_X = p.floor((p.width - gridGap) / (circleSize + gridGap));\n    const CIRCLES_Y = p.floor((p.height - gridGap) / (circleSize + gridGap));\n    const GRIDGAP_X = (p.width - CIRCLES_X * circleSize) / (CIRCLES_X + 1);\n    const GRIDGAP_Y = (p.height - CIRCLES_Y * circleSize) / (CIRCLES_Y + 1);\n    for (\n      let x = -GRIDGAP_X - circleSize / 2;\n      x <= p.width + circleSize;\n      x += circleSize + GRIDGAP_X\n    ) {\n      for (\n        let y = -GRIDGAP_Y - circleSize / 2;\n        y <= p.height + circleSize;\n        y += circleSize + GRIDGAP_Y\n      ) {\n        circles.push(new Circle(x, y));\n      }\n    }\n  };\n\n  p.draw = function() {\n    p.background(255);\n    focusX = userControl\n      ? p.mouseX\n      : p.width / 2 + p.cos(p.frameCount / (gridGap * 2)) * distance;\n    focusY = userControl\n      ? p.mouseY\n      : p.height / 2 + p.sin(p.frameCount / (gridGap * 2)) * distance;\n    circles.forEach(circle => circle.draw());\n    distance += direction;\n    if (distance === p.width / 2) direction = -1;\n    if (distance < circleSize) direction = 1;\n  };\n\n  p.mouseClicked = function() {\n    userControl = !userControl;\n  };\n\n  p.touchMoved = function() {\n    if (\n      p.mouseX >= 0 &&\n      p.mouseY >= 0 &&\n      p.mouseX <= p.width &&\n      p.mouseY <= p.height\n    ) {\n      return false;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"\n      Click or tap to toggle user control of the sketch. Reload page for a\n      different variation.\n    \"\n  />\n);\n"],"sourceRoot":""}