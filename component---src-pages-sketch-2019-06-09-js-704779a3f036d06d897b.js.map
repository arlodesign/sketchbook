{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/09.js","webpack:///./src/lib/shuffle.js"],"names":["sketch","p","HUE","random","WIDTH","RULES","GRID_SIZE","ROTATIONS","shuffle","HALF_PI","PI","cellCount","row","this","cells","Array","from","length","floor","draw","y","forEach","c","i","fill","color","push","translate","rotate","triangle","pop","update","newState","str","String","setup","createCanvas","colorMode","HSL","background","noStroke","frameCount","noLoop","SketchPage","a","j","Math"],"mappings":"8LAKMA,EAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,KACfC,EAAQ,IAERC,EAAQ,CACZ,IAAOJ,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,KAEhBG,EAAY,GACZC,EAAYC,YAAQ,CAAC,EAAGP,EAAEQ,QAASR,EAAES,GAAIT,EAAEQ,QAAUR,EAAES,KAEzDC,EAAY,EA2CVC,EAAM,IA5Da,WAoBvB,aACEC,KAAKC,MAAQC,MAAMC,KAAK,CAAEC,OAAQb,EAAQE,IAAa,kBAAM,KAC7DO,KAAKC,MAAM,GAAK,EAChBD,KAAKC,MAAMD,KAAKC,MAAMG,OAAS,GAAK,EACpCJ,KAAKC,MAAMb,EAAEiB,MAAML,KAAKC,MAAMG,OAAS,IAAM,EAC7CJ,KAAKC,MAAMb,EAAEiB,MAAML,KAAKC,MAAMG,QAAU,EAAI,KAAO,EAzB9B,2BA2BvBE,KAAA,SAAKC,GACHP,KAAKC,MAAMO,SAAQ,SAACC,EAAGC,GACrBtB,EAAEuB,KAAKF,EAAIrB,EAAEwB,MAAMvB,EAAK,IAAK,IAAMD,EAAEwB,MAAMvB,EAAK,IAAK,KACrDD,EAAEyB,OACFzB,EAAE0B,UACAJ,EAAIjB,EAAYA,EAAY,EAC5Bc,EAAId,EAAYA,EAAY,GAE9BL,EAAE2B,OAAOrB,EAAUI,EAAY,IAC/BV,EAAE4B,UACCvB,EAAY,GACZA,EAAY,EACbA,EAAY,EACZA,EAAY,GACXA,EAAY,EACbA,EAAY,GAEdL,EAAE6B,MACFnB,QA7CmB,EAgDvBoB,OAAA,WAAU,IAAD,OACHC,EAAW,GACfnB,KAAKC,MAAMO,SAAQ,SAACC,EAAGC,GACrB,IAAIU,EAAY,IAANV,EAAU,IAAMW,OAAO,EAAKpB,MAAMS,EAAI,IAChDU,GAAOC,OAAO,EAAKpB,MAAMS,IACzBU,GAAOV,IAAM,EAAKT,MAAMG,OAAS,EAAI,IAAMiB,OAAO,EAAKpB,MAAMS,EAAI,IACjES,EAASN,KAAKrB,EAAM4B,OAEtBpB,KAAKC,MAAQkB,GAxDQ,MA8DzB/B,EAAEkC,MAAQ,WACRlC,EAAEmC,aAAahC,EA5DF,KA6DbH,EAAEoC,UAAUpC,EAAEqC,IAAK,IACnBrC,EAAEsC,WAAWrC,EAAK,IAAK,IACvBD,EAAEuC,YAGJvC,EAAEkB,KAAO,WACPP,EAAIO,KAAKlB,EAAEwC,WAAa,GACxB7B,EAAImB,SACJ9B,EAAEwC,WAAanC,EArEF,KAqEwBL,EAAEyC,WAW5BC,UAPI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ3C,OAAQA,IAChB,6F,kCCpFW,SAASQ,EAAQoC,GAC9B,IAAK,IAAIrB,EAAIqB,EAAE3B,OAAS,EAAGM,EAAI,EAAGA,IAAK,CACrC,IAAMsB,EAAIC,KAAK5B,MAAM4B,KAAK3C,UAAYoB,EAAI,IADL,EAEtB,CAACqB,EAAEC,GAAID,EAAErB,IAAvBqB,EAAErB,GAFkC,KAE9BqB,EAAEC,GAF4B,KAIvC,OAAOD,EALT","file":"component---src-pages-sketch-2019-06-09-js-704779a3f036d06d897b.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport shuffle from \"~lib/shuffle\";\n\nconst sketch = function(p) {\n  const HUE = p.random(100);\n  const WIDTH = 660;\n  const HEIGHT = 840;\n  const RULES = {\n    \"111\": p.random([0, 1]),\n    \"110\": p.random([0, 1]),\n    \"101\": p.random([0, 1]),\n    \"100\": p.random([0, 1]),\n    \"011\": p.random([0, 1]),\n    \"010\": p.random([0, 1]),\n    \"001\": p.random([0, 1]),\n    \"000\": p.random([0, 1]),\n  };\n  const GRID_SIZE = 10;\n  const ROTATIONS = shuffle([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]);\n\n  let cellCount = 0;\n\n  class Row {\n    constructor() {\n      this.cells = Array.from({ length: WIDTH / GRID_SIZE }, () => 0);\n      this.cells[0] = 1;\n      this.cells[this.cells.length - 1] = 1;\n      this.cells[p.floor(this.cells.length / 3)] = 1;\n      this.cells[p.floor(this.cells.length * (2 / 3))] = 1;\n    }\n    draw(y) {\n      this.cells.forEach((c, i) => {\n        p.fill(c ? p.color(HUE, 100, 50) : p.color(HUE, 100, 25));\n        p.push();\n        p.translate(\n          i * GRID_SIZE + GRID_SIZE / 2,\n          y * GRID_SIZE + GRID_SIZE / 2\n        );\n        p.rotate(ROTATIONS[cellCount % 4]);\n        p.triangle(\n          -GRID_SIZE / 2,\n          -GRID_SIZE / 2,\n          GRID_SIZE / 2,\n          GRID_SIZE / 2,\n          -GRID_SIZE / 2,\n          GRID_SIZE / 2\n        );\n        p.pop();\n        cellCount++;\n      });\n    }\n    update() {\n      let newState = [];\n      this.cells.forEach((c, i) => {\n        let str = i === 0 ? \"0\" : String(this.cells[i - 1]);\n        str += String(this.cells[i]);\n        str += i === this.cells.length - 1 ? \"0\" : String(this.cells[i + 1]);\n        newState.push(RULES[str]);\n      });\n      this.cells = newState;\n    }\n  }\n\n  const row = new Row();\n\n  p.setup = function() {\n    p.createCanvas(WIDTH, HEIGHT);\n    p.colorMode(p.HSL, 75);\n    p.background(HUE, 100, 33);\n    p.noStroke();\n  };\n\n  p.draw = function() {\n    row.draw(p.frameCount - 1);\n    row.update();\n    p.frameCount * GRID_SIZE > HEIGHT && p.noLoop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n    <p>Continuing to explore randomly generated cellular automata.</p>\n  </Layout>\n);\n\nexport default SketchPage;\n","export default function shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n"],"sourceRoot":""}