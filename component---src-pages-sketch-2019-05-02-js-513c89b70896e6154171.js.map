{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/02.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","a","TWO_PI","setup","createCanvas","stroke","strokeWeight","background","draw","FY","map","cos","height","polarToCartesian","width","sin","x","y","lerpLine","noise","frameCount","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x1","y1","x2","y2","rate","showFirstDot","noisy","l","random","point","lerp","line"],"mappings":"6FAAA,qEAKMA,EAAS,SAASC,GACtB,IAAIC,EAAID,EAAEE,OAEVF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,OAAO,GACTL,EAAEM,aAAa,KACfN,EAAEO,WAAW,MAGfP,EAAEQ,KAAO,WACP,IAAMC,EAAKT,EAAEU,IAAIV,EAAEW,IAAIV,IAAK,EAAG,EAAG,EAAGD,EAAEY,QADrB,EAGDC,YACfb,EAAEc,MAAQ,EACVL,EACAR,EACAD,EAAEU,KAAKV,EAAEe,IAAQ,GAAJd,IAAU,EAAG,EAAG,EAAGD,EAAEc,QAJ5BE,EAHU,EAGVA,EAAGC,EAHO,EAGPA,EAOXC,YACElB,EACAA,EAAEc,MAAQ,EACVL,EACAO,EACAC,EACAjB,EAAEmB,MAAMnB,EAAEoB,WAAa,GAAInB,GAAK,IAChC,IAGFA,GAAKD,EAAEE,OAAS,KACZ,GAAKF,EAAEqB,WAIA,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcvB,OAAQA,EAAQwB,KAAMD,EAASE,SAAUC,YAAY,O,kCCzCrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKnB,IAAIiB,GAASC,GAE9BE,EAAoB,SAACJ,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKf,IAAIa,GAASC,GAa9BG,EAA0B,SAC9BC,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMrB,EAAIiB,EAAUH,KAAKnB,IAAIiB,GAASO,EAChClB,EAAIiB,EAAUJ,KAAKf,IAAIa,GAASQ,EACtC,OAAOC,EAAU,CAACrB,EAAGC,GAAK,CAAED,IAAGC,MAIlBJ,IAzBU,SACvBoB,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMrB,EAAIU,EAAkBO,EAASL,EAAOC,GACtCZ,EAAIc,EAAkBG,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACrB,EAAGC,GAAK,CAAED,IAAGC,O,oCCHlB,aACbjB,EACAsC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,QADA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAEJF,EAAO,EACT,IAAK,IAAIG,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,KACXC,GAAS5C,EAAE8C,SAAWD,IAAOD,IAChC5C,EAAE+C,MAAM/C,EAAEgD,KAAKV,EAAIE,EAAIK,GAAI7C,EAAEgD,KAAKT,EAAIE,EAAII,SAI9C7C,EAAEiD,KAAKX,EAAIC,EAAIC,EAAIC","file":"component---src-pages-sketch-2019-05-02-js-513c89b70896e6154171.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  let a = p.TWO_PI;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.stroke(0);\n    p.strokeWeight(0.25);\n    p.background(255);\n  };\n\n  p.draw = function() {\n    const FY = p.map(p.cos(a), -1, 1, 0, p.height);\n\n    const { x, y } = polarToCartesian(\n      p.width / 3,\n      FY,\n      a,\n      p.map(-p.sin(a * 13), -1, 1, 0, p.width)\n    );\n\n    lerpLine(\n      p,\n      p.width / 3,\n      FY,\n      x,\n      y,\n      p.noise(p.frameCount / 50, a) / 10,\n      false\n    );\n\n    a -= p.TWO_PI / 10000;\n    a < 0 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  if (rate > 0) {\n    for (let l = 0; l < 1; l += rate) {\n      if (l === 0 && !showFirstDot) continue;\n      if ((noisy && p.random() > l) || !noisy) {\n        p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n      }\n    }\n  } else {\n    p.line(x1, y1, x2, y2);\n  }\n}\n"],"sourceRoot":""}