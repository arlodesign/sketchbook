{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/08.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","RENDER","getURLParams","render","setup","pixelDensity","frameRate","createCanvas","noStroke","colorMode","HSL","TWO_PI","createLoop","gif","open","noiseRadius","draw","animLoop","theta","noise1D","background","translate","width","height","points","sin","cos","tan","a","push","fill","PI","QUARTER_PI","blendMode","SCREEN","rotate","beginShape","forEach","d","curveVertex","polarToCartesian","endShape","pop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2020-01-08-js-3d729245eebab5655612.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.noStroke();\n    p.colorMode(p.HSL, p.TWO_PI);\n\n    p.createLoop(40, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.2,\n    });\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n    p.background(0);\n    p.translate(p.width / 2, p.height / 2);\n\n    const points = [\n      [p.TWO_PI * noise1D(1 / 5), (p.width / 2) * p.sin(theta)],\n      [p.TWO_PI * noise1D(1 / 7), (p.width / 2) * p.cos(theta)],\n      [p.TWO_PI * noise1D(1 / 9), (p.width / 2) * p.sin(-theta)],\n      [p.TWO_PI * noise1D(1 / 3), (p.width / 2) * p.cos(-theta)],\n      [p.TWO_PI * noise1D(1 / 11), (p.width / 2) * p.tan(theta * 2)],\n    ];\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 500) {\n      p.push();\n      p.fill(a, p.PI, p.PI, p.QUARTER_PI / 10);\n      p.blendMode(p.SCREEN);\n      p.rotate(a);\n\n      p.beginShape();\n      points.forEach(([a, d]) =>\n        p.curveVertex(...polarToCartesian(0, 0, a, d, true))\n      );\n      p.curveVertex(\n        ...polarToCartesian(0, 0, points[0][0], points[0][1], true)\n      );\n      p.curveVertex(\n        ...polarToCartesian(0, 0, points[1][0], points[1][1], true)\n      );\n      p.curveVertex(\n        ...polarToCartesian(0, 0, points[2][0], points[2][1], true)\n      );\n      p.endShape();\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}