{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/02.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","HUE","random","initShape","shapes","setup","pixelDensity","createCanvas","colorMode","HSB","Array","from","mouseX","mouseY","a","TWO_PI","d","sort","b","noStroke","draw","background","i","shape","fill","map","length","beginShape","curveVertex","forEach","pt","endShape","unshift","constrain","noise","frameCount","height","pop","touchMoved","width","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,ggBCpBjC,IAAME,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IAEjBC,EAAY,GACZC,EAAS,GAEbJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,GACfN,EAAEO,aAAa,IAAK,KACpBP,EAAEQ,UAAUR,EAAES,IAAK,MAEnBN,EAAYO,MAAMC,KAAKD,MAAM,KAAK,iBAAO,CACvCd,EAAGI,EAAEY,OACLf,EAAGG,EAAEa,OACLC,EAAGd,EAAEE,OAAOF,EAAEe,QACdC,EAAGhB,EAAEE,OAfG,QAkBAe,MAAK,SAACH,EAAGI,GAAJ,OAAUJ,EAAEA,EAAII,EAAEJ,KACjCV,EAAS,CAACD,GAEVH,EAAEmB,YAIJnB,EAAEoB,KAAO,WACPpB,EAAEqB,WAAWpB,EAAM,GAAI,IAAK,IAE5B,IAHkB,eAGTqB,GACP,IAAMC,EAAQnB,EAAOkB,GAErBtB,EAAEwB,KACAxB,EAAEyB,IAAIH,EAAG,EAAGlB,EAAOsB,OAAQzB,EAAKA,EAAM,IACtC,IACAD,EAAEyB,IAAIH,EAAG,EAAGlB,EAAOsB,OAAQ,IAAK,KAElC1B,EAAE2B,aACF3B,EAAE4B,YAAF,MAAA5B,EAAC,EACIF,YACDyB,EAAMA,EAAMG,OAAS,GAAG9B,EACxB2B,EAAMA,EAAMG,OAAS,GAAG7B,EACxB0B,EAAMA,EAAMG,OAAS,GAAGZ,EACxBS,EAAMA,EAAMG,OAAS,GAAGV,EA1CpB,EA0CwBM,GAC5B,KAGJtB,EAAE4B,YAAF,MAAA5B,EAAC,EACIF,YACDyB,EAAMA,EAAMG,OAAS,GAAG9B,EACxB2B,EAAMA,EAAMG,OAAS,GAAG7B,EACxB0B,EAAMA,EAAMG,OAAS,GAAGZ,EACxBS,EAAMA,EAAMG,OAAS,GAAGV,EAnDpB,EAmDwBM,GAC5B,KAGJtB,EAAE4B,YAAF,MAAA5B,EAAC,EACIF,YACDyB,EAAMA,EAAMG,OAAS,GAAG9B,EACxB2B,EAAMA,EAAMG,OAAS,GAAG7B,EACxB0B,EAAMA,EAAMG,OAAS,GAAGZ,EACxBS,EAAMA,EAAMG,OAAS,GAAGV,EA5DpB,EA4DwBM,GAC5B,KAGJC,EAAMM,SAAQ,SAAAC,GAAE,OACd9B,EAAE4B,YAAF,MAAA5B,EAAC,EACIF,YAAiBgC,EAAGlC,EAAGkC,EAAGjC,EAAGiC,EAAGhB,EAAGgB,EAAGd,EAlErC,EAkEyCM,GAAS,QAG1DtB,EAAE+B,YAzCKT,EAAIlB,EAAOsB,OAAS,EAAGJ,GAAK,EAAGA,IAAM,EAArCA,GA2CTlB,EAAO4B,QACL7B,EAAUsB,KAAI,gBAAGX,EAAH,EAAGA,EAAGE,EAAN,EAAMA,EAAN,MAAe,CAC3BpB,EAAGI,EAAEY,OACLf,EAAGG,EAAEa,OACLC,EAAGd,EAAEiC,UACHnB,EAAId,EAAEyB,IAAIzB,EAAEkC,MAAMpB,EAAGd,EAAEmC,WAAa,KAAM,EAAG,EAAG,GAAK,KACrD,EACAnC,EAAEe,QAEJC,EAAGA,EAAIhB,EAAEkC,MAAMlB,EAAGhB,EAAEmC,WAAa,KAAO,QAGxC/B,EAAOsB,OAAS1B,EAAEoC,OAAF,IAClBhC,EAAOiC,OAIXrC,EAAEsC,WAAa,WACb,GACEtC,EAAEY,QAAU,GACZZ,EAAEa,QAAU,GACZb,EAAEY,QAAUZ,EAAEuC,OACdvC,EAAEa,QAAUb,EAAEoC,OAEd,OAAO,IAKE,0BAAGI,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACEzC,OAAQA,EACR0C,KAAMD,EAASE,SACfC,YAAY","file":"component---src-pages-sketch-2019-07-02-js-584a3fd69432e22b1189.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GAP = 6;\n  const HUE = p.random(80);\n\n  let initShape = [];\n  let shapes = [];\n\n  p.setup = function() {\n    p.pixelDensity(1);\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n\n    initShape = Array.from(Array(15), () => ({\n      x: p.mouseX,\n      y: p.mouseY,\n      a: p.random(p.TWO_PI),\n      d: p.random(GAP),\n    }));\n\n    initShape.sort((a, b) => a.a - b.a);\n    shapes = [initShape];\n\n    p.noStroke();\n    // p.strokeWeight(GAP);\n  };\n\n  p.draw = function() {\n    p.background(HUE + 20, 100, 20);\n\n    for (let i = shapes.length - 1; i >= 0; i--) {\n      const shape = shapes[i];\n\n      p.fill(\n        p.map(i, 0, shapes.length, HUE, HUE + 20),\n        100,\n        p.map(i, 0, shapes.length, 100, 20)\n      );\n      p.beginShape();\n      p.curveVertex(\n        ...polarToCartesian(\n          shape[shape.length - 3].x,\n          shape[shape.length - 3].y,\n          shape[shape.length - 3].a,\n          shape[shape.length - 3].d + i * GAP,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          shape[shape.length - 2].x,\n          shape[shape.length - 2].y,\n          shape[shape.length - 2].a,\n          shape[shape.length - 2].d + i * GAP,\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          shape[shape.length - 1].x,\n          shape[shape.length - 1].y,\n          shape[shape.length - 1].a,\n          shape[shape.length - 1].d + i * GAP,\n          true\n        )\n      );\n      shape.forEach(pt =>\n        p.curveVertex(\n          ...polarToCartesian(pt.x, pt.y, pt.a, pt.d + i * GAP, true)\n        )\n      );\n      p.endShape();\n    }\n    shapes.unshift(\n      initShape.map(({ a, d }) => ({\n        x: p.mouseX,\n        y: p.mouseY,\n        a: p.constrain(\n          a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9),\n          0,\n          p.TWO_PI\n        ),\n        d: d * p.noise(d, p.frameCount / 500) * 10,\n      }))\n    );\n    if (shapes.length > p.height / (GAP * 2)) {\n      shapes.pop();\n    }\n  };\n\n  p.touchMoved = function() {\n    if (\n      p.mouseX >= 0 &&\n      p.mouseY >= 0 &&\n      p.mouseX <= p.width &&\n      p.mouseY <= p.height\n    ) {\n      return false;\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Move pointer or finger over sketch.\"\n  />\n);\n"],"sourceRoot":""}