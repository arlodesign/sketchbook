{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/13.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","RENDER","getURLParams","render","H","random","START","TWO_PI","coord","setup","frameRate","noSmooth","createCanvas","background","colorMode","HSB","noFill","createLoop","gif","open","noiseRadius","draw","animLoop","progress","theta","noise1D","bezierPoints","startPoint","polarToCartesian","width","height","endPoint","PI","push","bezierPoint","map","cp","stroke","lerpColor","color","length","curve","slice","flat","frameCount","console","info","floor","DURATION","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2020-02-13-js-e50e1d77e9030c7a8419.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 120;\n  const RATE = 60;\n  const H = p.random(0.7);\n  const START = p.random(p.TWO_PI);\n\n  let coord = [];\n\n  p.setup = function() {\n    p.frameRate(RATE);\n    p.noSmooth();\n    p.createCanvas(660, 840);\n    p.background(128);\n    p.colorMode(p.HSB, 1);\n    p.noFill();\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n  };\n\n  p.draw = function() {\n    const { progress, theta, noise1D } = p.animLoop;\n    let bezierPoints = [];\n\n    const startPoint = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      START + theta * 1.5,\n      p.width / 2 - p.width / 30,\n      true\n    );\n    const endPoint = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      START + theta * 1.5 + p.PI,\n      p.width / 2 - p.width / 30,\n      true\n    );\n\n    bezierPoints.push(startPoint);\n    bezierPoints.push(\n      polarToCartesian(\n        ...startPoint,\n        theta * (400 + noise1D(0.05) * 100),\n        p.height * noise1D(0.07),\n        true\n      )\n    );\n    bezierPoints.push(\n      polarToCartesian(\n        ...endPoint,\n        -theta * (400 + noise1D(0.06) * 100),\n        p.height * -noise1D(0.08),\n        true\n      )\n    );\n    bezierPoints.push(endPoint);\n\n    coord.push([\n      p.bezierPoint(...bezierPoints.map(cp => cp[0]), progress),\n      p.bezierPoint(...bezierPoints.map(cp => cp[1]), progress),\n    ]);\n\n    p.stroke(\n      p.lerpColor(\n        p.color(H, progress, 1 - progress),\n        p.color(H + 0.3, 1 - progress, progress),\n        progress\n      )\n    );\n\n    if (coord.length > 3) {\n      p.curve(...coord.slice(-4).flat());\n    }\n\n    p.frameCount % 100 === 0 && console.info(`${p.floor(progress * 100)}%`);\n    if (!RENDER && p.frameCount === DURATION * RATE) {\n      console.info(\"100%\");\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}