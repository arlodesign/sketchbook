{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/08.js"],"names":["RENDER","process","DEV","sketch","p","SIZES","GRID_SIZE","grid","boxes","Box","x","y","size","this","direction","random","canvasSize","canvas","createGraphics","draw","blendMode","BLEND","background","SCREEN","push","noStroke","forEach","c","i","translate","noiseX","animLoop","noise2D","cos","theta","noiseY","sin","map","fill","circle","pop","image","setup","pixelDensity","frameRate","createCanvas","w","floor","width","h","height","createLoop","gif","render","open","noiseRadius","visited","concat","filter","length","Math","max","overlap","xx","yy","s","b","SketchPage"],"mappings":"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","file":"component---src-pages-sketch-2019-08-08-js-59077113a1cbec49614b.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const SIZES = [1, 2, 3, 5, 8];\n  const GRID_SIZE = 60;\n\n  let grid = [];\n  let boxes = [];\n\n  class Box {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size;\n      this.direction = p.random([-1, 1]);\n      this.canvasSize = GRID_SIZE * size;\n      this.canvas = p.createGraphics(this.canvasSize, this.canvasSize);\n    }\n\n    draw() {\n      const { x, y, size, canvas, canvasSize } = this;\n\n      canvas.blendMode(p.BLEND);\n      canvas.background(0);\n      canvas.blendMode(p.SCREEN);\n      canvas.push();\n      canvas.noStroke();\n\n      [\"red\", \"green\", \"blue\"].forEach((c, i) => {\n        canvas.push();\n        canvas.translate(canvasSize / 2, canvasSize / 2);\n        const noiseX = p.animLoop.noise2D(p.cos(p.animLoop.theta * (i + 1)), x);\n        const noiseY = p.animLoop.noise2D(p.sin(p.animLoop.theta * (i + 1)), y);\n        canvas.translate(\n          canvasSize * p.map(p.cos(p.animLoop.theta), -1, 1, 0, noiseX),\n          canvasSize * p.map(p.cos(p.animLoop.theta), -1, 1, 0, noiseY)\n        );\n        canvas.fill(c);\n        for (let i = 0; i <= canvasSize; i += canvasSize / size) {\n          canvas.circle(0, 0, canvasSize / 2);\n        }\n        canvas.pop();\n      });\n      canvas.pop();\n\n      p.image(canvas, x, y);\n    }\n  }\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    const w = p.floor(p.width / GRID_SIZE);\n    const h = p.floor(p.height / GRID_SIZE);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n\n    for (let x = 0; x < p.width / GRID_SIZE; x++) {\n      grid.push([]);\n      for (let y = 0; y < p.height / GRID_SIZE; y++) {\n        grid[x].push({\n          x,\n          y,\n          visited: false,\n        });\n      }\n    }\n\n    while ([].concat(...grid).filter(({ visited }) => !visited).length) {\n      const { x, y } = p.random(\n        [].concat(...grid).filter(({ visited }) => !visited)\n      );\n\n      if (!grid[x][y].visited) {\n        let size = Math.max(...SIZES);\n        let overlap;\n\n        do {\n          overlap = false;\n          for (let xx = x; xx < size + x; xx++) {\n            for (let yy = y; yy < size + y; yy++) {\n              if (x + size > w || y + size > h || grid[xx][yy].visited) {\n                overlap = true;\n              }\n            }\n          }\n          if (overlap) {\n            size = Math.max(...SIZES.filter(s => s < size));\n          }\n        } while (overlap);\n\n        boxes.push(new Box(x, y, size));\n\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            grid[xx][yy].visited = true;\n          }\n        }\n      }\n    }\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    boxes.forEach(b => b.draw());\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}