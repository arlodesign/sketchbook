{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/03.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","w","h","GRID_SIZE","SIZES","grid","Doodad","x","y","size","this","square","prototype","lerpLine","noise","frameCount","setup","createCanvas","background","stroke","noFill","floor","width","height","xx","push","yy","visited","draw","_ref","_ref3","_p$random","random","concat","apply","filter","_ref2","overlap","Math","max","s","_ref4","length","noLoop","__webpack_exports__","_ref5","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"wIAIMA,EAAS,SAASC,GACtB,IAIIC,EACAC,EALEC,EAAY,GACZC,EAAQ,CAAC,EAAG,EAAG,EAAG,IAEpBC,EAAO,GAILC,EARmB,WASvB,SAAAA,EAAYC,EAAGC,EAAGC,GAChBC,KAAKH,EAAIA,EAAIJ,EACbO,KAAKF,EAAIA,EAAIL,EACbO,KAAKD,KAAOA,EAAON,EAEnBO,KAAKC,SAdgB,OAAAL,EAAAM,UAgBvBD,OAAA,WACE,IAAK,IAAIH,EAAIE,KAAKF,EAAGA,GAAKE,KAAKF,EAAIE,KAAKD,KAAMD,IAC5CK,YACEb,EACAU,KAAKH,EACLC,EACAE,KAAKH,EAAIG,KAAKD,KACdD,EACAR,EAAEc,MAAMd,EAAEe,WAAYP,GAAKE,KAAKD,OAxBfH,EAAA,GA8BzBN,EAAEgB,MAAQ,WACRhB,EAAEiB,aAAa,IAAK,KACpBjB,EAAEkB,WAAW,KACblB,EAAEmB,OAAO,GACTnB,EAAEoB,SAEFnB,EAAID,EAAEqB,MAAMrB,EAAEsB,MAAQnB,GACtBD,EAAIF,EAAEqB,MAAMrB,EAAEuB,OAASpB,GAEvB,IAAK,IAAIqB,EAAK,EAAGA,EAAKvB,EAAGuB,IAAM,CAC7BnB,EAAKoB,KAAK,IACV,IAAK,IAAIC,EAAK,EAAGA,EAAKxB,EAAGwB,IACvBrB,EAAKmB,GAAIC,KAAK,CACZlB,EAAGiB,EACHhB,EAAGkB,EACHC,SAAS,MAMjB3B,EAAE4B,KAAO,WAAW,IAAAC,EAAAC,EAAAC,EACD/B,EAAEgC,QACjBH,EAAA,IAAGI,OAAHC,MAAAL,EAAaxB,GAAM8B,OAAO,SAAAC,GAAA,OAAAA,EAAGT,WADvBpB,EADUwB,EACVxB,EAAGC,EADOuB,EACPvB,EAINH,EAAKE,GAAGC,GAAGmB,SAAS,WACvB,IACIU,EADA5B,EAAO6B,KAAKC,IAALL,MAAAI,KAAYlC,GAGvB,EAAG,CACDiC,GAAU,EACV,IAAK,IAAIb,EAAKjB,EAAGiB,EAAKf,EAAOF,EAAGiB,IAC9B,IAAK,IAAIE,EAAKlB,EAAGkB,EAAKjB,EAAOD,EAAGkB,KAC1BnB,EAAIE,EAAOR,GAAKO,EAAIC,EAAOP,GAAKG,EAAKmB,GAAIE,GAAIC,WAC/CU,GAAU,GAIZA,IACF5B,EAAO6B,KAAKC,IAALL,MAAAI,KAAYlC,EAAM+B,OAAO,SAAAK,GAAC,OAAIA,EAAI/B,YAEpC4B,GAET,IAAI/B,EAAOC,EAAGC,EAAGC,GAEjB,IAAK,IAAIe,EAAKjB,EAAGiB,EAAKf,EAAOF,EAAGiB,IAC9B,IAAK,IAAIE,EAAKlB,EAAGkB,EAAKjB,EAAOD,EAAGkB,IAC9BrB,EAAKmB,GAAIE,GAAIC,SAAU,EAtBJ,IA2BpBG,EAAA,IAAGG,OAAHC,MAAAJ,EAAazB,GAAM8B,OAAO,SAAAM,GAAA,OAAAA,EAAGd,UAAwBe,QACxD1C,EAAE2C,WAKOC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAclD,OAAQA,EAAQmD,KAAMJ,EAASK,SAAUC,YAAY,wCC9FtDR,EAAA,WAAS5C,EAAGqD,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChB1D,EAAEgC,SAAW4B,GAAK5D,EAAE6D,MAAM7D,EAAE8D,KAAKT,EAAIE,EAAIK,GAAI5D,EAAE8D,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-05-03-js-421213c8b64da3d1ca50.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 30;\n  const SIZES = [1, 3, 8, 21];\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.size = size * GRID_SIZE;\n\n      this.square();\n    }\n    square() {\n      for (let y = this.y; y <= this.y + this.size; y++) {\n        lerpLine(\n          p,\n          this.x,\n          y,\n          this.x + this.size,\n          y,\n          p.noise(p.frameCount, y) / this.size\n        );\n      }\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.stroke(0);\n    p.noFill();\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}