{"version":3,"sources":["webpack:///./src/lib/lerpLine.js","webpack:///./src/pages/sketch/2019/06/01.js","webpack:///./src/lib/shuffle.js"],"names":["p","x1","y1","x2","y2","rate","showFirstDot","noisy","l","random","point","lerp","line","sketch","bg","margin","HUE","divisors","shuffle","map","d","alpha","setup","createCanvas","colorMode","HSB","color","background","noFill","floor","width","draw","marginX","sin","frameCount","midLerpVal","leftY","cos","height","rightY","midX","midY","leftLerpLineVal","dist","rightLerpLineVal","stroke","lerpLine","push","noStroke","fill","rect","noLoop","text","pop","location","path","pathname","description","a","i","length","j","Math"],"mappings":"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","file":"component---src-pages-sketch-2019-06-01-js-da28de6c1e8ff2cb6aa0.js","sourcesContent":["/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  if (rate > 0) {\n    for (let l = 0; l < 1; l += rate) {\n      if (l === 0 && !showFirstDot) continue;\n      if ((noisy && p.random() > l) || !noisy) {\n        p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n      }\n    }\n  } else {\n    p.line(x1, y1, x2, y2);\n  }\n}\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport shuffle from \"~lib/shuffle\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const HUE = p.random(100);\n  const FRAME_COUNTDOWN = 10000;\n\n  let divisors = shuffle([2, 3, 5, 8, 13, 21, 34].map(d => d * 25));\n  let alpha = 20;\n  let bg;\n  let margin;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    bg = p.color(100 - HUE, 10, 15);\n    p.background(bg);\n    p.noFill();\n    margin = p.floor(p.width * 0.15);\n  };\n\n  p.draw = function() {\n    const marginX = p.map(\n      p.sin(p.frameCount / divisors[0]),\n      -1,\n      1,\n      margin,\n      margin * 0.05\n    );\n    const midLerpVal = p.map(\n      p.sin(p.frameCount / divisors[1]),\n      -1,\n      1,\n      0.3,\n      0.7\n    );\n    const leftY = p.map(\n      p.cos(p.frameCount / divisors[2]),\n      -1,\n      1,\n      p.height - margin,\n      margin\n    );\n    const rightY = p.map(\n      p.cos(p.frameCount / divisors[3]),\n      -1,\n      1,\n      margin,\n      p.height - margin\n    );\n    const midX = p.lerp(marginX, p.width - marginX, midLerpVal);\n    const midY = p.lerp(leftY, rightY, midLerpVal);\n    const leftLerpLineVal =\n      p.map(p.cos(p.frameCount / divisors[4]), -1, 1, 1.5, 2) /\n      p.dist(midX, midY, marginX, leftY);\n    const rightLerpLineVal =\n      p.map(p.cos(p.frameCount / divisors[4]), -1, 1, 1.5, 2) /\n      p.dist(midX, midY, p.width - marginX, rightY);\n\n    p.stroke(\n      HUE,\n      p.map(p.cos(p.frameCount / divisors[5]), -1, 1, 40, 80),\n      p.map(p.cos(p.frameCount / divisors[6]), -1, 1, 0, 100),\n      alpha\n    );\n    lerpLine(p, midX, midY, marginX, leftY, leftLerpLineVal);\n    lerpLine(p, midX, midY, p.width - marginX, rightY, rightLerpLineVal, false);\n\n    p.push();\n    p.noStroke();\n    p.fill(bg);\n    p.rect(0, 0, p.width, margin);\n    if (p.frameCount > FRAME_COUNTDOWN) {\n      alpha -= 0.01;\n      alpha < 0 && p.noLoop();\n    } else {\n      p.fill(0, 0, 100);\n      p.text(FRAME_COUNTDOWN - p.frameCount, 10, 20);\n    }\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"Reload page for a different variation.\"\n  />\n);\n","export default function shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n"],"sourceRoot":""}