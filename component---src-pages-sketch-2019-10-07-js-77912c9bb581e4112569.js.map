{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/10/07.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","HUE","random","HUES","SCALARS","Array","fill","map","_","i","floor","setup","createCanvas","colorMode","HSL","blendMode","HARD_LIGHT","background","strokeWeight","createLoop","noiseRadius","draw","animLoop","theta","noise1D","pointA","height","pointB","width","pointC","pointD","translate","rotate","stroke","noFill","beginShape","curveVertex","endShape","DURATION","frameCount","noLoop","alert","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-10-07-js-77912c9bb581e4112569.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && true;\nconst DURATION = 360;\n\nconst sketch = function(p) {\n  let th = 0;\n  let phi = 0;\n  const HUE = p.random(50);\n  const HUES = [HUE, HUE + 50];\n  const SCALARS = Array(5)\n    .fill()\n    .map((_, i) => p.floor(p.random(i, i + 3)));\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSL, 100);\n    p.blendMode(p.HARD_LIGHT);\n    p.background(p.random(HUES), 100, 10);\n    p.strokeWeight(2);\n    p.createLoop(DURATION, {\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n    const pointA = polarToCartesian(0, 0, theta * 2, p.height, true);\n    const pointB = polarToCartesian(\n      0,\n      0,\n      -theta * SCALARS[0],\n      (p.width / 2) * noise1D(SCALARS[0] / 100),\n      true\n    );\n    const pointC = polarToCartesian(\n      0,\n      0,\n      theta * SCALARS[1],\n      (p.width / 2) * noise1D(SCALARS[1] / 100),\n      true\n    );\n    const pointD = polarToCartesian(0, 0, -theta * 2, p.width, true);\n    p.translate(p.width / 2, p.height / 2);\n    p.rotate(theta);\n    p.stroke(\n      HUES[p.floor(p.map(p.sin(theta * SCALARS[2]), -1, 1, 0, 2))],\n      100,\n      p.map(p.sin(theta * SCALARS[3]), -1, 1, 50, 100),\n      p.map(p.cos(theta * SCALARS[4]), -1, 1, 10, 0)\n    );\n    p.noFill();\n    p.beginShape();\n    p.curveVertex(...pointA);\n    p.curveVertex(...pointB);\n    p.curveVertex(...pointC);\n    p.curveVertex(...pointD);\n    p.curveVertex(...pointA);\n    p.curveVertex(...pointB);\n    p.curveVertex(...pointC);\n    p.endShape();\n\n    if (p.frameCount === DURATION * 60) {\n      p.noLoop();\n      RENDER && alert(\"done\");\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}