{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/05.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","size","prevPoint","outerAngle","innerAngle","PI","outerSpeed","SPEED","TWO_PI","innerSpeed","setup","createCanvas","background","noFill","strokeWeight","width","draw","thisFocalPoint","polarToCartesian","height","map","thisPoint","apply","concat","noise","frameCount","lerpLine","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_2__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","sin","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","Error","l","random","point","lerp"],"mappings":"iJAKMA,EAAS,SAASC,GACtB,IAEIC,EACAC,EACAC,EAAa,EACbC,EAAaJ,EAAEK,GACfC,EAAaC,KAAcP,EAAEQ,OAC7BC,EAPU,EAOWT,EAAEQ,OAE3BR,EAAEU,MAAQ,WACRV,EAAEW,aAAa,IAAK,KACpBX,EAAEY,WAAW,KACbZ,EAAEa,SACFb,EAAEc,aAAa,IACfb,EAAiB,GAAVD,EAAEe,OAGXf,EAAEgB,KAAO,WACP,IAAMC,EAAiBC,YACrBlB,EAAEe,MAAQ,EACVf,EAAEmB,OAAS,EACXhB,EACAH,EAAEoB,IAAIjB,EAAY,EAAc,EAAXH,EAAEQ,OAAYP,EAAM,IACzC,GAGIoB,EAAYH,IAAgBI,WAAhB,EACbL,EADaM,OAAA,CAEhBnB,GACCD,EAAaH,EAAEQ,OACZR,EAAEoB,IAAIjB,EAAYH,EAAEQ,OAAmB,EAAXR,EAAEQ,OAAYP,EAAM,GAChDD,EAAEoB,IAAIjB,EAAY,EAAGH,EAAEQ,OAAQ,EAAGP,IACpCD,EAAEwB,MAAM,IAAM,IAAMxB,EAAEyB,WAAa,MACrC,KAEEvB,GACFwB,IAAQJ,WAAR,GAAStB,GAATuB,OAAeF,EAAcnB,EAA7B,CAAwCF,EAAEwB,MAAFF,MAAAtB,EAAWiB,MAErDf,EAAYmB,EAEZjB,GAAcK,GADdN,GAAcG,GAEc,EAAXN,EAAEQ,QAAYR,EAAE2B,WAItBC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAclC,OAAQA,EAAQmC,KAAMJ,EAASK,SAAUC,YAAY,wCCpDrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKE,IAAIJ,GAASC,GAa9BH,EAA0B,SAC9BO,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKC,IAAIH,GAASO,EAChCI,EAAIL,EAAUJ,KAAKE,IAAIJ,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBpC,IAzBU,SACvB8B,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASL,EAAOC,GACtCU,EAAId,EAAkBS,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,wCCflB1B,EAAA,WAAS5B,EAAGuD,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChB5D,EAAE+D,SAAWD,GAAK9D,EAAEgE,MAAMhE,EAAEiE,KAAKV,EAAIE,EAAIK,GAAI9D,EAAEiE,KAAKT,EAAIE,EAAII","file":"component---src-pages-sketch-2019-05-05-js-57fd6c004505b39f8107.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport lerpLine from \"~lib/lerpLine\";\n\nconst sketch = function(p) {\n  const SPEED = 1;\n\n  let size;\n  let prevPoint;\n  let outerAngle = 0;\n  let innerAngle = p.PI;\n  let outerSpeed = SPEED / 250 / p.TWO_PI;\n  let innerSpeed = SPEED / p.TWO_PI;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.noFill();\n    p.strokeWeight(0.5);\n    size = p.width * 0.4;\n  };\n\n  p.draw = function() {\n    const thisFocalPoint = polarToCartesian(\n      p.width / 2,\n      p.height / 2,\n      outerAngle,\n      p.map(outerAngle, 0, p.TWO_PI * 2, size, 0),\n      true\n    );\n\n    const thisPoint = polarToCartesian(\n      ...thisFocalPoint,\n      innerAngle,\n      (outerAngle > p.TWO_PI\n        ? p.map(outerAngle, p.TWO_PI, p.TWO_PI * 2, size, 0)\n        : p.map(outerAngle, 0, p.TWO_PI, 0, size)) *\n        p.noise(0.01, 0.02, p.frameCount / 2000),\n      true\n    );\n    if (prevPoint) {\n      lerpLine(p, ...thisPoint, ...prevPoint, p.noise(...thisFocalPoint));\n    }\n    prevPoint = thisPoint;\n    outerAngle += outerSpeed;\n    innerAngle += innerSpeed;\n    if (outerAngle > p.TWO_PI * 2) p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}