{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/10.js"],"names":["sketch","p","myFont","points","colorOffset","random","preload","loadFont","withPrefix","setup","createCanvas","background","colorMode","HSB","blendMode","HARD_LIGHT","strokeWeight","draw","sampleFactor","map","cos","frameCount","concat","textToPoints","width","start","height","x","y","corner","forEach","i","stroke","sin","dist","line","noLoop","location","path","pathname","description"],"mappings":"6FAAA,yDAIMA,EAAS,SAASC,GACtB,IAGIC,EACAC,EAJEC,EAAcH,EAAEI,OAAO,KAM7BJ,EAAEK,QAAU,WACVJ,EAASD,EAAEM,SAASC,qBAAW,oCAGjCP,EAAEQ,MAAQ,WACRR,EAAES,aAAa,IAAK,KACpBT,EAAEU,WAAW,GACbV,EAAEW,UAAUX,EAAEY,IAAK,KACnBZ,EAAEa,UAAUb,EAAEc,YACdd,EAAEe,aAAa,KAGjBf,EAAEgB,KAAO,WACP,IAAMC,EAAejB,EAAEkB,IAAIlB,EAAEmB,IAAInB,EAAEoB,WAAa,MAAO,EAAG,EAAG,EAAG,KA4BhElB,GA1BAA,GADAA,EAAS,IACOmB,OACdpB,EAAOqB,aAAa,QAAStB,EAAEI,OAAOJ,EAAEuB,QArB9B,IAqB8C,IAAK,CAC3DN,iBAEFhB,EAAOqB,aAAa,WAAY,GAxBtB,IAwBiC,IAAK,CAC9CL,iBAEFhB,EAAOqB,aAAa,SAAU,GAAIE,IAAoB,IAAK,CACzDP,iBAEFhB,EAAOqB,aAAa,OAAQ,GAAIE,IAAwB,IAAK,CAC3DP,iBAEFhB,EAAOqB,aAAa,SAAU,GAAIE,IAAwB,IAAK,CAC7DP,iBAEFhB,EAAOqB,aAAa,YAAa,GAAIE,IAAwB,IAAK,CAChEP,iBAEFhB,EAAOqB,aAAa,SAAU,GAAIE,IAAwB,IAAK,CAC7DP,iBAEFhB,EAAOqB,aAAa,QAAStB,EAAEI,OAAOJ,EAAEuB,OAAQvB,EAAEyB,OA1CxC,IA0CwD,IAAK,CACrER,mBAGYC,KAAI,kBAAe,CACjCQ,EADkB,EAAGA,EAErBC,EAFkB,EAAMA,EAGxBC,OAAQ5B,EAAEI,OAAO,CACf,CACEsB,EAAG,EACHC,EAAG,GAEL,CACED,EAAG1B,EAAEuB,MACLI,EAAG,GAEL,CACED,EAAG,EACHC,EAAG3B,EAAEyB,QAEP,CACEC,EAAG1B,EAAEuB,MACLI,EAAG3B,EAAEyB,eAKJI,SAAQ,WAAmBC,GAAO,IAAvBJ,EAAsB,EAAtBA,EAAGC,EAAmB,EAAnBA,EAAmB,EAAhBC,OAClB1B,EAAO4B,EAAI,KACb9B,EAAE+B,OACA/B,EAAEkB,IAAIlB,EAAEgC,KAAKhC,EAAEoB,WAAajB,GAAe,MAAQ,EAAG,EAAG,EAAG,KAC5D,GACAH,EAAEoB,WAAa,EAAI,IAAM,EACzBpB,EAAEkB,IACAlB,EAAEiC,KAAKP,EAAGC,EAAGzB,EAAO4B,EAAI,GAAGJ,EAAGxB,EAAO4B,EAAI,GAAGH,GAC5C,EACA3B,EAAEuB,MACF,IACA,IAIJvB,EAAEkC,KAAKR,EAAGC,EAAGzB,EAAO4B,EAAI,GAAGJ,EAAGxB,EAAO4B,EAAI,GAAGH,OAIhD3B,EAAEoB,WAAa,MAAQpB,EAAEmC,WAId,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcrC,OAAQA,EAAQsC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-05-10-js-a459dabb4aa2c737af28.js","sourcesContent":["import React from \"react\";\nimport { withPrefix } from \"gatsby\";\nimport SketchLayout from \"~components/sketch-layout\";\n\nconst sketch = function(p) {\n  const colorOffset = p.random(1000000);\n  const start = 150;\n  const lineHeight = 100;\n  let myFont;\n  let points;\n\n  p.preload = function() {\n    myFont = p.loadFont(withPrefix(\"/assets/Cousine-BoldItalic.otf\"));\n  };\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(0);\n    p.colorMode(p.HSB, 100);\n    p.blendMode(p.HARD_LIGHT);\n    p.strokeWeight(0.1);\n  };\n\n  p.draw = function() {\n    const sampleFactor = p.map(p.cos(p.frameCount / 100), -1, 1, 0, 0.1);\n    points = [];\n    points = points.concat(\n      myFont.textToPoints(\"—————\", p.random(p.width), -start, 120, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"There is\", 20, start, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"no way\", 20, start + lineHeight, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"out,\", 20, start + lineHeight * 2, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"only a\", 20, start + lineHeight * 3, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"new place\", 20, start + lineHeight * 4, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"to be.\", 20, start + lineHeight * 5, 100, {\n        sampleFactor,\n      }),\n      myFont.textToPoints(\"—————\", p.random(p.width), p.height + start, 120, {\n        sampleFactor,\n      })\n    );\n    points = points.map(({ x, y }) => ({\n      x,\n      y,\n      corner: p.random([\n        {\n          x: 0,\n          y: 0,\n        },\n        {\n          x: p.width,\n          y: 0,\n        },\n        {\n          x: 0,\n          y: p.height,\n        },\n        {\n          x: p.width,\n          y: p.height,\n        },\n      ]),\n    }));\n\n    points.forEach(({ x, y, corner }, i) => {\n      if (points[i + 1]) {\n        p.stroke(\n          p.map(p.sin((p.frameCount + colorOffset) / 1000), -1, 1, 0, 100),\n          50,\n          p.frameCount % 2 ? 100 : 0,\n          p.map(\n            p.dist(x, y, points[i + 1].x, points[i + 1].y),\n            0,\n            p.width,\n            100,\n            0\n          )\n        );\n\n        p.line(x, y, points[i + 1].x, points[i + 1].y);\n      }\n    });\n\n    p.frameCount > 1500 && p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}