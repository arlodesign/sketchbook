{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/11.js","webpack:///./src/lib/addNoise.js"],"names":["sketch","p","w","h","GRID_SIZE","SIZES","HUE","random","BG","color","grid","Doodad","x","y","size","this","tileSize","tile","createGraphics","colorMode","HSB","background","stroke","strokeCap","PROJECT","strokeWeight","noFill","drawSmallTile","drawTile","drawBigTile","drawReallyBigTile","push","translate","rotate","HALF_PI","image","pop","arc","PI","circle","setup","createCanvas","floor","width","height","xx","yy","visited","draw","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description","addNoise","intensity","PTS","console","log","i","fill","noStroke","ellipse","randomGaussian","pixelDensity"],"mappings":"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","file":"component---src-pages-sketch-2019-05-11-js-442bb011cf0279c37fc9.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport addNoise from \"~lib/addNoise\";\n\nconst sketch = function(p) {\n  const GRID_SIZE = 30;\n  const SIZES = [1, 4, 4, 4, 4, 5, 5, 5, 6, 6];\n  const HUE = p.random(100);\n  const BG = p.color(HUE, 75, 100);\n\n  let grid = [];\n  let w;\n  let h;\n\n  class Doodad {\n    constructor(x, y, size) {\n      this.x = x * GRID_SIZE;\n      this.y = y * GRID_SIZE;\n      this.tileSize = size * GRID_SIZE;\n\n      this.tile = p.createGraphics(this.tileSize, this.tileSize);\n      this.tile.colorMode(p.HSB, 100);\n      this.tile.background(BG);\n      this.tile.stroke(100 - HUE, 25, 50);\n      this.tile.strokeCap(p.PROJECT);\n      this.tile.strokeWeight(GRID_SIZE / 5);\n      this.tile.noFill();\n\n      switch (size) {\n        case 1:\n          this.drawSmallTile();\n          break;\n\n        case 4:\n          this.drawTile();\n          break;\n\n        case 5:\n          this.drawTile();\n          this.drawBigTile();\n          break;\n\n        case 6:\n          this.drawTile();\n          this.drawReallyBigTile();\n          break;\n      }\n\n      p.push();\n      p.translate(this.x + this.tileSize / 2, this.y + this.tileSize / 2);\n      p.rotate(p.random([0, p.HALF_PI]));\n      p.image(this.tile, -this.tileSize / 2, -this.tileSize / 2);\n      p.pop();\n    }\n\n    drawSmallTile() {\n      this.tile.arc(0, 0, this.tileSize, this.tileSize, 0, p.HALF_PI);\n      this.tile.arc(\n        this.tileSize,\n        this.tileSize,\n        this.tileSize,\n        this.tileSize,\n        p.PI,\n        p.HALF_PI + p.PI\n      );\n    }\n\n    drawTile() {\n      this.tile.circle(0, 0, GRID_SIZE / 2);\n      this.tile.circle(0, this.tileSize, GRID_SIZE / 2);\n      this.tile.circle(this.tileSize, 0, GRID_SIZE / 2);\n      this.tile.circle(this.tileSize, this.tileSize, GRID_SIZE / 2);\n      this.tile.circle(0, 0, GRID_SIZE * 1.5);\n      this.tile.circle(0, this.tileSize, GRID_SIZE * 1.5);\n      this.tile.circle(this.tileSize, 0, GRID_SIZE * 1.5);\n      this.tile.circle(this.tileSize, this.tileSize, GRID_SIZE * 1.5);\n      this.tile.circle(this.tileSize / 2, this.tileSize / 2, GRID_SIZE / 2);\n    }\n\n    drawBigTile() {\n      this.tile.circle(0, 0, this.tileSize / 2);\n      this.tile.circle(this.tileSize, this.tileSize, this.tileSize / 2);\n    }\n\n    drawReallyBigTile() {\n      this.tile.circle(0, 0, GRID_SIZE * 2.5);\n      this.tile.circle(this.tileSize, this.tileSize, GRID_SIZE * 2.5);\n      this.tile.circle(0, this.tileSize, GRID_SIZE * 2.5);\n      this.tile.circle(this.tileSize, 0, GRID_SIZE * 2.5);\n    }\n  }\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(BG);\n\n    w = p.floor(p.width / GRID_SIZE);\n    h = p.floor(p.height / GRID_SIZE);\n\n    for (let xx = 0; xx < w; xx++) {\n      grid.push([]);\n      for (let yy = 0; yy < h; yy++) {\n        grid[xx].push({\n          x: xx,\n          y: yy,\n          visited: false,\n        });\n      }\n    }\n  };\n\n  p.draw = function() {\n    const { x, y } = p.random(\n      [].concat(...grid).filter(({ visited }) => !visited)\n    );\n\n    if (!grid[x][y].visited) {\n      let size = Math.max(...SIZES);\n      let overlap;\n\n      do {\n        overlap = false;\n        for (let xx = x; xx < size + x; xx++) {\n          for (let yy = y; yy < size + y; yy++) {\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\n              overlap = true;\n            }\n          }\n        }\n        if (overlap) {\n          size = Math.max(...SIZES.filter(s => s < size));\n        }\n      } while (overlap);\n\n      new Doodad(x, y, size);\n\n      for (let xx = x; xx < size + x; xx++) {\n        for (let yy = y; yy < size + y; yy++) {\n          grid[xx][yy].visited = true;\n        }\n      }\n    }\n\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  console.log(PTS);\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n"],"sourceRoot":""}