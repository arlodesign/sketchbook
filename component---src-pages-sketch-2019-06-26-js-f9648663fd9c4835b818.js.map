{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/26.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","angle","alpha","setup","createCanvas","colorMode","HSB","background","noFill","blendMode","SCREEN","draw","NOISE","noise","frameCount","stroke","map","tan","i","push","translate","polarToCartesian","width","height","TWO_PI","circle","pop","noLoop","min","SketchPage","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","Math","cos","y","sin","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"2jBAKA,IAAMA,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IAEjBC,EAAQ,EACRC,EAAQ,EAEZJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,KACnBR,EAAES,WAAWR,EAAK,GAAI,GACtBD,EAAEU,SACFV,EAAEW,UAAUX,EAAEY,SAGhBZ,EAAEa,KAAO,WACP,IAAMC,EAAQd,EAAEe,MAAMf,EAAEgB,WAAa,IAAKb,GAC1CH,EAAEiB,OAAOjB,EAAEkB,IAAIlB,EAAEmB,IAAIhB,IAAS,EAAG,EAAGF,EAAKA,EAAM,IAAK,GAAI,GAAIG,GAE5D,IAAK,IAAIgB,EAAI,EAAGA,EAlBH,EAkBeA,IAC1BpB,EAAEqB,OACFrB,EAAEsB,UAAF,MAAAtB,EAAC,EACIuB,YACDvB,EAAEwB,MAAQ,EACVxB,EAAEyB,OAAS,EACXtB,EAASiB,EAAIpB,EAAE0B,OAxBR,EAyBN1B,EAAEyB,OAAS,EAAKX,GACjB,KAGJd,EAAE2B,OAAO,EAAG,EAAG3B,EAAEkB,IAAIJ,EAAO,EAAG,EAAG,IAAK,IACvCd,EAAE4B,OAGJzB,GAAS,MAEc,EAAXH,EAAE0B,QACZtB,GAAS,KACD,GAAKJ,EAAE6B,SAEfzB,EAAQJ,EAAE8B,IAAI1B,EAAQ,IAAM,KAWnB2B,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQhC,OAAQA,O,kCCpDpB,sCAiBMiC,EAA0B,SAC9BC,EACAC,EACA/B,EACAgC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUM,KAAKC,IAAIrC,GAASgC,EAChCM,EAAIP,EAAUK,KAAKG,IAAIvC,GAASiC,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBlB,IAzBU,SACvBU,EACAC,EACA/B,EACAwC,EACAN,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACM,EAAQzC,EAAOwC,GACxC,OAAOC,EAASL,KAAKC,IAAIrC,GAASwC,EAYxBE,CAAkBZ,EAAS9B,EAAOwC,GACtCF,EAXkB,SAACG,EAAQzC,EAAOwC,GACxC,OAAOC,EAASL,KAAKG,IAAIvC,GAASwC,EAUxBG,CAAkBZ,EAAS/B,EAAOwC,GAC5C,OAAON,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG","file":"component---src-pages-sketch-2019-06-26-js-f9648663fd9c4835b818.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const LEAVES = 4;\n  const HUE = p.random(90);\n\n  let angle = 0;\n  let alpha = 0;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 100);\n    p.background(HUE, 80, 5);\n    p.noFill();\n    p.blendMode(p.SCREEN);\n  };\n\n  p.draw = function() {\n    const NOISE = p.noise(p.frameCount / 400, angle);\n    p.stroke(p.map(p.tan(angle), -1, 1, HUE, HUE + 10), 80, 75, alpha);\n\n    for (let i = 0; i < LEAVES; i++) {\n      p.push();\n      p.translate(\n        ...polarToCartesian(\n          p.width / 2,\n          p.height / 2,\n          angle + (i * p.TWO_PI) / LEAVES,\n          (p.height / 2) * NOISE,\n          true\n        )\n      );\n      p.circle(0, 0, p.map(NOISE, 0, 1, 200, 0));\n      p.pop();\n    }\n\n    angle += 0.005;\n\n    if (angle > p.TWO_PI * 3) {\n      alpha -= 0.01;\n      alpha < 0 && p.noLoop();\n    } else {\n      alpha = p.min(alpha + 0.01, 5);\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}