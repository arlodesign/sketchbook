{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/12/30.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","maskImage","bg","fg","RENDER","getURLParams","render","HUE","random","setup","pixelDensity","frameRate","createCanvas","createLoop","gif","open","noiseRadius","colorMode","HSL","color","createGraphics","width","height","fill","triangle","TWO_PI","draw","background","flameImage","noise1D","animLoop","d","r","map","l","x1","lerpColor","noStroke","rect","flames","get","mask","translate","i","push","scale","rotate","image","pop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-12-30-js-be8cb121b6a663e0b425.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const PETAL_COUNT = 24;\n  const HUE = p.random();\n\n  let maskImage;\n  let bg;\n  let fg;\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.createLoop(20, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n    p.colorMode(p.HSL, 1);\n\n    bg = p.color(HUE, 0.4, 0.9);\n    fg = p.color(HUE, 0.8, 0.5);\n\n    maskImage = p.createGraphics(p.width, p.height);\n    maskImage.fill(0);\n    maskImage.triangle(\n      p.width / 2,\n      p.height / 2,\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        -(p.TWO_PI / PETAL_COUNT) / 2,\n        ((1 / p.cos(-(p.TWO_PI / PETAL_COUNT) / 2)) * p.width) / 2,\n        true\n      ),\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        p.TWO_PI / PETAL_COUNT / 2,\n        ((1 / p.cos(p.TWO_PI / PETAL_COUNT / 2)) * p.width) / 2,\n        true\n      )\n    );\n  };\n\n  p.draw = function() {\n    p.background(bg);\n\n    const flameImage = p.createGraphics(p.width, p.height);\n    flameImage.colorMode(p.HSL, 1);\n\n    for (let y = p.height / 5; y < p.height - p.height / 5; y++) {\n      const { noise1D } = p.animLoop;\n      const d = p.width / 2;\n      const r = p.map(noise1D(y / 10), -1, 1, 0.01, 1);\n\n      for (let l = 0; l < 1; l += r) {\n        const x1 = p.width / 2 + d * l;\n        flameImage.fill(p.lerpColor(fg, p.color(HUE, 1, 0.1, 0), l));\n        flameImage.noStroke();\n        flameImage.rect(x1, y, -d * r, 1);\n      }\n    }\n    const flames = flameImage.get();\n    flames.mask(maskImage);\n    p.translate(p.width / 2, p.height / 2);\n    for (let i = 0; i < PETAL_COUNT; i++) {\n      p.push();\n      p.scale(i % 2 ? 1 : -1, 1);\n      p.rotate((p.TWO_PI / PETAL_COUNT) * i);\n      p.image(flames, -p.width / 2, -p.height / 2);\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}