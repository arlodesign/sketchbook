{"version":3,"sources":["webpack:///./src/pages/sketch/2019/10/11.js"],"names":["RENDER","process","DEV","sketch","p","amplitude","curves","xPeriod","yPeriod","color","rotationDir","setup","createCanvas","createLoop","gif","render","open","noiseRadius","noFill","strokeWeight","width","draw","animLoop","theta","noise1D","blendMode","BLEND","background","SCREEN","translate","height","forEach","i","push","rotate","stroke","beginShape","th","TWO_PI","x","sin","y","curveVertex","endShape","pop","location","path","pathname","description"],"mappings":"6FAAA,yDAIMA,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtB,IAqBIC,EArBEC,EAAS,CACb,CACEC,QAAS,EACTC,QAAS,EACTC,MAAO,MACPC,aAAc,GAEhB,CACEH,QAAS,EACTC,QAAS,EACTC,MAAO,QACPC,YAAa,GAEf,CACEH,QAAS,EACTC,QAAS,EACTC,MAAO,OACPC,YAAa,IAMjBN,EAAEO,MAAQ,WACRP,EAAEQ,aAAa,IAAK,KACpBR,EAAES,WAAW,GAAI,CACfC,MAAKd,GAAS,CAAEe,QAAQ,EAAOC,MAAM,GACrCC,YAAa,KAEfb,EAAEc,SACFd,EAAEe,aAAa,IAEfd,EAAYD,EAAEgB,MAAQ,EAAI,IAG5BhB,EAAEiB,KAAO,WAAY,IAAD,EACSjB,EAAEkB,SAArBC,EADU,EACVA,MADU,EACHC,QAEfpB,EAAEqB,UAAUrB,EAAEsB,OACdtB,EAAEuB,WAAW,GACbvB,EAAEqB,UAAUrB,EAAEwB,QAEdxB,EAAEyB,UAAUzB,EAAEgB,MAAQ,EAAGhB,EAAE0B,OAAS,GAEpCxB,EAAOyB,SAAQ,WAA2CC,GAAO,IAA/CzB,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,YACzCN,EAAE6B,OACF7B,EAAE8B,OAAOX,EAAQb,GACjBN,EAAE+B,OAAO1B,GACTL,EAAEgC,aACF,IAAK,IAAIC,GAAM,IAAMA,EAAKjC,EAAEkC,OAAS,IAAMD,GAAM,IAAM,CACrD,IAAIE,EAAIlC,EAAYD,EAAEoC,IAAIjC,EAAU8B,GAChCI,EAAIpC,EAAYD,EAAEoC,IAAIhC,EAAU6B,EAAa,EAARd,GACzCnB,EAAEsC,YAAYH,EAAGE,GAEnBrC,EAAEuC,WACFvC,EAAEwC,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc1C,OAAQA,EAAQ2C,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-10-11-js-eb587dee9f38d982a01c.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const curves = [\n    {\n      xPeriod: 3,\n      yPeriod: 4,\n      color: \"red\",\n      rotationDir: -1,\n    },\n    {\n      xPeriod: 3,\n      yPeriod: 2,\n      color: \"green\",\n      rotationDir: 0,\n    },\n    {\n      xPeriod: 5,\n      yPeriod: 4,\n      color: \"blue\",\n      rotationDir: 1,\n    },\n  ];\n\n  let amplitude;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.createLoop(49, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.1,\n    });\n    p.noFill();\n    p.strokeWeight(30);\n\n    amplitude = p.width / 2 - 50;\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n\n    p.blendMode(p.BLEND);\n    p.background(0);\n    p.blendMode(p.SCREEN);\n\n    p.translate(p.width / 2, p.height / 2);\n\n    curves.forEach(({ xPeriod, yPeriod, color, rotationDir }, i) => {\n      p.push();\n      p.rotate(theta * rotationDir);\n      p.stroke(color);\n      p.beginShape();\n      for (let th = -0.02; th < p.TWO_PI + 0.04; th += 0.02) {\n        let x = amplitude * p.sin(xPeriod * th);\n        let y = amplitude * p.sin(yPeriod * th + theta * 3);\n        p.curveVertex(x, y);\n      }\n      p.endShape();\n      p.pop();\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n/*\nTrigonometricInputs inputs;\nvoid setup() {\nsize(300, 300);\nbackground(155);\nframeRate(15);\n}\nvoid drawCurve(float xAmplitude, float yAmplitude, float xPeriod, float yPeriod, float phaseShift){\nfor (float theta = 0; theta < TWO_PI; theta += 0.01){\nfloat x = xAmplitude * sin(xPeriod * theta);\nfloat y = yAmplitude * sin(yPeriod * theta + phaseShift);\nellipse(x, y, 5, 5);\n}\n}\nfloat phaseShift = 0;\nvoid draw() {\nbackground(155);\ntranslate(150,150);\nfloat xPeriod = 3;\nfloat yPeriod = 5;\nfloat xAmplitude = 100;\nfloat yAmplitude = 100;\nif (this.inputs != null){\nxPeriod = this.inputs.getXPeriod();\nyPeriod = this.inputs.getYPeriod();\nxAmplitude = this.inputs.getXAmplitude();\nyAmplitude = this.inputs.getYAmplitude();\n}\nphaseShift += .01;\nadjustColors(phaseShift);\ndrawCurve(xAmplitude, yAmplitude, xPeriod, yPeriod, phaseShift);\n}\nvoid adjustColors(float r){\nstroke(sin(r) * 128 + 128, 50, sin(r * PI/2)*128 + 128, 200);\n}\nvoid bindInputsJS(TrigonometricInputs inputs){\nthis.inputs = inputs;\n}\n*/\n"],"sourceRoot":""}