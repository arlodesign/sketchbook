{"version":3,"sources":["webpack:///./src/pages/sketch/2019/12/03.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","RENDER","getURLParams","render","setup","pixelDensity","frameRate","createCanvas","stroke","fill","createLoop","gif","open","noiseRadius","draw","animLoop","theta","noise1D","background","translate","width","height","a","TWO_PI","push","blendMode","DIFFERENCE","rotate","beginShape","curveVertex","polarToCartesian","sin","cos","endShape","pop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"w+BAKA,IAAMA,EAAS,SAASC,GACtB,IAAMC,EAASD,EAAEE,eAAeC,OAEhCH,EAAEI,MAAQ,WACJH,IACFD,EAAEK,aAAa,GACfL,EAAEM,UAAU,KAGdN,EAAEO,aAAa,IAAK,KACpBP,EAAEQ,OAAO,KACTR,EAAES,KAAK,KAEPT,EAAEU,WAAW,GAAI,CACfC,MAAKV,GAAS,CAAEE,QAAQ,EAAOS,MAAM,GACrCC,YAAa,MAIjBb,EAAEc,KAAO,WAAY,IAAD,EACSd,EAAEe,SAArBC,EADU,EACVA,MAAOC,EADG,EACHA,QACfjB,EAAEkB,WAAW,GACblB,EAAEmB,UAAUnB,EAAEoB,MAAQ,EAAGpB,EAAEqB,OAAS,GAEpC,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAAEuB,OAAQD,GAAKtB,EAAEuB,OAAS,EAC5CvB,EAAEwB,OACFxB,EAAEyB,UAAUzB,EAAE0B,YACd1B,EAAE2B,OAAOL,GAETtB,EAAE4B,aACF5B,EAAE6B,YAAF,MAAA7B,EAAC,EACI8B,YACD,EACA,EACA9B,EAAEuB,OAASN,EAAQ,GAClBjB,EAAEoB,MAAQ,EAAKpB,EAAE+B,IAAIf,IACtB,KAGJhB,EAAE6B,YAAF,MAAA7B,EAAC,EACI8B,YACD,EACA,EACA9B,EAAEuB,OAASN,EAAQ,GAClBjB,EAAEoB,MAAQ,EAAKpB,EAAEgC,IAAIhB,IACtB,KAGJhB,EAAE6B,YAAF,MAAA7B,EAAC,EACI8B,YACD,EACA,EACA9B,EAAEuB,OAASN,EAAQ,GAClBjB,EAAEoB,MAAQ,EAAKpB,EAAE+B,KAAKf,IACvB,KAGJhB,EAAE6B,YAAF,MAAA7B,EAAC,EACI8B,YACD,EACA,EACA9B,EAAEuB,OAASN,EAAQ,GAClBjB,EAAEoB,MAAQ,EAAKpB,EAAEgC,KAAKhB,IACvB,KAGJhB,EAAE6B,YAAF,MAAA7B,EAAC,EACI8B,YACD,EACA,EACA9B,EAAEuB,OAASN,EAAQ,GAClBjB,EAAEoB,MAAQ,EAAKpB,EAAE+B,IAAIf,IACtB,KAGJhB,EAAE6B,YAAF,MAAA7B,EAAC,EACI8B,YACD,EACA,EACA9B,EAAEuB,OAASN,EAAQ,GAClBjB,EAAEoB,MAAQ,EAAKpB,EAAEgC,IAAIhB,IACtB,KAGJhB,EAAE6B,YAAF,MAAA7B,EAAC,EACI8B,YACD,EACA,EACA9B,EAAEuB,OAASN,EAAQ,GAClBjB,EAAEoB,MAAQ,EAAKpB,EAAE+B,KAAKf,IACvB,KAIJhB,EAAEiC,WACFjC,EAAEkC,QAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcpC,OAAQA,EAAQqC,KAAMD,EAASE,SAAUC,YAAY,O,kCC1GrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKX,IAAIS,GAASC,GAE9BE,EAAoB,SAACJ,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKZ,IAAIU,GAASC,GAsB9BG,EAA0B,SAC9BC,EACAC,EACAN,EACAO,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUH,KAAKX,IAAIS,GAASO,EAChCI,EAAIL,EAAUJ,KAAKZ,IAAIU,GAASQ,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBtB,IAzBU,SACvBgB,EACAC,EACAN,EACAC,EACAQ,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASL,EAAOC,GACtCU,EAAIR,EAAkBG,EAASN,EAAOC,GAC5C,OAAOQ,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-12-03-js-403f89f42566f6c204f3.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.stroke(255);\n    p.fill(255);\n\n    p.createLoop(40, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.2,\n    });\n  };\n\n  p.draw = function() {\n    const { theta, noise1D } = p.animLoop;\n    p.background(0);\n    p.translate(p.width / 2, p.height / 2);\n\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 7) {\n      p.push();\n      p.blendMode(p.DIFFERENCE);\n      p.rotate(a);\n\n      p.beginShape();\n      p.curveVertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * noise1D(5),\n          (p.width / 2) * p.sin(theta),\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * noise1D(7),\n          (p.width / 2) * p.cos(theta),\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * noise1D(9),\n          (p.width / 2) * p.sin(-theta),\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * noise1D(1),\n          (p.width / 2) * p.cos(-theta),\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * noise1D(5),\n          (p.width / 2) * p.sin(theta),\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * noise1D(7),\n          (p.width / 2) * p.cos(theta),\n          true\n        )\n      );\n      p.curveVertex(\n        ...polarToCartesian(\n          0,\n          0,\n          p.TWO_PI * noise1D(9),\n          (p.width / 2) * p.sin(-theta),\n          true\n        )\n      );\n\n      p.endShape();\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}