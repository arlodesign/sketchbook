{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/12.js"],"names":["polarToCartesianEllipse","centerX","centerY","angle","radiusX","radiusY","asArray","x","Math","cos","y","sin","polarToCartesian","distance","center","polarToCartesianX","polarToCartesianY","RENDER","process","DEV","sketch","p","points","setup","pixelDensity","frameRate","createCanvas","colorMode","HSB","noStroke","Array","from","a","random","TWO_PI","d","width","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","HARD_LIGHT","fill","map","push","translate","height","rotate","animLoop","theta","beginShape","forEach","curveVertex","noise1D","endShape","CLOSE","pop","SketchPage"],"mappings":"4FAAA,sCAiBMA,EAA0B,SAC9BC,EACAC,EACAC,EACAC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIN,EAAUO,KAAKC,IAAIN,GAASC,EAChCM,EAAIR,EAAUM,KAAKG,IAAIR,GAASE,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBE,IAzBU,SACvBX,EACAC,EACAC,EACAU,EACAP,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACO,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKC,IAAIN,GAASU,EAYxBE,CAAkBd,EAASE,EAAOU,GACtCH,EAXkB,SAACI,EAAQX,EAAOU,GACxC,OAAOC,EAASN,KAAKG,IAAIR,GAASU,EAUxBG,CAAkBd,EAASC,EAAOU,GAC5C,OAAOP,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,O,qhBCTjC,IAAMO,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtB,IAEIC,EAAS,GAEbD,EAAEE,MAAQ,WACJN,IACFI,EAAEG,aAAa,GACfH,EAAEI,UAAU,KAGdJ,EAAEK,aAAa,IAAK,KACpBL,EAAEM,UAAUN,EAAEO,IAAK,GAEnBP,EAAEQ,WAEFP,EAASQ,MAAMC,KAAKD,MAAM,IAAI,iBAAO,CACnCE,EAAGX,EAAEY,OAAOZ,EAAEa,QACdC,EAAGd,EAAEY,OAAOZ,EAAEe,MAAQ,EAAa,IAAVf,EAAEe,WAG7Bf,EAAEgB,WAAW,GAAI,CACfC,MAAKrB,GAAS,CAAEsB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,KAIjBpB,EAAEqB,KAAO,WACPrB,EAAEsB,UAAUtB,EAAEuB,OACdvB,EAAEwB,WAAW,IACbxB,EAAEsB,UAAUtB,EAAEyB,YAEd,IALkB,eAKT3C,GACPkB,EAAE0B,KAAK1B,EAAE2B,IAAI3B,EAAEV,IAAIR,IAAS,EAAG,EAAG,EAAG,EAhC3B,GAgCiD,EAAG,IAC9DkB,EAAE4B,OACF5B,EAAE6B,UAAU7B,EAAEe,MAAQ,EAAGf,EAAE8B,OAAS,GACpC9B,EAAE+B,OAAO/B,EAAEgC,SAASC,OACpBjC,EAAEkC,aACFjC,EAAOkC,SAAQ,YAAe,IAAZxB,EAAW,EAAXA,EAAGG,EAAQ,EAARA,EACnBd,EAAEoC,YAAF,MAAApC,EAAC,EACIT,YACD,EACA,EACAoB,EAAI7B,EAAQkB,EAAE2B,IAAI3B,EAAEgC,SAASK,QAAQ1B,IAAK,EAAG,EAAG,EAAG,GACnDG,EAAId,EAAE2B,IAAI3B,EAAEgC,SAASK,QAAQvB,IAAK,EAAG,EAAG,IAAM,IAC9C,QAINd,EAAEsC,SAAStC,EAAEuC,OACbvC,EAAEwC,OAlBK1D,EAAQ,EAAGA,EAAQkB,EAAEa,OAAQ/B,GAASkB,EAAEa,OA/BrC,EA+BsD,EAAzD/B,KA6BE2D,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ1C,OAAQA","file":"component---src-pages-sketch-2019-07-12-js-cb1080a1505ff9eff7ef.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const STEPS = 6;\n\n  let points = [];\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n\n    p.noStroke();\n\n    points = Array.from(Array(4), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.width / 4, p.width * 0.45),\n    }));\n\n    p.createLoop(20, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0.8);\n    p.blendMode(p.HARD_LIGHT);\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      p.fill(p.map(p.sin(angle), -1, 1, 0, (STEPS - 1) / STEPS), 1, 0.5);\n      p.push();\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(p.animLoop.theta);\n      p.beginShape();\n      points.forEach(({ a, d }) => {\n        p.curveVertex(\n          ...polarToCartesian(\n            0,\n            0,\n            a + angle + p.map(p.animLoop.noise1D(a), -1, 1, 1, 2),\n            d * p.map(p.animLoop.noise1D(d), -1, 1, 0.75, 1),\n            true\n          )\n        );\n      });\n      p.endShape(p.CLOSE);\n      p.pop();\n    }\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n"],"sourceRoot":""}