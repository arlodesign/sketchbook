{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/14.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","distance","HUE","random","theta","center","setup","createCanvas","width","height","dist","apply","concat","colorMode","HSB","background","draw","strokeWeight","stroke","map","sin","lerpLine","polarToCartesian","noise","frameCount","TWO_PI","noLoop","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_3__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","angle","Math","cos","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","Error","l","point","lerp"],"mappings":"wJAMMA,EAAS,SAASC,GACtB,IACIC,EADEC,EAAMF,EAAEG,OAAO,IAEjBC,EAAQ,EACRC,EAAS,GAEbL,EAAEM,MAAQ,WACRN,EAAEO,aAAa,IAAK,KACpBF,EAAS,CAACL,EAAEQ,MAAQ,EAAGR,EAAES,OAAS,GAClCR,EAAWD,EAAEU,KAAFC,MAAAX,EAAUK,EAATO,OAAA,CAAiBZ,EAAEQ,MAAOR,EAAES,UACxCT,EAAEa,UAAUb,EAAEc,IAAK,KACnBd,EAAEe,WAAWb,EAAK,GAAI,KAGxBF,EAAEgB,KAAO,WACPhB,EAAEiB,aAAa,GACfjB,EAAEkB,OAAOlB,EAAEmB,IAAInB,EAAEoB,IAAIhB,IAAS,EAAG,EAAGF,EAAM,GAAIA,GAAM,GAAI,IACxDmB,IAAQV,WAAR,GACEX,GADFY,OAEKP,EACAiB,IAAgBX,WAAhB,EAAoBN,EAApBO,OAAA,CAA4BR,EAAOH,EAAW,GAAG,KAHtD,CAIED,EAAEuB,MAAMvB,EAAEwB,WAAa,GAAIvB,EAAUG,GAAS,IAC9C,KAEFJ,EAAEkB,OAAOlB,EAAEmB,IAAInB,EAAEoB,IAAIhB,IAAS,EAAG,EAAGF,EAAKA,EAAM,IAAK,GAAI,IACxDmB,IAAQV,WAAR,GACEX,GADFY,OAEKP,EACAiB,IAAgBX,WAAhB,EAAoBN,EAApBO,OAAA,CAA4BR,EAAOH,GAAU,KAHlD,CAIED,EAAEuB,MAAMvB,EAAEwB,WAAa,GAAIvB,EAAUG,GAAS,IAC9C,MAGFA,GAASJ,EAAEyB,OAAS,KACRzB,EAAEyB,QACZzB,EAAE0B,WAKOC,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAcjC,OAAQA,EAAQkC,KAAMJ,EAASK,SAAUC,YAAY,wCC/CrEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACjC,EAAQoC,EAAOxC,GACxC,OAAOI,EAASqC,KAAKC,IAAIF,GAASxC,GAE9BsC,EAAoB,SAAClC,EAAQoC,EAAOxC,GACxC,OAAOI,EAASqC,KAAKtB,IAAIqB,GAASxC,GAa9BuC,EAA0B,SAC9BI,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUF,KAAKC,IAAIF,GAASK,EAChCI,EAAIL,EAAUH,KAAKtB,IAAIqB,GAASM,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB5B,IAzBU,SACvBsB,EACAC,EACAJ,EACAxC,EACA+C,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIX,EAAkBM,EAASH,EAAOxC,GACtCiD,EAAIX,EAAkBM,EAASJ,EAAOxC,GAC5C,OAAO+C,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,wCCflBvB,EAAA,WAAS3B,EAAGmD,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,GAC/C,QADoE,IAArBA,OAAe,GAC1DD,GAAQ,EACV,MAAM,IAAIE,MAAM,iDAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYF,IAChBxD,EAAEG,SAAWuD,GAAK1D,EAAE2D,MAAM3D,EAAE4D,KAAKT,EAAIE,EAAIK,GAAI1D,EAAE4D,KAAKR,EAAIE,EAAII","file":"component---src-pages-sketch-2019-05-14-js-8e43509041302f37472c.js","sourcesContent":["import React from \"react\";\nimport { withPrefix } from \"gatsby\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport lerpLine from \"~lib/lerpLine\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const HUE = p.random(50);\n  let distance;\n  let theta = 0;\n  let center = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    center = [p.width / 3, p.height / 3];\n    distance = p.dist(...center, p.width, p.height);\n    p.colorMode(p.HSB, 100);\n    p.background(HUE, 10, 40);\n  };\n\n  p.draw = function() {\n    p.strokeWeight(2);\n    p.stroke(p.map(p.sin(theta), -1, 1, HUE + 50, HUE), 30, 80);\n    lerpLine(\n      p,\n      ...center,\n      ...polarToCartesian(...center, theta, distance / 2, true),\n      p.noise(p.frameCount / 50, distance, theta) / 20,\n      false\n    );\n    p.stroke(p.map(p.sin(theta), -1, 1, HUE, HUE + 50), 50, 80);\n    lerpLine(\n      p,\n      ...center,\n      ...polarToCartesian(...center, theta, distance, true),\n      p.noise(p.frameCount / 10, distance, theta) / 10,\n      false\n    );\n\n    theta += p.TWO_PI / 2000;\n    if (theta > p.TWO_PI) {\n      p.noLoop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function(p, x1, y1, x2, y2, rate, showFirstDot = true) {\n  if (rate <= 0)\n    throw new Error(\"rate for lerpLine() must be greater than zero\");\n\n  for (let l = 0; l < 1; l += rate) {\n    if (l === 0 && !showFirstDot) continue;\n    p.random() > l && p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n  }\n}\n"],"sourceRoot":""}