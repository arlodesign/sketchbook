{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/08.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","Doodad","x","y","this","freq","TWO_PI","floor","random","drawFunc","pinwheel","horizontalLines","verticalLines","spiralClockwise","spiralCounterclockwise","draw","push","translate","pop","strokeWeight","r","line","polarToCartesian","GRID","start","end","offset","noStroke","fill","circle","map","doodads","setup","createCanvas","width","height","background","forEach","d","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-04-08-js-8248a32a4cb903373f97.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const GRID = 60;\n  const MARGIN = 5;\n\n  class Doodad {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n      this.freq = p.TWO_PI / (p.floor(p.random(10, 15)) * 2);\n      this.drawFunc = p.random([\n        this.pinwheel,\n        this.horizontalLines,\n        this.verticalLines,\n        this.spiralClockwise,\n        this.spiralCounterclockwise,\n      ]);\n    }\n    draw() {\n      p.push();\n      p.translate(this.x, this.y);\n      this.drawFunc();\n      p.pop();\n    }\n    pinwheel() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        p.line(\n          ...polarToCartesian(0, 0, r, (GRID / 2 - MARGIN) / 3, true),\n          ...polarToCartesian(0, 0, r, GRID / 2 - MARGIN, true)\n        );\n      }\n    }\n    horizontalLines() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        const start = polarToCartesian(0, 0, r, GRID / 2 - (MARGIN + 2), true);\n        const end = [-start[0], start[1]];\n        p.line(...start, ...end);\n      }\n    }\n    verticalLines() {\n      p.strokeWeight(2);\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\n        const start = polarToCartesian(0, 0, r, GRID / 2 - (MARGIN + 2), true);\n        const end = [start[0], -start[1]];\n        p.line(...start, ...end);\n      }\n    }\n    spiralClockwise() {\n      const offset = p.random(p.TWO_PI);\n      p.noStroke();\n      p.fill(0);\n      for (let r = 0; r < p.TWO_PI * 2; r += this.freq) {\n        p.circle(\n          ...polarToCartesian(\n            0,\n            0,\n            r + offset,\n            p.map(r, 0, p.TWO_PI * 2, 0, GRID / 2 - MARGIN),\n            true\n          ),\n          2\n        );\n      }\n    }\n    spiralCounterclockwise() {\n      const offset = p.random(p.TWO_PI);\n      p.noStroke();\n      p.fill(0);\n      for (let r = p.TWO_PI; r > -p.TWO_PI; r -= this.freq) {\n        p.circle(\n          ...polarToCartesian(\n            0,\n            0,\n            r + offset,\n            p.map(r, p.TWO_PI, -p.TWO_PI, 0, GRID / 2 - MARGIN),\n            true\n          ),\n          2\n        );\n      }\n    }\n  }\n\n  let doodads = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    for (let x = GRID / 2; x < p.width; x += GRID) {\n      for (let y = GRID / 2; y < p.height; y += GRID) {\n        doodads.push(new Doodad(x, y));\n      }\n    }\n  };\n\n  p.draw = function() {\n    p.background(255);\n    doodads.forEach(d => d.draw());\n    p.noLoop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}