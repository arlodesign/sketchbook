{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2020/01/29.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","size","texture","cam","RENDER","getURLParams","render","setup","pixelDensity","frameRate","createCanvas","WEBGL","createLoop","gif","open","noiseRadius","noStroke","width","createGraphics","createCamera","draw","animLoop","theta","noise","background","strokeCap","PROJECT","strokeWeight","line","setPosition","height","lookAt","twist","PI","i","SLICES","map","push","translate","rotateY","box","pop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,i6BCnBjC,IAAME,EAAS,SAASC,GACtB,IAKIC,EACAC,EACAC,EAPEC,EAASJ,EAAEK,eAAeC,OAShCN,EAAEO,MAAQ,WACRP,EAAEQ,aAAa,GACfR,EAAES,UATS,IAUXT,EAAEU,aAAa,IAAK,IAAKV,EAAEW,OAC3BX,EAAEY,WAZa,GAYQ,CACrBC,MAAKT,GAAS,CAAEE,QAAQ,EAAOQ,MAAM,GACrCC,YAAa,KAEff,EAAEgB,WAEFf,EAAOD,EAAEiB,MAAQ,EACjBf,EAAUF,EAAEkB,eAAejB,EAAMA,EAjBpB,KAkBbE,EAAMH,EAAEmB,gBAGVnB,EAAEoB,KAAO,WAAY,IAAD,IACOpB,EAAEqB,SAAnBC,EADU,EACVA,MAAOC,EADG,EACHA,MAEfrB,EAAQsB,WAAW,KAEnB,IAAK,IAAI5B,EAAI,EAAGA,EAAW,EAAPK,EAAUL,GAAK,GACjCM,EAAQuB,UAAUzB,EAAE0B,SACpBxB,EAAQyB,aAAa,IACrBzB,EAAQ0B,KAAKhC,EAAG,EAAG,EAAGA,GAGxBI,EAAEE,QAAQA,GAEVF,EAAEwB,WAAW,MAEb,EAAArB,GAAI0B,YAAJ,UACK/B,YAAiB,EAAG,EAAGwB,EAAOtB,EAAEiB,OAAO,IAD5C,QAEEjB,EAAE8B,OAAS,KAEb3B,EAAI4B,OAAO,EAAG,EAAG,GAIjB,IAFA,IAAMC,EAAQhC,EAAEiC,GAAKV,IAEZW,GAAI,GAAaA,EAAIC,GAAYD,IAAK,CAC7C,IAAIrC,EAAIG,EAAEoC,IAAIF,GAAG,GAAaC,IAAalC,EAAO,EAAGA,EAAO,GAC5DD,EAAEqC,OACFrC,EAAEsC,UAAU,EAAGzC,EAAG,GAClBG,EAAEuC,QAAQvC,EAAEoC,IAAIF,GAAG,GAAaC,IAAaH,EAAOA,IACpDhC,EAAEwC,IAAIvC,EAAMA,EAjDD,IAiDgBA,GAE3BD,EAAEyC,SAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc3C,OAAQA,EAAQ4C,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-01-29-js-69e1297661e8f6cf28e0.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 20;\n  const RATE = 30;\n  const SLICES = 100;\n\n  let size;\n  let texture;\n  let cam;\n\n  p.setup = function() {\n    p.pixelDensity(2);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840, p.WEBGL);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.8,\n    });\n    p.noStroke();\n\n    size = p.width / 2;\n    texture = p.createGraphics(size, size / SLICES);\n    cam = p.createCamera();\n  };\n\n  p.draw = function() {\n    const { theta, noise } = p.animLoop;\n\n    texture.background(255);\n\n    for (let x = 0; x < size * 2; x += 30) {\n      texture.strokeCap(p.PROJECT);\n      texture.strokeWeight(10);\n      texture.line(x, 0, 0, x);\n    }\n\n    p.texture(texture);\n\n    p.background(255);\n\n    cam.setPosition(\n      ...polarToCartesian(0, 0, theta, p.width, true),\n      p.height / 2\n    );\n    cam.lookAt(0, 0, 0);\n\n    const twist = p.PI * noise();\n\n    for (let i = -SLICES / 2; i < SLICES / 2; i++) {\n      let y = p.map(i, -SLICES / 2, SLICES / 2, -size / 2, size / 2);\n      p.push();\n      p.translate(0, y, 0);\n      p.rotateY(p.map(i, -SLICES / 2, SLICES / 2, -twist, twist));\n      p.box(size, size / SLICES, size);\n\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}