{"version":3,"sources":["webpack:///./src/pages/sketch/2019/08/22.js","webpack:///./src/lib/polarToCartesian.js"],"names":["RENDER","process","DEV","sketch","p","HUE","random","COLORS","Array","from","length","_","i","setup","pixelDensity","frameRate","createCanvas","strokeWeight","colorMode","HSB","createLoop","gif","render","open","noiseRadius","draw","_p$animLoop","animLoop","noise2D","theta","blendMode","BLEND","background","noFill","MULTIPLY","push","translate","apply","polarToCartesian","width","height","forEach","c","center","QUARTER_PI","cos","burstRadius","map","sin","burstLines","floor","stroke","a","TWO_PI","line","concat","__webpack_exports__","_ref","location","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_4__","path","pathname","description","__webpack_require__","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","angle","distance","Math","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"8JAKMA,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IACfC,EAASC,MAAMC,KAAK,CAAEC,OAFhB,GAE+B,SAACC,EAAGC,GAAJ,OAAUP,EAAO,GAAaO,IAEzER,EAAES,MAAQ,WACJb,IACFI,EAAEU,aAAa,GACfV,EAAEW,UAAU,KAGdX,EAAEY,aAAa,IAAK,KACpBZ,EAAEa,aAAa,GACfb,EAAEc,UAAUd,EAAEe,IAAK,KAEnBf,EAAEgB,WAAW,GAAI,CACfC,MAAKrB,GAAS,CAAEsB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,MAIjBpB,EAAEqB,KAAO,WAAW,IAAAC,EACStB,EAAEuB,SAArBC,EADUF,EACVE,QAASC,EADCH,EACDG,MACjBzB,EAAE0B,UAAU1B,EAAE2B,OACd3B,EAAE4B,WAAW,KAEb5B,EAAE6B,SACF7B,EAAE0B,UAAU1B,EAAE8B,UACd9B,EAAEa,aAAa,GAEfb,EAAE+B,OACF/B,EAAEgC,UAAFC,MAAAjC,EACKkC,YAAiBlC,EAAEmC,MAAQ,EAAGnC,EAAEoC,OAAS,EAAGX,EAAOzB,EAAEmC,MAAQ,GAAG,IAGrEhC,EAAOkC,QAAQ,SAACC,EAAG9B,GACjB,IAAM+B,EAASL,YACb,EACA,EACAT,EAAQzB,EAAEwC,WAAahC,EACvBgB,EAAQxB,EAAEyC,IAAIhB,GAAQjB,IAAMR,EAAEmC,MAAQ,IACtC,GAEIO,EAAc1C,EAAE2C,IACpBnB,EAAQxB,EAAE4C,IAAInB,GAAQjB,IACrB,EACD,EACA,EACAR,EAAEmC,MAAQ,GAENU,EAAa7C,EAAE8C,MAAM9C,EAAE2C,IAAID,EAAa,EAAG1C,EAAEmC,MAAQ,EAAG,EAAG,MAEjEnC,EAAE+C,OAAOT,EAAG,GAAI,KAEhB,IAAK,IAAIU,EAAIvB,EAAOuB,EAAIhD,EAAEiD,OAASxB,EAAOuB,GAAKhD,EAAEiD,OAASJ,EACxD7C,EAAEkD,KAAFjB,MAAAjC,EAAC,CACC,EACA,GAFDmD,OAGIjB,IAAgBD,WAAhB,EACEM,EADFY,OAAA,CAED1B,EAAQuB,EAAIhD,EAAEwC,WAAahC,EAC3BkC,GACA,WAQGU,EAAA,iBAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAc1D,OAAQA,EAAQ2D,KAAMJ,EAASK,SAAUC,YAAY,wCC9ErEC,EAAAC,EAAAV,EAAA,sBAAAW,IAAAF,EAAAC,EAAAV,EAAA,sBAAAY,IAAAH,EAAAC,EAAAV,EAAA,sBAAAa,IAAA,IAAMF,EAAoB,SAACxB,EAAQ2B,EAAOC,GACxC,OAAO5B,EAAS6B,KAAK3B,IAAIyB,GAASC,GAE9BH,EAAoB,SAACzB,EAAQ2B,EAAOC,GACxC,OAAO5B,EAAS6B,KAAKxB,IAAIsB,GAASC,GAa9BF,EAA0B,SAC9BI,EACAC,EACAJ,EACAK,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUD,KAAK3B,IAAIyB,GAASK,EAChCI,EAAIL,EAAUF,KAAKxB,IAAIsB,GAASM,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBzC,IAzBU,SACvBmC,EACAC,EACAJ,EACAC,EACAM,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIX,EAAkBM,EAASH,EAAOC,GACtCQ,EAAIX,EAAkBM,EAASJ,EAAOC,GAC5C,OAAOM,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-08-22-js-6892084915f417a7c578.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const QTY = 5;\n  const HUE = p.random(100 / QTY);\n  const COLORS = Array.from({ length: QTY }, (_, i) => HUE + (100 / QTY) * i);\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.strokeWeight(2);\n    p.colorMode(p.HSB, 100);\n\n    p.createLoop(10, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 0.5,\n    });\n  };\n\n  p.draw = function() {\n    const { noise2D, theta } = p.animLoop;\n    p.blendMode(p.BLEND);\n    p.background(255);\n\n    p.noFill();\n    p.blendMode(p.MULTIPLY);\n    p.strokeWeight(4);\n\n    p.push();\n    p.translate(\n      ...polarToCartesian(p.width / 2, p.height / 2, theta, p.width / 5, true)\n    );\n\n    COLORS.forEach((c, i) => {\n      const center = polarToCartesian(\n        0,\n        0,\n        theta + p.QUARTER_PI * i,\n        noise2D(p.cos(theta), i) * (p.width / 2),\n        true\n      );\n      const burstRadius = p.map(\n        noise2D(p.sin(theta), i),\n        -1,\n        1,\n        0,\n        p.width / 3\n      );\n      const burstLines = p.floor(p.map(burstRadius, 0, p.width / 3, 2, 100));\n\n      p.stroke(c, 50, 100);\n\n      for (let a = theta; a < p.TWO_PI + theta; a += p.TWO_PI / burstLines) {\n        p.line(\n          0,\n          0,\n          ...polarToCartesian(\n            ...center,\n            theta + a + p.QUARTER_PI * i,\n            burstRadius,\n            true\n          )\n        );\n      }\n    });\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}