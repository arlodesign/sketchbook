{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2020/04/22.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","margin","gap","w","RENDER","getURLParams","render","setup","pixelDensity","frameRate","createCanvas","background","createLoop","gif","open","noiseRadius","noFill","width","draw","animLoop","noise2D","theta","push","translate","height","line","beginShape","vertex","curveVertex","TWO_PI","endShape","pop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,i6BCnBjC,IAAME,EAAS,SAASC,GACtB,IAKIC,EACAC,EACAC,EAPEC,EAASJ,EAAEK,eAAeC,OAShCN,EAAEO,MAAQ,WACRP,EAAEQ,aAAaJ,EAAS,EAAI,GAC5BJ,EAAES,UATS,IAUXT,EAAEU,aAAa,IAAK,KACpBV,EAAEW,WAAW,KACbX,EAAEY,WAba,GAaQ,CACrBC,MAAKT,GAAS,CAAEE,QAAQ,EAAOQ,MAAM,GACrCC,YAAa,IAEff,EAAEgB,SAEFf,EAASD,EAAEiB,MAAQ,GACnBd,EAAIH,EAAEiB,MAAQ,EAAIhB,EAClBC,GAAOF,EAAEiB,MAAiB,EAAThB,GAnBL,KAsBdD,EAAEkB,KAAO,WAAY,IAAD,EACSlB,EAAEmB,SAArBC,EADU,EACVA,QAASC,EADC,EACDA,MACjBrB,EAAEW,WAAW,KAEbX,EAAEsB,OACFtB,EAAEuB,UAAUvB,EAAEiB,MAAQ,EAAGjB,EAAEwB,OAAS,GACpC,IAAK,IAAI5B,GAAKO,EAAGP,GAAKO,EAAGP,GAAKM,EAAK,CACjCF,EAAEyB,KAAK7B,GAAIO,EAAGP,EAAGO,GAEjBH,EAAE0B,aACF1B,EAAE2B,OAAO/B,GAAIO,GACbH,EAAE2B,OAAO/B,GAAIO,GACb,IAAK,IAAIN,EAAY,KAAHK,EAAJC,EAAwBN,GAAKM,EAAGN,GAAQ,KAAHK,EACjDF,EAAE4B,YAAF,MAAA5B,EAAC,EACIF,YACDF,EACAC,EAAIuB,EAAQxB,EAAGC,GAAKK,EACpBF,EAAE6B,OAAST,EAAQxB,EAAI,IAAKC,EAAI,KAAOwB,EACvCnB,EAAMkB,EAAQvB,EAAI,IAAKD,EAAI,MAC3B,KAKNI,EAAE2B,OAAO/B,EAAGO,GACZH,EAAE2B,OAAO/B,EAAGO,GACZH,EAAE8B,WAEJ9B,EAAE+B,QAIS,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcjC,OAAQA,EAAQkC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-04-22-js-940122b70cd4c074eefd.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport \"p5.createloop\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  const DURATION = 20;\n  const RATE = 30;\n  const LINES = 125;\n\n  let margin;\n  let gap;\n  let w;\n\n  p.setup = function() {\n    p.pixelDensity(RENDER ? 2 : 1);\n    p.frameRate(RATE);\n    p.createCanvas(660, 840);\n    p.background(255);\n    p.createLoop(DURATION, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n    p.noFill();\n\n    margin = p.width / 10;\n    w = p.width / 2 - margin;\n    gap = (p.width - margin * 2) / LINES;\n  };\n\n  p.draw = function() {\n    const { noise2D, theta } = p.animLoop;\n    p.background(255);\n\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n    for (let x = -w; x <= w; x += gap) {\n      p.line(x, -w, x, w);\n\n      p.beginShape();\n      p.vertex(x, -w);\n      p.vertex(x, -w);\n      for (let y = -w + gap * (LINES / 10); y <= w; y += gap * (LINES / 10)) {\n        p.curveVertex(\n          ...polarToCartesian(\n            x,\n            y + noise2D(x, y) * gap,\n            p.TWO_PI * noise2D(x / 100, y / 100) + theta,\n            gap * noise2D(y / 100, x / 100),\n            true\n          )\n        );\n      }\n\n      p.vertex(x, w);\n      p.vertex(x, w);\n      p.endShape();\n    }\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}