{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/13.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","points","setup","createCanvas","stroke","strokeWeight","noFill","colorMode","HSB","initPoints","Array","from","a","random","TWO_PI","d","height","aSpeed","angle","concat","map","pt","Object","assign","draw","background","beginShape","curveVertex","polarToCartesian","width","length","forEach","i","endShape","push","blendMode","MULTIPLY","fill","sin","frameCount","rect","pop","SketchPage","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","Math","cos","y","distance","center","polarToCartesianX","polarToCartesianY"],"mappings":"ilBAKA,IAAMA,EAAS,SAASC,GACtB,IAEIC,EAAS,GAEbD,EAAEE,MAAQ,WACRF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,OAAO,KACTJ,EAAEK,aAAa,GACfL,EAAEM,SACFN,EAAEO,UAAUP,EAAEQ,IAAK,KAQnB,IANA,IAAMC,EAAaC,MAAMC,KAAKD,MAAM,IAAI,iBAAO,CAC7CE,EAAGZ,EAAEa,OAAOb,EAAEc,QACdC,EAAGf,EAAEa,OAAOb,EAAEgB,QACdC,OAAQjB,EAAEa,OAAO,KAAQb,EAAEa,OAAO,EAAE,EAAG,QAVtB,WAaVK,GACPjB,EAASA,EAAOkB,OACdV,EAAWW,KAAI,SAAAC,GAAE,OAAIC,OAAOC,OAAO,GAAIF,EAAI,CAAET,EAAGS,EAAGT,EAAIM,SAFlDA,EAAQ,EAAGA,EAAQlB,EAAEc,OAAQI,GAASlB,EAAEc,OAjBrC,GAiBsD,EAAzDI,IAOXlB,EAAEwB,KAAO,WACPxB,EAAEyB,WAAW,GAEbzB,EAAE0B,aACF1B,EAAE2B,YAAF,MAAA3B,EAAC,EACI4B,YACD5B,EAAE6B,MAAQ,EACV7B,EAAEgB,OAAS,EACXf,EAAOA,EAAO6B,OAAS,GAAGlB,EAC1BX,EAAOA,EAAO6B,OAAS,GAAGf,GAC1B,KAGJf,EAAE2B,YAAF,MAAA3B,EAAC,EACI4B,YACD5B,EAAE6B,MAAQ,EACV7B,EAAEgB,OAAS,EACXf,EAAOA,EAAO6B,OAAS,GAAGlB,EAC1BX,EAAOA,EAAO6B,OAAS,GAAGf,GAC1B,KAGJf,EAAE2B,YAAF,MAAA3B,EAAC,EACI4B,YACD5B,EAAE6B,MAAQ,EACV7B,EAAEgB,OAAS,EACXf,EAAOA,EAAO6B,OAAS,GAAGlB,EAC1BX,EAAOA,EAAO6B,OAAS,GAAGf,GAC1B,KAGJd,EAAO8B,SAAQ,WAAmBC,GAAO,IAAvBpB,EAAsB,EAAtBA,EAAGG,EAAmB,EAAnBA,EAAGE,EAAgB,EAAhBA,OACtBjB,EAAE2B,YAAF,MAAA3B,EAAC,EAAgB4B,YAAiB5B,EAAE6B,MAAQ,EAAG7B,EAAEgB,OAAS,EAAGJ,EAAGG,GAAG,KACnEd,EAAO+B,GAAGpB,GAAKK,KAGjBjB,EAAEiC,WAEFjC,EAAEkC,OACFlC,EAAEmC,UAAUnC,EAAEoC,UACdpC,EAAEqC,KAAKrC,EAAEoB,IAAIpB,EAAEsC,IAAItC,EAAEuC,WAAa,MAAO,EAAG,EAAG,EAAG,KAAM,IAAK,KAC7DvC,EAAEwC,KAAK,EAAG,EAAGxC,EAAE6B,MAAO7B,EAAEgB,QACxBhB,EAAEyC,QAUSC,UANI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ3C,OAAQA,O,kCC9EpB,sCAiBM4C,EAA0B,SAC9BC,EACAC,EACA3B,EACA4B,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUM,KAAKC,IAAIjC,GAAS4B,EAChCM,EAAIP,EAAUK,KAAKZ,IAAIpB,GAAS6B,EACtC,OAAOC,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG,MAIlBxB,IAzBU,SACvBgB,EACAC,EACA3B,EACAmC,EACAL,QACG,IADHA,OAAU,GAEV,IAAMC,EAbkB,SAACK,EAAQpC,EAAOmC,GACxC,OAAOC,EAASJ,KAAKC,IAAIjC,GAASmC,EAYxBE,CAAkBX,EAAS1B,EAAOmC,GACtCD,EAXkB,SAACE,EAAQpC,EAAOmC,GACxC,OAAOC,EAASJ,KAAKZ,IAAIpB,GAASmC,EAUxBG,CAAkBX,EAAS3B,EAAOmC,GAC5C,OAAOL,EAAU,CAACC,EAAGG,GAAK,CAAEH,IAAGG","file":"component---src-pages-sketch-2019-06-13-js-5898b13f07a643e92fb1.js","sourcesContent":["import React from \"react\";\nimport Layout from \"~components/layout\";\nimport Sketch from \"~components/sketch\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  const STEPS = 50;\n\n  let points = [];\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.stroke(255);\n    p.strokeWeight(2);\n    p.noFill();\n    p.colorMode(p.HSB, 100);\n\n    const initPoints = Array.from(Array(3), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.height),\n      aSpeed: p.random(0.01) * p.random([-1, 1]),\n    }));\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      points = points.concat(\n        initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\n      );\n    }\n  };\n\n  p.draw = function() {\n    p.background(0);\n\n    p.beginShape();\n    p.curveVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[points.length - 3].a,\n        points[points.length - 3].d,\n        true\n      )\n    );\n    p.curveVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[points.length - 2].a,\n        points[points.length - 2].d,\n        true\n      )\n    );\n    p.curveVertex(\n      ...polarToCartesian(\n        p.width / 2,\n        p.height / 2,\n        points[points.length - 1].a,\n        points[points.length - 1].d,\n        true\n      )\n    );\n    points.forEach(({ a, d, aSpeed }, i) => {\n      p.curveVertex(...polarToCartesian(p.width / 2, p.height / 2, a, d, true));\n      points[i].a += aSpeed;\n    });\n\n    p.endShape();\n\n    p.push();\n    p.blendMode(p.MULTIPLY);\n    p.fill(p.map(p.sin(p.frameCount / 500), -1, 1, 0, 100), 100, 100);\n    p.rect(0, 0, p.width, p.height);\n    p.pop();\n  };\n};\n\nconst SketchPage = () => (\n  <Layout>\n    <Sketch sketch={sketch} />\n  </Layout>\n);\n\nexport default SketchPage;\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}