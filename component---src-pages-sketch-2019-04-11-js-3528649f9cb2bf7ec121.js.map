{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/11.js","webpack:///./src/lib/polarToCartesian.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_sketch_layout__WEBPACK_IMPORTED_MODULE_1__","_lib_polarToCartesian__WEBPACK_IMPORTED_MODULE_2__","sketch","p","lines","radius","rotations","setup","createCanvas","background","width","floor","random","stroke","draw","map","sin","frameCount","push","translate","height","PI","start","polarToCartesian","end","strokeWeight","rotate","HALF_PI","i","line","apply","concat","TWO_PI","pop","_ref","location","a","createElement","path","pathname","description","d","polarToCartesianX","polarToCartesianY","polarToCartesianEllipse","center","angle","distance","Math","cos","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAIMQ,EAAS,SAASC,GACtB,IAAIC,EACAC,EACAC,EAEJH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBL,EAAEM,WAAW,KACbJ,EAASF,EAAEO,MAAQ,EAAc,IAAVP,EAAEO,MACzBJ,EAAYH,EAAEQ,MAAMR,EAAES,OAAO,EAAG,IAChCT,EAAEU,OAAO,IAAK,MAGhBV,EAAEW,KAAO,WACPV,EAAQD,EAAEY,IAAIZ,EAAEa,IAAIb,EAAEc,WAAa,MAAQ,EAAG,EAAG,EAAG,IACpDd,EAAEM,WAAW,GAEbN,EAAEe,OACFf,EAAEgB,UAAUhB,EAAEO,MAAQ,EAAGP,EAAEiB,OAAS,GAEpC,IAAK,IAAIzB,EAAI,EAAGA,EAAIQ,EAAEkB,GAAI1B,GAAKQ,EAAEkB,GAAKjB,EAAO,CAC3C,IAAMkB,EAAQC,YAAiB,EAAG,EAAG5B,EAAGU,GAAQ,GAC1CmB,EAAM,EAAEF,EAAM,GAAIA,EAAM,IAE9BnB,EAAEsB,aAAatB,EAAEY,IAAIO,EAAM,GAAI,EAAGjB,EAAQ,EAAG,GAAG,IAChDF,EAAEuB,OAAOvB,EAAEwB,QAAUvB,GAErB,IAAK,IAAIwB,EAAI,EAAGA,EAAItB,EAAWsB,IAC7BzB,EAAE0B,KAAFC,MAAA3B,EAAUmB,EAATS,OAAmBP,IACpBrB,EAAEuB,OAAOvB,EAAE6B,OAAS1B,GAIxBH,EAAE8B,QAISrC,EAAA,iBAAAsC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbrC,EAAAsC,EAAAC,cAACrC,EAAA,EAAD,CAAcE,OAAQA,EAAQoC,KAAMH,EAASI,SAAUC,YAAY,wCC1CrE9C,EAAA+C,EAAA7C,EAAA,sBAAA8C,IAAAhD,EAAA+C,EAAA7C,EAAA,sBAAA+C,IAAAjD,EAAA+C,EAAA7C,EAAA,sBAAAgD,IAAA,IAAMF,EAAoB,SAACG,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BJ,EAAoB,SAACE,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKhC,IAAI8B,GAASC,GAa9BH,EAA0B,SAC9BM,EACAC,EACAL,EACAM,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUF,KAAKC,IAAIH,GAASM,EAChCI,EAAIL,EAAUH,KAAKhC,IAAI8B,GAASO,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBjC,IAzBU,SACvB2B,EACAC,EACAL,EACAC,EACAO,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASJ,EAAOC,GACtCS,EAAIb,EAAkBQ,EAASL,EAAOC,GAC5C,OAAOO,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-04-11-js-3528649f9cb2bf7ec121.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\n\nconst sketch = function(p) {\n  let lines;\n  let radius;\n  let rotations;\n\n  p.setup = function() {\n    p.createCanvas(660, 840);\n    p.background(255);\n    radius = p.width / 2 - p.width * 0.05;\n    rotations = p.floor(p.random(3, 6));\n    p.stroke(255, 128);\n  };\n\n  p.draw = function() {\n    lines = p.map(p.sin(p.frameCount / 1000), -1, 1, 3, 50);\n    p.background(0);\n\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n\n    for (let r = 0; r < p.PI; r += p.PI / lines) {\n      const start = polarToCartesian(0, 0, r, radius, true);\n      const end = [-start[0], start[1]];\n\n      p.strokeWeight(p.map(start[1], 0, radius, 0, 5, true));\n      p.rotate(p.HALF_PI / lines);\n\n      for (let i = 0; i < rotations; i++) {\n        p.line(...start, ...end);\n        p.rotate(p.TWO_PI / rotations);\n      }\n    }\n\n    p.pop();\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}