{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/12.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","RENDER","process","DEV","sketch","p","points","setup","pixelDensity","frameRate","createCanvas","colorMode","HSB","noStroke","Array","from","a","random","TWO_PI","d","width","createLoop","gif","render","open","noiseRadius","draw","blendMode","BLEND","background","HARD_LIGHT","fill","map","push","translate","height","rotate","animLoop","theta","beginShape","forEach","curveVertex","noise1D","endShape","CLOSE","pop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAsB9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,26BCnBjC,IAAME,EAASC,GAAYC,MAAO,EAE5BC,EAAS,SAASC,GACtB,IAEIC,EAAS,GAEbD,EAAEE,MAAQ,WACJN,IACFI,EAAEG,aAAa,GACfH,EAAEI,UAAU,KAGdJ,EAAEK,aAAa,IAAK,KACpBL,EAAEM,UAAUN,EAAEO,IAAK,GAEnBP,EAAEQ,WAEFP,EAASQ,MAAMC,KAAKD,MAAM,IAAI,iBAAO,CACnCE,EAAGX,EAAEY,OAAOZ,EAAEa,QACdC,EAAGd,EAAEY,OAAOZ,EAAEe,MAAQ,EAAa,IAAVf,EAAEe,WAG7Bf,EAAEgB,WAAW,GAAI,CACfC,MAAKrB,GAAS,CAAEsB,QAAQ,EAAOC,MAAM,GACrCC,YAAa,KAIjBpB,EAAEqB,KAAO,WACPrB,EAAEsB,UAAUtB,EAAEuB,OACdvB,EAAEwB,WAAW,IACbxB,EAAEsB,UAAUtB,EAAEyB,YAEd,IALkB,eAKT5C,GACPmB,EAAE0B,KAAK1B,EAAE2B,IAAI3B,EAAEd,IAAIL,IAAS,EAAG,EAAG,EAAG,EAhC3B,GAgCiD,EAAG,IAC9DmB,EAAE4B,OACF5B,EAAE6B,UAAU7B,EAAEe,MAAQ,EAAGf,EAAE8B,OAAS,GACpC9B,EAAE+B,OAAO/B,EAAEgC,SAASC,OACpBjC,EAAEkC,aACFjC,EAAOkC,SAAQ,YAAe,IAAZxB,EAAW,EAAXA,EAAGG,EAAQ,EAARA,EACnBd,EAAEoC,YAAF,MAAApC,EAAC,EACIL,YACD,EACA,EACAgB,EAAI9B,EAAQmB,EAAE2B,IAAI3B,EAAEgC,SAASK,QAAQ1B,IAAK,EAAG,EAAG,EAAG,GACnDG,EAAId,EAAE2B,IAAI3B,EAAEgC,SAASK,QAAQvB,IAAK,EAAG,EAAG,IAAM,IAC9C,QAINd,EAAEsC,SAAStC,EAAEuC,OACbvC,EAAEwC,OAlBK3D,EAAQ,EAAGA,EAAQmB,EAAEa,OAAQhC,GAASmB,EAAEa,OA/BrC,EA+BsD,EAAzDhC,KAuBE,0BAAG4D,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc1C,OAAQA,EAAQ2C,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-07-12-js-3ac4c9e648bd0b1544ef.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\n\n/**\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} angle\n * @param {number} distance\n * @param {bool} asArray\n */\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport polarToCartesian from \"~lib/polarToCartesian\";\nimport \"p5.createloop\";\n\nconst RENDER = process.env.DEV && false;\n\nconst sketch = function(p) {\n  const STEPS = 6;\n\n  let points = [];\n\n  p.setup = function() {\n    if (RENDER) {\n      p.pixelDensity(1);\n      p.frameRate(30);\n    }\n\n    p.createCanvas(660, 840);\n    p.colorMode(p.HSB, 1);\n\n    p.noStroke();\n\n    points = Array.from(Array(4), () => ({\n      a: p.random(p.TWO_PI),\n      d: p.random(p.width / 4, p.width * 0.45),\n    }));\n\n    p.createLoop(20, {\n      gif: RENDER ? { render: false, open: true } : false,\n      noiseRadius: 1,\n    });\n  };\n\n  p.draw = function() {\n    p.blendMode(p.BLEND);\n    p.background(0.8);\n    p.blendMode(p.HARD_LIGHT);\n\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\n      p.fill(p.map(p.sin(angle), -1, 1, 0, (STEPS - 1) / STEPS), 1, 0.5);\n      p.push();\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(p.animLoop.theta);\n      p.beginShape();\n      points.forEach(({ a, d }) => {\n        p.curveVertex(\n          ...polarToCartesian(\n            0,\n            0,\n            a + angle + p.map(p.animLoop.noise1D(a), -1, 1, 1, 2),\n            d * p.map(p.animLoop.noise1D(d), -1, 1, 0.75, 1),\n            true\n          )\n        );\n      });\n      p.endShape(p.CLOSE);\n      p.pop();\n    }\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}